(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.WeaveUI = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../typings/react/react.d.ts"/>

var toolOverlayStyle = {
    background: "#000",
    opacity: .2,
    zIndex: 3,
    boxSizing: "border-box",
    backgroundClip: "padding",
    position: "fixed",
    visibility: "hidden",
    pointerEvents: "none"
};

var ToolOverlay = function (_React$Component) {
    _inherits(ToolOverlay, _React$Component);

    function ToolOverlay(props) {
        _classCallCheck(this, ToolOverlay);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolOverlay).call(this, props));

        _this.state = {
            style: toolOverlayStyle
        };
        return _this;
    }

    _createClass(ToolOverlay, [{
        key: "render",
        value: function render() {
            return React.createElement("div", { style: this.state.style });
        }
    }]);

    return ToolOverlay;
}(React.Component);

exports.default = ToolOverlay;

},{"react":"react"}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactDom = require("react-dom");

var ReactDOM = _interopRequireWildcard(_reactDom);

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _Layout = require("./react-flexible-layout/Layout");

var _Layout2 = _interopRequireDefault(_Layout);

var _weaveC3Barchart = require("./tools/weave-c3-barchart");

var _weaveC3Barchart2 = _interopRequireDefault(_weaveC3Barchart);

var _weaveC3Scatterplot = require("./tools/weave-c3-scatterplot");

var _weaveC3Scatterplot2 = _interopRequireDefault(_weaveC3Scatterplot);

var _weaveC3Colorlegend = require("./tools/weave-c3-colorlegend");

var _weaveC3Colorlegend2 = _interopRequireDefault(_weaveC3Colorlegend);

var _weaveC3Barchartlegend = require("./tools/weave-c3-barchartlegend");

var _weaveC3Barchartlegend2 = _interopRequireDefault(_weaveC3Barchartlegend);

var _weaveC3Linechart = require("./tools/weave-c3-linechart");

var _weaveC3Linechart2 = _interopRequireDefault(_weaveC3Linechart);

var _weaveC3Piechart = require("./tools/weave-c3-piechart");

var _weaveC3Piechart2 = _interopRequireDefault(_weaveC3Piechart);

var _weaveC3Histogram = require("./tools/weave-c3-histogram");

var _weaveC3Histogram2 = _interopRequireDefault(_weaveC3Histogram);

var _weaveSessionStateMenu = require("./tools/weave-session-state-menu");

var _weaveSessionStateMenu2 = _interopRequireDefault(_weaveSessionStateMenu);

var _OpenLayersMapTool = require("./tools/OpenLayersMapTool");

var _OpenLayersMapTool2 = _interopRequireDefault(_OpenLayersMapTool);

var _weaveReactTable = require("./tools/weave-react-table");

var _weaveReactTable2 = _interopRequireDefault(_weaveReactTable);

var _WeaveTool = require("./WeaveTool");

var _ToolOverlay = require("./ToolOverlay");

var _ToolOverlay2 = _interopRequireDefault(_ToolOverlay);

var _StandardLib = require("./utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../typings/react/react.d.ts"/>
/// <reference path="../typings/react/react-dom.d.ts"/>
/// <reference path="../typings/lodash/lodash.d.ts"/>
/// <reference path="../typings/weave/Weave.d.ts"/>
/// <reference path="../typings/weave/weavejs.d.ts"/>

// Temporary solution
// because typescript removes
// unused imports
var v1 = [_weaveC3Barchart2.default, _weaveC3Scatterplot2.default, _weaveC3Colorlegend2.default, _weaveC3Barchartlegend2.default, _weaveC3Linechart2.default, _weaveC3Piechart2.default, _weaveC3Histogram2.default, _weaveSessionStateMenu2.default, _OpenLayersMapTool2.default, _weaveReactTable2.default];

var LAYOUT = "Layout";
var LEFT = "left";
var RIGHT = "right";
var TOP = "top";
var BOTTOM = "bottom";
var VERTICAL = "vertical";
var HORIZONTAL = "horizontal";
var TOOLOVERLAY = "tooloverlay";

var WeaveLayoutManager = function (_React$Component) {
    _inherits(WeaveLayoutManager, _React$Component);

    function WeaveLayoutManager(props) {
        _classCallCheck(this, WeaveLayoutManager);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveLayoutManager).call(this, props));

        _this.weave = _this.props.weave || new Weave();
        _this.weave.path(LAYOUT).request("FlexibleLayout");
        _this.margin = 8;
        return _this;
    }

    _createClass(WeaveLayoutManager, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            window.addEventListener("resize", this._forceUpdate = _.throttle(function () {
                _this2.dirty = true;_this2.forceUpdate();
            }, 30));
            this.weave.root.childListCallbacks.addGroupedCallback(this, _.debounce(this.forceUpdate.bind(this), 0), true);
            this.weave.path(LAYOUT).addCallback(this, _.debounce(this.forceUpdate.bind(this), 0), true);
            this.weave.path(LAYOUT).state(this.simplifyState(this.weave.path(LAYOUT).getState()));
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            window.removeEventListener("resize", this._forceUpdate);
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (Weave.detectChange(this, this.weave.getObject(LAYOUT)) || this.dirty) {
                // dirty flag to trigger render on window resize
                this.dirty = false;
                //_.debounce(this.forceUpdate.bind(this), 0)();
                this.forceUpdate();
            }
        }
    }, {
        key: "saveState",
        value: function saveState(newState) {
            newState = this.simplifyState(newState);
            newState.flex = 1;
            this.weave.path(LAYOUT).state(newState);
            // temporary hack because weave
            // doesn't properly callback forceUpdate
            //this.forceUpdate();
        }
    }, {
        key: "onDragStart",
        value: function onDragStart(id, event) {
            this.toolDragged = id;
            var toolRef = id[0]; // toolName as used in the ref for the weave tool.
            var element = ReactDOM.findDOMNode(this.refs[toolRef]);
            // hack because dataTransfer doesn't exist on type event
            event.dataTransfer.setDragImage(element, 0, 0);
            event.dataTransfer.setData('text/html', null);
        }
    }, {
        key: "hideOverlay",
        value: function hideOverlay() {
            var toolOverlayStyle = _.clone(this.refs[TOOLOVERLAY].state.style);
            toolOverlayStyle.visibility = "hidden";
            toolOverlayStyle.left = toolOverlayStyle.top = toolOverlayStyle.width = toolOverlayStyle.height = 0;
            this.refs[TOOLOVERLAY].setState({
                style: toolOverlayStyle
            });
        }
    }, {
        key: "onDragEnd",
        value: function onDragEnd() {
            if (this.toolDragged && this.toolOver) {
                this.updateLayout(this.toolDragged, this.toolOver, this.dropZone);
                this.toolDragged = null;
                this.dropZone = null;
                this.hideOverlay();
            }
        }
    }, {
        key: "onDragOver",
        value: function onDragOver(toolOver, event) {
            if (!this.toolDragged) {
                return;
            }
            if (_.isEqual(this.toolDragged, toolOver)) {
                // hide the overlay if hovering over the tool being dragged
                this.toolOver = null;
                this.hideOverlay();
                return;
            }
            var toolNode = this.refs[LAYOUT].getDOMNodeFromId(toolOver);
            var toolNodePosition = toolNode.getBoundingClientRect();
            var toolOverlayStyle = _.clone(this.refs[TOOLOVERLAY].state.style);
            var dropZone = this.getDropZone(toolOver, event);
            toolOverlayStyle.left = toolNodePosition.left;
            toolOverlayStyle.top = toolNodePosition.top;
            toolOverlayStyle.width = toolNodePosition.width;
            toolOverlayStyle.height = toolNodePosition.height;
            toolOverlayStyle.visibility = "visible";
            if (dropZone === LEFT) {
                toolOverlayStyle.width = toolNodePosition.width / 2;
            } else if (dropZone === RIGHT) {
                toolOverlayStyle.left = toolNodePosition.left + toolNodePosition.width / 2;
                toolOverlayStyle.width = toolNodePosition.width / 2;
            } else if (dropZone === BOTTOM) {
                toolOverlayStyle.top = toolNodePosition.top + toolNodePosition.height / 2;
                toolOverlayStyle.height = toolNodePosition.height / 2;
            } else if (dropZone === TOP) {
                toolOverlayStyle.height = toolNodePosition.height / 2;
            }
            if (dropZone !== this.dropZone || !_.isEqual(toolOver, this.toolOver)) {
                this.refs[TOOLOVERLAY].setState({
                    style: toolOverlayStyle
                });
            }
            this.dropZone = dropZone;
            this.toolOver = toolOver;
        }
    }, {
        key: "getDropZone",
        value: function getDropZone(id, event) {
            if (this.toolDragged) {
                if (!_.isEqual(this.toolDragged, id)) {
                    var toolNode = this.refs[LAYOUT].getDOMNodeFromId(id);
                    var toolNodePosition = toolNode.getBoundingClientRect();
                    var center = {
                        x: (toolNodePosition.right - toolNodePosition.left) / 2,
                        y: (toolNodePosition.bottom - toolNodePosition.top) / 2
                    };
                    var mousePosRelativeToCenter = {
                        x: event.clientX - (toolNodePosition.left + center.x),
                        y: event.clientY - (toolNodePosition.top + center.y)
                    };
                    var mouseNorm = {
                        x: mousePosRelativeToCenter.x / (toolNodePosition.width / 2),
                        y: mousePosRelativeToCenter.y / (toolNodePosition.height / 2)
                    };
                    var mousePolarCoord = {
                        r: Math.sqrt(mouseNorm.x * mouseNorm.x + mouseNorm.y * mouseNorm.y),
                        theta: Math.atan2(mouseNorm.y, mouseNorm.x)
                    };
                    var zones = [RIGHT, BOTTOM, LEFT, TOP];
                    var zoneIndex = Math.round(mousePolarCoord.theta / (2 * Math.PI) * 4 + 4) % 4;
                    if (mousePolarCoord.r < 0.34) {
                        return "center";
                    } else {
                        return zones[zoneIndex];
                    }
                }
            }
        }
    }, {
        key: "simplifyState",
        value: function simplifyState(state) {
            if (!state) return {};
            var children = state.children;
            if (!children) {
                return state;
            }
            if (children.length === 1) {
                return this.simplifyState(children[0]);
            }
            var simpleChildren = [];
            for (var i = 0; i < children.length; i++) {
                var child = this.simplifyState(children[i]);
                if (child.children && child.direction === state.direction) {
                    var childChildren = child.children;
                    for (var ii = 0; ii < childChildren.length; ii++) {
                        var childChild = childChildren[ii];
                        childChild.flex *= child.flex;
                        simpleChildren.push(childChild);
                    }
                } else {
                    simpleChildren.push(child);
                }
            }
            state.children = simpleChildren;
            var totalSizeChildren = _.sum(_.map(children, "flex"));
            //Scale flex values between 0 and 1 so they sum to 1, avoiding an apparent
            //flex bug where space is lost if sum of flex values is less than 1.
            for (var i = 0; i < state.children.length; i++) {
                state.children[i].flex = _StandardLib2.default.normalize(state.children[i].flex, 0, totalSizeChildren);
            }
            return state;
        }
    }, {
        key: "updateLayout",
        value: function updateLayout(toolDragged, toolDroppedOn, dropZone) {
            if (!this.toolDragged || !this.toolOver || !this.dropZone) {
                return;
            }
            var newState = _.cloneDeep(this.weave.path(LAYOUT).getState());
            var src = _StandardLib2.default.findDeep(newState, { id: toolDragged });
            var dest = _StandardLib2.default.findDeep(newState, { id: toolDroppedOn });
            if (_.isEqual(src.id, dest.id)) {
                return;
            }
            if (dropZone === "center") {
                var srcId = src.id;
                src.id = dest.id;
                dest.id = srcId;
            } else {
                var srcParentArray = _StandardLib2.default.findDeep(newState, function (obj) {
                    return Array.isArray(obj) && obj.indexOf(src) >= 0;
                });
                srcParentArray.splice(srcParentArray.indexOf(src), 1);
                delete dest.id;
                dest.direction = dropZone === TOP || dropZone === BOTTOM ? VERTICAL : HORIZONTAL;
                dest.children = [{
                    id: toolDragged,
                    flex: 0.5
                }, {
                    id: toolDroppedOn,
                    flex: 0.5
                }];
                if (dropZone === BOTTOM || dropZone === RIGHT) {
                    dest.children.reverse();
                }
            }
            this.saveState(newState);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var children = [];
            var newState = this.weave.path(LAYOUT).getState();
            var paths = this.weave.path().getChildren();
            var rect;
            if (this.element) {
                rect = this.element.getBoundingClientRect();
            }
            for (var i = 0; i < paths.length; i++) {
                var path = paths[i];
                var impl = path.getType();
                if (impl === "weave.visualization.tools::ExternalTool" && path.getType("toolClass")) {
                    impl = path.getState("toolClass");
                }
                if (impl === "weavejs.core.LinkableHashMap" && path.getType("class")) impl = path.getState("class");
                impl = (0, _WeaveTool.getToolImplementation)(impl);
                var toolName = path.getPath()[0];
                var node;
                var toolRect;
                var toolPosition;
                if (impl) {
                    if (this.refs[LAYOUT] && rect) {
                        node = this.refs[LAYOUT].getDOMNodeFromId(path.getPath());
                        if (node) {
                            toolRect = node.getBoundingClientRect();
                            toolPosition = {
                                top: toolRect.top - rect.top,
                                left: toolRect.left - rect.left,
                                width: toolRect.right - toolRect.left,
                                height: toolRect.bottom - toolRect.top,
                                position: "absolute"
                            };
                        }
                    }
                    children.push(React.createElement(_WeaveTool.WeaveTool, { ref: toolName, key: toolName, toolPath: path, style: toolPosition, onDragOver: this.onDragOver.bind(this, path.getPath()), onDragStart: this.onDragStart.bind(this, path.getPath()), onDragEnd: this.onDragEnd.bind(this) }));
                }
            }
            return React.createElement(
                "div",
                { ref: function ref(elt) {
                        _this3.element = elt;
                    }, style: { width: "100%", height: "100%", display: "flex", position: "relative" } },
                React.createElement(_Layout2.default, { key: LAYOUT, ref: LAYOUT, state: _.cloneDeep(newState), onStateChange: this.saveState.bind(this) }),
                children,
                React.createElement(_ToolOverlay2.default, { ref: TOOLOVERLAY })
            );
        }
    }]);

    return WeaveLayoutManager;
}(React.Component);

exports.default = WeaveLayoutManager;

},{"./ToolOverlay":1,"./WeaveTool":3,"./react-flexible-layout/Layout":9,"./tools/OpenLayersMapTool":16,"./tools/weave-c3-barchart":31,"./tools/weave-c3-barchartlegend":32,"./tools/weave-c3-colorlegend":33,"./tools/weave-c3-histogram":34,"./tools/weave-c3-linechart":35,"./tools/weave-c3-piechart":36,"./tools/weave-c3-scatterplot":37,"./tools/weave-react-table":38,"./tools/weave-session-state-menu":39,"./utils/StandardLib":41,"lodash":"lodash","react":"react","react-dom":"react-dom"}],3:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WeaveTool = undefined;
exports.registerToolImplementation = registerToolImplementation;
exports.getToolImplementation = getToolImplementation;

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _ui = require("./react-ui/ui");

var _ui2 = _interopRequireDefault(_ui);

var _StandardLib = require("./utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _tooltip = require("./tools/tooltip");

var _tooltip2 = _interopRequireDefault(_tooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../typings/react/react.d.ts"/>
///<reference path="../typings/react/react-dom.d.ts"/>
///<reference path="../typings/lodash/lodash.d.ts"/>
///<reference path="../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>
///<reference path="../typings/react-bootstrap/react-bootstrap.d.ts"/>

var toolRegistry = {};
var grabberStyle = {
    width: "16",
    height: "16",
    cursor: "move",
    background: "url(http://placehold.it/32x32)"
};
function registerToolImplementation(asClassName, jsClass) {
    toolRegistry[asClassName] = jsClass;
}
function getToolImplementation(asClassName) {
    return toolRegistry[asClassName];
}

var WeaveTool = exports.WeaveTool = function (_React$Component) {
    _inherits(WeaveTool, _React$Component);

    function WeaveTool(props) {
        _classCallCheck(this, WeaveTool);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveTool).call(this, props));

        _this.toolPath = _this.props.toolPath;
        var toolType = _this.toolPath ? _this.toolPath.getType() : _this.props.toolClass;
        if (toolType === "weave.visualization.tools::ExternalTool" && _this.toolPath.getType("toolClass")) {
            toolType = _this.toolPath.getState("toolClass");
        }
        if (toolType === "weavejs.core.LinkableHashMap" && _this.toolPath.getType("class")) toolType = _this.toolPath.getState("class");
        _this.ToolClass = getToolImplementation(toolType);
        _this.titleBarHeight = 25;
        return _this;
    }

    _createClass(WeaveTool, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            // if(this.toolPath) {
            //     this.toolPath.addCallback(this, this.forceUpdate);
            // }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var toolHeight = this.props.style ? this.props.style.height - this.titleBarHeight : 320;
            var toolWidth = this.props.style ? this.props.style.width : 320;
            var reactTool;
            if (React.Component.isPrototypeOf(this.ToolClass)) {
                reactTool = React.createElement(this.ToolClass, {
                    key: "tool",
                    ref: function ref(c) {
                        _this2.tool = c;
                    },
                    toolPath: this.toolPath,
                    style: { height: toolHeight, width: toolWidth },
                    toolTip: this.toolTip
                });
            }
            return React.createElement(
                _ui2.default.VBox,
                { style: this.props.style, onMouseEnter: function onMouseEnter() {
                        _this2.titleBar.setState({ showControls: true });
                    }, onMouseLeave: function onMouseLeave() {
                        _this2.titleBar.setState({ showControls: false });
                    }, onDragOver: this.props.onDragOver, onDragEnd: this.props.onDragEnd },
                React.createElement(TitleBar, { ref: function ref(c) {
                        _this2.titleBar = c;
                    }, onDragStart: this.props.onDragStart, titleBarHeight: this.titleBarHeight, title: this.title }),
                React.createElement(
                    "div",
                    { style: { width: toolWidth, height: toolHeight } },
                    React.createElement(
                        "div",
                        { style: { width: "100%", height: "100%", maxHeight: "100%" } },
                        reactTool
                    )
                ),
                React.createElement(_tooltip2.default, { ref: function ref(c) {
                        _this2.toolTip = c;
                    } })
            );
        }
    }, {
        key: "title",
        get: function get() {
            return this.tool ? this.tool.title : "";
        }
    }]);

    return WeaveTool;
}(React.Component);

var TitleBar = function (_React$Component2) {
    _inherits(TitleBar, _React$Component2);

    function TitleBar(props) {
        _classCallCheck(this, TitleBar);

        var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(TitleBar).call(this, props));

        _this3.state = {
            showControls: false
        };
        return _this3;
    }

    _createClass(TitleBar, [{
        key: "render",
        value: function render() {
            var windowBar = {
                width: "100%",
                height: this.props.titleBarHeight,
                backgroundColor: this.state.showControls ? "#f8f8f8" : ""
            };
            var titleStyle = {
                cursor: "move",
                height: this.props.titleBarHeight,
                textAlign: "center",
                overflow: "hidden",
                whiteSpace: "nowrap",
                flex: 1,
                textOverflow: "ellipsis",
                paddingTop: "3"
            };
            var transitions = {
                visibility: this.state.showControls ? "visible" : "hidden",
                opacity: this.state.showControls ? 0.7 : 0,
                transition: this.state.showControls ? "visibiliy 0s 0.1s, opacity 0.1s linear" : "visibility 0s 0.1s, opacity 0.1s linear"
            };
            var leftControls = {
                marginLeft: 5,
                marginTop: 2,
                width: 20
            };
            var rightControls = {
                marginTop: 2,
                width: 38
            };
            _StandardLib2.default.merge(leftControls, transitions);
            _StandardLib2.default.merge(rightControls, transitions);
            return React.createElement(
                _ui2.default.HBox,
                { ref: "header", style: windowBar, draggable: true, onDragStart: this.props.onDragStart },
                React.createElement(
                    "span",
                    { style: titleStyle },
                    this.props.title
                )
            );
        }
    }]);

    return TitleBar;
}(React.Component);

},{"./react-ui/ui":14,"./tools/tooltip":30,"./utils/StandardLib":41,"react":"react"}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadLayout = exports.getUrlParams = exports.MenuTool = exports.DataTable = exports.Map = exports.Histogram = exports.PieChart = exports.LineChart = exports.BarChartLegend = exports.ColorLegend = exports.ScatterPlot = exports.Barchart = exports.Layout = undefined;

var _WeaveLayoutManager = require("./WeaveLayoutManager");

var _WeaveLayoutManager2 = _interopRequireDefault(_WeaveLayoutManager);

var _weaveC3Barchart = require("./tools/weave-c3-barchart");

var _weaveC3Barchart2 = _interopRequireDefault(_weaveC3Barchart);

var _weaveC3Scatterplot = require("./tools/weave-c3-scatterplot");

var _weaveC3Scatterplot2 = _interopRequireDefault(_weaveC3Scatterplot);

var _weaveC3Colorlegend = require("./tools/weave-c3-colorlegend");

var _weaveC3Colorlegend2 = _interopRequireDefault(_weaveC3Colorlegend);

var _weaveC3Barchartlegend = require("./tools/weave-c3-barchartlegend");

var _weaveC3Barchartlegend2 = _interopRequireDefault(_weaveC3Barchartlegend);

var _weaveC3Linechart = require("./tools/weave-c3-linechart");

var _weaveC3Linechart2 = _interopRequireDefault(_weaveC3Linechart);

var _weaveC3Piechart = require("./tools/weave-c3-piechart");

var _weaveC3Piechart2 = _interopRequireDefault(_weaveC3Piechart);

var _weaveC3Histogram = require("./tools/weave-c3-histogram");

var _weaveC3Histogram2 = _interopRequireDefault(_weaveC3Histogram);

var _OpenLayersMapTool = require("./tools/OpenLayersMapTool");

var _OpenLayersMapTool2 = _interopRequireDefault(_OpenLayersMapTool);

var _weaveReactTable = require("./tools/weave-react-table");

var _weaveReactTable2 = _interopRequireDefault(_weaveReactTable);

var _weaveSessionStateMenu = require("./tools/weave-session-state-menu");

var _weaveSessionStateMenu2 = _interopRequireDefault(_weaveSessionStateMenu);

var _StandardLib = require("./utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _jszip = require("jszip");

var _jszip2 = _interopRequireDefault(_jszip);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactDom = require("react-dom");

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*global Weave, weavejs*/
var stub = React; /// <reference path="../typings/jszip/jszip.d.ts"/>
/// <reference path="../typings/react/react.d.ts"/>
/// <reference path="../typings/react/react-dom.d.ts"/>
/// <reference path="../typings/weave/Weave.d.ts"/>
/// <reference path="../typings/weave/weavejs.d.ts"/>

weavejs.util.JS.JSZip = _jszip2.default;
// var WeaveUI = {
//     Layout: WeaveLayoutManager,
//     Barchart: WeaveC3Barchart,
//     ScatterPlot: WeaveC3ScatterPlot,
//     ColorLegend: WeaveC3ColorLegend,
//     LineChart: WeaveC3LineChart,
//     PieChart: WeaveC3PieChart,
//     Histogram: WeaveC3Histogram,
//     Map: WeaveOpenLayersMap,
//     DataTable: WeaveReactTable,
//     MenuTool: SessionStateMenuTool,
//     getUrlParams: StandardLib.getUrlParams,
//     loadLayout: function(weave, fileName, targetEltId, callback) {
//
//         function render() {
//             ReactDOM.render(
//                 <WeaveUI.Layout weave={weave}/>,
//                 document.getElementById(targetEltId),
//                 callback
//             );
//         }
//
//         weavejs.core.WeaveArchive.loadUrl(weave, fileName).then(render, e => {
//             console.error(e)
//         });
//
//     }
// };
//
// // namespace WeaveUI
// export default WeaveUI;
var Layout = exports.Layout = _WeaveLayoutManager2.default;
var Barchart = exports.Barchart = _weaveC3Barchart2.default;
var ScatterPlot = exports.ScatterPlot = _weaveC3Scatterplot2.default;
var ColorLegend = exports.ColorLegend = _weaveC3Colorlegend2.default;
var BarChartLegend = exports.BarChartLegend = _weaveC3Barchartlegend2.default;
var LineChart = exports.LineChart = _weaveC3Linechart2.default;
var PieChart = exports.PieChart = _weaveC3Piechart2.default;
var Histogram = exports.Histogram = _weaveC3Histogram2.default;
var Map = exports.Map = _OpenLayersMapTool2.default;
var DataTable = exports.DataTable = _weaveReactTable2.default;
var MenuTool = exports.MenuTool = _weaveSessionStateMenu2.default;
var getUrlParams = exports.getUrlParams = _StandardLib2.default.getUrlParams;
var loadLayout = exports.loadLayout = function loadLayout(weave, fileName, targetEltId, callback) {
    function render() {
        ReactDOM.render(React.createElement(Layout, { weave: weave }), document.getElementById(targetEltId), callback);
    }
    if (weave) {
        if (!fileName) {
            render();
        } else {
            weavejs.core.WeaveArchive.loadUrl(weave, fileName).then(render, function (e) {
                console.error(e);
            });
        }
    } else {
        console.error("Missing Weave instance!");
    }
};

},{"./WeaveLayoutManager":2,"./tools/OpenLayersMapTool":16,"./tools/weave-c3-barchart":31,"./tools/weave-c3-barchartlegend":32,"./tools/weave-c3-colorlegend":33,"./tools/weave-c3-histogram":34,"./tools/weave-c3-linechart":35,"./tools/weave-c3-piechart":36,"./tools/weave-c3-scatterplot":37,"./tools/weave-react-table":38,"./tools/weave-session-state-menu":39,"./utils/StandardLib":41,"jszip":"jszip","react":"react","react-dom":"react-dom"}],5:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactBootstrap = require("react-bootstrap");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _TableHead = require("./TableHead");

var _TableHead2 = _interopRequireDefault(_TableHead);

var _TableBody = require("./TableBody");

var _TableBody2 = _interopRequireDefault(_TableBody);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/react-bootstrap/react-bootstrap.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>

var ReactBootstrapTable = function (_React$Component) {
    _inherits(ReactBootstrapTable, _React$Component);

    function ReactBootstrapTable(props) {
        _classCallCheck(this, ReactBootstrapTable);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactBootstrapTable).call(this, props));

        _this.state = {
            probedIds: [],
            selectedIds: []
        };
        return _this;
    }

    _createClass(ReactBootstrapTable, [{
        key: "onMouseOver",
        value: function onMouseOver(id, status) {
            var probedIds = this.state.probedIds.slice(0);
            // find the selected record location
            var keyLocation = probedIds.indexOf(id);
            if (!status && keyLocation > -1) {
                probedIds.splice(keyLocation, 1);
            } else {
                probedIds.push(id);
            }
            if (this.props.onProbe) {
                this.props.onProbe(probedIds);
            }
            this.setState({
                probedIds: probedIds
            });
        }
    }, {
        key: "onClick",
        value: function onClick(id, event) {
            var _this2 = this;

            var selectedIds = this.state.selectedIds.slice(0);
            // in single selection mode,
            // or ctrl/cmd selcection mode
            // already selected keys get unselected
            // find the selected record location
            var keyLocation = selectedIds.indexOf(id);
            // multiple selection
            if (event.ctrlKey || event.metaKey) {
                // if the record is already in the selection
                // we remove it
                if (keyLocation > -1) {
                    selectedIds.splice(keyLocation, 1);
                } else {
                    selectedIds.push(id);
                }
                this.lastClicked = id;
            } else if (event.shiftKey) {
                selectedIds = [];
                if (!this.lastClicked) {} else {
                    var start = _.findIndex(this.props.rows, function (row) {
                        return row["id"] == _this2.lastClicked;
                    });
                    var end = _.findIndex(this.props.rows, function (row) {
                        return row["id"] == id;
                    });
                    if (start > end) {
                        var temp = start;
                        start = end;
                        end = temp;
                    }
                    for (var i = start; i <= end; i++) {
                        selectedIds.push(this.props.rows[i]["id"]);
                    }
                }
            } else {
                // if there was only one record selected
                // and we are clicking on it again, then we want to
                // clear the selection.
                if (selectedIds.length == 1 && selectedIds[0] == id) {
                    selectedIds = [];
                    this.lastClicked = null;
                } else {
                    selectedIds = [id];
                    this.lastClicked = id;
                }
            }
            if (this.props.onSelection) {
                this.props.onSelection(selectedIds);
            }
            this.setState({
                selectedIds: selectedIds
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var tableContainer = {
                overflow: "auto",
                height: this.props.height
            };
            var selectedIds;
            var probedIds;
            if (this.props.selectedIds) {
                selectedIds = this.props.selectedIds;
            } else {
                selectedIds = this.state.selectedIds;
            }
            if (this.props.probedIds) {
                probedIds = this.props.probedIds;
            } else {
                probedIds = this.state.probedIds;
            }
            return React.createElement(
                "div",
                { style: tableContainer },
                React.createElement(
                    _reactBootstrap.Table,
                    { key: "table", ref: "table", striped: this.props.striped, bordered: this.props.bordered, condensed: this.props.condensed, hover: true },
                    React.createElement(_TableHead2.default, { key: "head", ref: function ref(c) {
                            _this3.tableHead = c;
                        }, columnTitles: this.props.columnTitles, idProperty: this.props.idProperty, showIdColumn: this.props.showIdColumn }),
                    React.createElement(_TableBody2.default, { key: "body", ref: function ref(c) {
                            _this3.tableBody = c;
                        }, idProperty: this.props.idProperty, onMouseOver: this.onMouseOver.bind(this), onClick: this.onClick.bind(this), rows: this.props.rows, selectedIds: selectedIds, probedIds: probedIds, showIdColumn: this.props.showIdColumn })
                )
            );
        }
    }]);

    return ReactBootstrapTable;
}(React.Component);

exports.default = ReactBootstrapTable;

},{"./TableBody":6,"./TableHead":7,"lodash":"lodash","react":"react","react-bootstrap":"react-bootstrap"}],6:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _TableRow = require("./TableRow");

var _TableRow2 = _interopRequireDefault(_TableRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/react-bootstrap/react-bootstrap.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>

var TableBody = function (_React$Component) {
    _inherits(TableBody, _React$Component);

    function TableBody(props) {
        _classCallCheck(this, TableBody);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TableBody).call(this, props));

        _this.tableRows = {};
        return _this;
    }

    _createClass(TableBody, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {}
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            return React.createElement(
                "tbody",
                null,
                this.props.rows.map(function (row, index) {
                    return React.createElement(_TableRow2.default, { ref: function ref(tableRow) {
                            _this2.tableRows[row[_this2.props.idProperty]] = tableRow;
                        }, key: index, onMouseOver: _this2.props.onMouseOver.bind(_this2, row[_this2.props.idProperty]), onClick: _this2.props.onClick.bind(_this2, row[_this2.props.idProperty]), idProperty: _this2.props.idProperty, row: row, probed: _this2.props.probedIds.indexOf(row[_this2.props.idProperty]) > -1, selected: _this2.props.selectedIds.indexOf(row[_this2.props.idProperty]) > -1, showIdColumn: _this2.props.showIdColumn });
                })
            );
        }
    }]);

    return TableBody;
}(React.Component);

exports.default = TableBody;

},{"./TableRow":8,"react":"react"}],7:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/react-bootstrap/react-bootstrap.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>

var TableHead = function (_React$Component) {
    _inherits(TableHead, _React$Component);

    function TableHead(props) {
        _classCallCheck(this, TableHead);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(TableHead).call(this, props));
    }

    _createClass(TableHead, [{
        key: "render",
        value: function render() {
            var _this2 = this;

            var headers = [];
            var keys = Object.keys(this.props.columnTitles);
            if (!this.props.showIdColumn) {
                keys.splice(keys.indexOf(this.props.idProperty), 1);
            }
            headers = keys.map(function (columnId) {
                return React.createElement(
                    "th",
                    { key: columnId },
                    _this2.props.columnTitles[columnId]
                );
            });
            return React.createElement(
                "thead",
                { className: "table-header" },
                React.createElement(
                    "tr",
                    null,
                    headers
                )
            );
        }
    }]);

    return TableHead;
}(React.Component);

exports.default = TableHead;

},{"react":"react"}],8:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _reactVendorPrefix = require("react-vendor-prefix");

var Prefixer = _interopRequireWildcard(_reactVendorPrefix);

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/react-bootstrap/react-bootstrap.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>

;
var baseStyle = {
    userSelect: "none"
};

var TableRow = function (_React$Component) {
    _inherits(TableRow, _React$Component);

    function TableRow(props) {
        _classCallCheck(this, TableRow);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TableRow).call(this, props));

        _this.selectedStyle = {
            backgroundColor: "#80CCFF"
        };
        _this.clear = {};
        _this.probedAndSelected = {
            backgroundColor: "#99D6FF"
        };
        _this.probedStyle = {
            backgroundColor: "rgba(153, 214, 255, 0.4)"
        };
        return _this;
    }

    _createClass(TableRow, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
            // only update the row if the key has changed
            return this.props.selected != nextProps.selected || this.props.probed != nextProps.probed || !_.isEqual(this.props.row, nextProps.row);
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var style = {};
            var selected = this.props.selected;
            var probed = this.props.probed;
            if (selected && probed) {
                style = this.probedAndSelected;
            }
            if (selected && !probed) {
                style = this.selectedStyle;
            }
            if (!selected && probed) {
                style = this.probedStyle;
            }
            if (!selected && !probed) {
                style = this.clear;
            }
            _StandardLib2.default.merge(style, baseStyle);
            var cells = [];
            var keys = Object.keys(this.props.row);
            if (!this.props.showIdColumn) {
                keys.splice(keys.indexOf(this.props.idProperty), 1);
            }
            cells = keys.map(function (key) {
                return React.createElement(
                    "td",
                    { key: key },
                    _this2.props.row[key]
                );
            });
            return React.createElement(
                "tr",
                { style: Prefixer.prefix({ styles: style }).styles, onMouseOver: this.props.onMouseOver.bind(this, true), onMouseOut: this.props.onMouseOver.bind(this, false), onClick: this.props.onClick.bind(this) },
                cells
            );
        }
    }]);

    return TableRow;
}(React.Component);

exports.default = TableRow;

},{"../utils/StandardLib":41,"lodash":"lodash","react":"react","react-vendor-prefix":"react-vendor-prefix"}],9:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactDom = require("react-dom");

var ReactDOM = _interopRequireWildcard(_reactDom);

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _reactVendorPrefix = require("react-vendor-prefix");

var VendorPrefix = _interopRequireWildcard(_reactVendorPrefix);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _Resizer = require("./Resizer");

var _Resizer2 = _interopRequireDefault(_Resizer);

var _ResizerOverlay = require("./ResizerOverlay");

var _ResizerOverlay2 = _interopRequireDefault(_ResizerOverlay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts" />
/// <reference path="../../typings/react/react-dom.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>

var RESIZEROVERLAY = "resizer";
var HORIZONTAL = "horizontal";

var Layout = function (_React$Component) {
    _inherits(Layout, _React$Component);

    function Layout(props, state) {
        _classCallCheck(this, Layout);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Layout).call(this, props, state));

        _this.panelDragging = false;
        var ps = props.state || {};
        _this.state = { id: ps.id, direction: ps.direction, children: ps.children, flex: ps.flex };
        _this.minSize = 16;
        _this.dragging = false;
        return _this;
    }

    _createClass(Layout, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            document.addEventListener("mouseup", this.boundMouseUp = this.onMouseUp.bind(this));
            document.addEventListener("mousedown", this.boundMouseDown = this.onMouseDown.bind(this));
            document.addEventListener("mousemove", this.boundMouseMove = this.onMouseMove.bind(this));
        }
    }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            this.setState(_StandardLib2.default.includeMissingPropertyPlaceholders(this.state, nextProps.state));
        }
    }, {
        key: "compoenentWillUnmount",
        value: function compoenentWillUnmount() {
            document.removeEventListener("mousedown", this.boundMouseDown);
            document.removeEventListener("mouseup", this.boundMouseUp);
            document.removeEventListener("mouseMove", this.boundMouseMove);
        }
    }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
            return !_.isEqual(this.state, nextState) || !_.isEqual(this.state, nextProps.state);
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (this.props.onStateChange && this.state) {
                this.props.onStateChange(this.state);
            }
        }
    }, {
        key: "getDOMNodeFromId",
        value: function getDOMNodeFromId(id) {
            var component = this.getComponentFromId(id);
            if (component) {
                return component.element;
            }
        }
    }, {
        key: "getComponentFromId",
        value: function getComponentFromId(id) {
            if (this.state.id && _.isEqual(this.state.id, id)) {
                return this;
            } else {
                for (var i = 0; i < this.childNames.length; i++) {
                    var component = this.refs[this.childNames[i]].getComponentFromId(id);
                    if (component) {
                        return component;
                    }
                }
            }
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown(event) {
            var _this2 = this;

            this.resizerNames.forEach(function (resizerName) {
                var resizer = _this2.refs[resizerName];
                if (resizer && resizer.state && resizer.state.active) {
                    var overlayRange = _this2.getResizerRange(resizer);
                    overlayRange[0] += _this2.minSize;
                    overlayRange[1] -= _this2.minSize;
                    _this2.refs[RESIZEROVERLAY].setState({
                        active: true,
                        range: overlayRange
                    });
                }
            });
        }
    }, {
        key: "onMouseMove",
        value: function onMouseMove(event) {}
    }, {
        key: "getResizerRange",
        value: function getResizerRange(resizer) {
            var direction = resizer.props.direction;
            var pane1 = this.refs[resizer.props.pane1];
            var pane2 = this.refs[resizer.props.pane2];
            var element1 = ReactDOM.findDOMNode(pane1);
            var element2 = ReactDOM.findDOMNode(pane2);
            var rect = this.element.getBoundingClientRect();
            var pageLeft = window.pageXOffset + rect.left;
            var pageTop = window.pageYOffset + rect.top;
            if (direction === HORIZONTAL) {
                return [element1.offsetLeft + pageLeft, element2.offsetLeft + element2.clientWidth + pageLeft];
            } else {
                return [element1.offsetTop + pageTop, element2.offsetTop + element2.clientHeight + pageTop];
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp(event) {
            var _this3 = this;

            var newState = _.cloneDeep(this.state);
            this.resizerNames.forEach(function (resizerName) {
                var resizer = _this3.refs[resizerName];
                var resizerOverlay = _this3.refs[RESIZEROVERLAY];
                if (resizer && resizer.state && resizer.state.active) {
                    var range = _this3.getResizerRange(resizer);
                    var begin = range[0];
                    var end = range[1];
                    var mousePos = _this3.state.direction === HORIZONTAL ? event.pageX : event.pageY;
                    var size = _this3.state.direction === HORIZONTAL ? _this3.element.clientWidth : _this3.element.clientHeight;
                    mousePos = Math.max(begin + _this3.minSize, Math.min(mousePos, end - _this3.minSize));
                    var ref1 = resizer.props.pane1;
                    var ref2 = resizer.props.pane2;
                    var pane1 = _this3.refs[ref1];
                    var pane2 = _this3.refs[ref2];
                    var index1 = _this3.childNames.indexOf(ref1);
                    var index2 = _this3.childNames.indexOf(ref2);
                    var flex1 = (mousePos - begin) / size;
                    var flex2 = (end - mousePos) / size;
                    newState.children[index1].flex = flex1;
                    newState.children[index2].flex = flex2;
                    pane1.setState({
                        flex: flex1
                    });
                    pane2.setState({
                        flex: flex2
                    });
                    resizer.setState({
                        active: false
                    });
                    resizerOverlay.setState({
                        active: false
                    });
                    _this3.setState(newState);
                }
            });
            this.panelDragging = false;
        }
    }, {
        key: "handleStateChange",
        value: function handleStateChange(childRef, newState) {
            var stateCopy = _.cloneDeep(this.state);
            var index = this.childNames.indexOf(childRef);
            stateCopy.children[index] = newState;
            this.setState(stateCopy);
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            this.childNames = [];
            this.resizerNames = [];
            var style = {
                display: "flex",
                flex: this.state.flex,
                position: "relative",
                outline: "none",
                overflow: "hidden",
                userSelect: "none",
                flexDirection: this.state.direction === HORIZONTAL ? "row" : "column"
            };
            if (this.state.direction === HORIZONTAL) {
                style.height = "100%";
            } else {
                style.width = "100%";
            }
            if (this.state.children && this.state.children.length > 0) {
                var newChildren = new Array(this.state.children.length * 2 - 1);
                this.state.children.forEach(function (childState, i) {
                    var ref = "child" + i;
                    _this4.childNames[i] = ref;
                    newChildren[i * 2] = React.createElement(Layout, { onStateChange: _this4.handleStateChange.bind(_this4, ref), ref: ref, state: childState, key: i * 2 });
                });
                var i;
                for (i = 1; i < newChildren.length - 1; i += 2) {
                    var resizerName = "resizer" + i / 2;
                    this.resizerNames.push(resizerName);
                    var resizer = React.createElement(_Resizer2.default, { ref: resizerName, key: i, direction: this.state.direction, pane1: newChildren[i - 1].ref, pane2: newChildren[i + 1].ref });
                    newChildren[i] = resizer;
                }
            }
            var prefixed = VendorPrefix.prefix({ styles: style });
            return React.createElement(
                "div",
                { ref: function ref(elt) {
                        _this4.element = elt;
                    }, style: prefixed.styles },
                newChildren,
                React.createElement(_ResizerOverlay2.default, { ref: RESIZEROVERLAY, key: RESIZEROVERLAY, direction: this.state.direction })
            );
        }
    }]);

    return Layout;
}(React.Component);

exports.default = Layout;

},{"../utils/StandardLib":41,"./Resizer":10,"./ResizerOverlay":11,"lodash":"lodash","react":"react","react-dom":"react-dom","react-vendor-prefix":"react-vendor-prefix"}],10:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactVendorPrefix = require("react-vendor-prefix");

var VendorPrefix = _interopRequireWildcard(_reactVendorPrefix);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts" />
/// <reference path="../../typings/react/react-dom.d.ts"/>
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>

var HORIZONTAL = "horizontal";
var resizerStyle = {};
resizerStyle.basic = {
    background: "#000",
    opacity: .1,
    zIndex: 1,
    boxSizing: "border-box",
    backgroundClip: "padding"
};
resizerStyle.vertical = {
    height: "4px",
    cursor: "row-resize",
    width: "100%"
};
resizerStyle.horizontal = {
    width: "4px",
    cursor: "col-resize",
    height: "100%"
};

var Resizer = function (_React$Component) {
    _inherits(Resizer, _React$Component);

    function Resizer(props) {
        _classCallCheck(this, Resizer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Resizer).call(this, props));

        _this.state = {
            active: false
        };
        return _this;
    }

    _createClass(Resizer, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.element.addEventListener("mousedown", this.boundMouseDown = this.onMouseDown.bind(this));
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.element.removeEventListener("mousedown", this.boundMouseDown);
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown() {
            this.setState({
                active: true
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var direction = this.props.direction;
            var style = resizerStyle.basic;
            _StandardLib2.default.merge(style, resizerStyle[direction]);
            var prefixed = VendorPrefix.prefix({ styles: style });
            return React.createElement("span", { ref: function ref(elt) {
                    _this2.element = elt;
                }, style: prefixed.styles });
        }
    }]);

    return Resizer;
}(React.Component);

exports.default = Resizer;

},{"../utils/StandardLib":41,"react":"react","react-vendor-prefix":"react-vendor-prefix"}],11:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactVendorPrefix = require("react-vendor-prefix");

var VendorPrefix = _interopRequireWildcard(_reactVendorPrefix);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts" />
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>
/// <reference path="../../typings/react/react-dom.d.ts"/>

var HORIZONTAL = "horizontal";
var mouseevents = ["mouseover", "mouseout", "mouseleave"];
var resizerStyle = {};
resizerStyle.basic = {
    background: "#000",
    opacity: .3,
    zIndex: 1,
    boxSizing: "border-box",
    backgroundClip: "padding",
    position: "absolute"
};
resizerStyle.vertical = {
    height: "4px",
    cursor: "row-resize",
    width: "100%"
};
resizerStyle.horizontal = {
    width: "4px",
    cursor: "col-resize",
    height: "100%"
};
;

var ResizerOverlay = function (_React$Component) {
    _inherits(ResizerOverlay, _React$Component);

    function ResizerOverlay(props) {
        _classCallCheck(this, ResizerOverlay);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ResizerOverlay).call(this, props));

        _this.state = {
            active: false,
            range: [],
            x: NaN,
            y: NaN
        };
        return _this;
    }

    _createClass(ResizerOverlay, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            document.addEventListener("mousemove", this._onMouseMove = this.onMouseMove.bind(this), true);
            mouseevents.forEach(function (mouseevent) {
                return document.addEventListener(mouseevent, _this2._stopEventPropagation = _this2.stopEventPropagation.bind(_this2), true);
            });
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            var _this3 = this;

            document.removeEventListener("mousemove", this._onMouseMove);
            mouseevents.forEach(function (mouseevent) {
                return document.removeEventListener(mouseevent, _this3._stopEventPropagation);
            });
        }
    }, {
        key: "stopEventPropagation",
        value: function stopEventPropagation(event) {
            if (this.state.active) {
                event.stopImmediatePropagation();
            }
        }
    }, {
        key: "onMouseMove",
        value: function onMouseMove(event) {
            if (this.state.active) {
                event.stopImmediatePropagation();
                var container = this.element.parentNode;
                var rect = container.getBoundingClientRect();
                var left = window.pageXOffset + rect.left;
                var top = window.pageYOffset + rect.top;
                var mousePos = this.props.direction === HORIZONTAL ? event.pageX : event.pageY;
                mousePos = Math.max(this.state.range[0], Math.min(mousePos, this.state.range[1]));
                if (this.props.direction === HORIZONTAL) {
                    this.setState({
                        x: mousePos - left,
                        y: NaN
                    });
                } else {
                    this.setState({
                        x: NaN,
                        y: mousePos - top
                    });
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            var direction = this.props.direction;
            var style = {};
            _StandardLib2.default.merge(style, resizerStyle.basic);
            _StandardLib2.default.merge(style, resizerStyle[direction]);
            if (this.state.active) {
                style.visibility = "visible";
                style.left = this.state.x;
                style.top = this.state.y;
            } else {
                style.visibility = "hidden";
            }
            var prefixed = VendorPrefix.prefix({ styles: style });
            return React.createElement("span", { ref: function ref(elt) {
                    _this4.element = elt;
                }, style: prefixed.styles });
        }
    }]);

    return ResizerOverlay;
}(React.Component);

exports.default = ResizerOverlay;

},{"../utils/StandardLib":41,"react":"react","react-vendor-prefix":"react-vendor-prefix"}],12:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>

var HBox = function (_React$Component) {
    _inherits(HBox, _React$Component);

    function HBox(props, state) {
        _classCallCheck(this, HBox);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(HBox).call(this, props));
    }

    _createClass(HBox, [{
        key: "render",
        value: function render() {
            var style = this.props.style || {};
            var otherProps = {};
            for (var key in this.props) {
                if (key !== "style") {
                    otherProps[key] = this.props[key];
                }
            }
            style = style || {};
            style.display = "flex";
            style.flexDirection = "row";
            return React.createElement(
                "div",
                _extends({ style: style }, otherProps),
                this.props.children
            );
        }
    }]);

    return HBox;
}(React.Component);

exports.default = HBox;

},{"react":"react"}],13:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>

var VBox = function (_React$Component) {
    _inherits(VBox, _React$Component);

    function VBox(props, state) {
        _classCallCheck(this, VBox);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(VBox).call(this, props));
    }

    _createClass(VBox, [{
        key: "render",
        value: function render() {
            var style = this.props.style || {};
            var otherProps = {};
            for (var key in this.props) {
                if (key !== "style") {
                    otherProps[key] = this.props[key];
                }
            }
            style.display = "flex";
            style.flexDirection = "column";
            return React.createElement(
                "div",
                _extends({ style: style }, otherProps),
                this.props.children
            );
        }
    }]);

    return VBox;
}(React.Component);

exports.default = VBox;

},{"react":"react"}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _HBox = require("./HBox");

var _HBox2 = _interopRequireDefault(_HBox);

var _VBox = require("./VBox");

var _VBox2 = _interopRequireDefault(_VBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    HBox: _HBox2.default,
    VBox: _VBox2.default
};

},{"./HBox":12,"./VBox":13}],15:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/react/react-dom.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
/// <reference path="../../typings/c3/c3.d.ts"/>

var AbstractC3Tool = function (_React$Component) {
    _inherits(AbstractC3Tool, _React$Component);

    function AbstractC3Tool(props) {
        _classCallCheck(this, AbstractC3Tool);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AbstractC3Tool).call(this, props));

        _this.toolPath = props.toolPath;
        _this.paths = {};
        return _this;
    }

    _createClass(AbstractC3Tool, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (this.c3Config.size.width != this.props.style.width || this.c3Config.size.height != this.props.style.height) {
                this.c3Config.size = { width: this.props.style.width, height: this.props.style.height };
                this.chart.resize({ width: this.props.style.width, height: this.props.style.height });
            }
        }
        // this function accepts an arry of path configurations
        // a path config is an object with a path object name, the weave path and an
        // optional callback or array of callbacks

    }, {
        key: "initializePaths",
        value: function initializePaths(properties) {
            var _this2 = this;

            properties.forEach(function (pathConf) {
                _this2.paths[pathConf.name] = pathConf.path;
                if (pathConf.callbacks) {
                    var callbacks = Array.isArray(pathConf.callbacks) ? pathConf.callbacks : [pathConf.callbacks];
                    callbacks.forEach(function (callback) {
                        _this2.paths[pathConf.name].addCallback(_this2, callback, true);
                    });
                }
            });
        }
    }, {
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "customStyle",
        value: function customStyle(array, type, filter, style) {
            var _this3 = this;

            array.forEach(function (index) {
                var filtered = d3.select(_this3.element).selectAll(type).filter(filter);
                if (filtered.length) d3.select(filtered[0][index]).style(style);
            });
        }
    }, {
        key: "customSelectorStyle",
        value: function customSelectorStyle(array, selector, style) {
            array.forEach(function (index) {
                if (selector.length) d3.select(selector[0][index]).style(style);
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            return React.createElement("div", { ref: function ref(c) {
                    _this4.element = c;
                }, style: { width: "100%", height: "100%", maxHeight: "100%" } });
        }
    }, {
        key: "title",
        get: function get() {
            return (this.toolPath.getType('panelTitle') ? this.toolPath.getState('panelTitle') : '') || this.toolPath.getPath().pop();
        }
    }]);

    return AbstractC3Tool;
}(React.Component);

exports.default = AbstractC3Tool;

},{"d3":"d3","react":"react"}],16:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _lodash = require("lodash");

var lodash = _interopRequireWildcard(_lodash);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _WeaveTool = require("../WeaveTool");

var _Layer = require("./OpenLayersMap/Layers/Layer");

var _Layer2 = _interopRequireDefault(_Layer);

var _GeometryLayer = require("./OpenLayersMap/Layers/GeometryLayer");

var _GeometryLayer2 = _interopRequireDefault(_GeometryLayer);

var _TileLayer = require("./OpenLayersMap/Layers/TileLayer");

var _TileLayer2 = _interopRequireDefault(_TileLayer);

var _ImageGlyphLayer = require("./OpenLayersMap/Layers/ImageGlyphLayer");

var _ImageGlyphLayer2 = _interopRequireDefault(_ImageGlyphLayer);

var _ScatterPlotLayer = require("./OpenLayersMap/Layers/ScatterPlotLayer");

var _ScatterPlotLayer2 = _interopRequireDefault(_ScatterPlotLayer);

var _LabelLayer = require("./OpenLayersMap/Layers/LabelLayer");

var _LabelLayer2 = _interopRequireDefault(_LabelLayer);

var _PanCluster = require("./OpenLayersMap/PanCluster");

var _PanCluster2 = _interopRequireDefault(_PanCluster);

var _InteractionModeCluster = require("./OpenLayersMap/InteractionModeCluster");

var _InteractionModeCluster2 = _interopRequireDefault(_InteractionModeCluster);

var _ProbeInteraction = require("./OpenLayersMap/ProbeInteraction");

var _ProbeInteraction2 = _interopRequireDefault(_ProbeInteraction);

var _DragSelection = require("./OpenLayersMap/DragSelection");

var _DragSelection2 = _interopRequireDefault(_DragSelection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../typings/jquery/jquery.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
/// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/react/react-dom.d.ts"/>

var WeaveOpenLayersMap = function (_React$Component) {
    _inherits(WeaveOpenLayersMap, _React$Component);

    function WeaveOpenLayersMap(props) {
        _classCallCheck(this, WeaveOpenLayersMap);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveOpenLayersMap).call(this, props));

        _GeometryLayer2.default;
        _TileLayer2.default;
        _ImageGlyphLayer2.default;
        _ScatterPlotLayer2.default;
        _LabelLayer2.default; /* Forces the inclusion of the layers. */
        _this.layers = new Map();
        _this.toolPath = props.toolPath;
        return _this;
    }

    _createClass(WeaveOpenLayersMap, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            this.map = new ol.Map({
                interactions: ol.interaction.defaults({ dragPan: false }),
                controls: [],
                target: this.element
            });
            /* Setup custom interactions */
            this.interactionModePath = this.toolPath.weave.path("WeaveProperties", "toolInteractions", "defaultDragMode");
            var dragPan = new ol.interaction.DragPan();
            var dragSelect = new _DragSelection2.default();
            var probeInteraction = new _ProbeInteraction2.default(this);
            var dragZoom = new ol.interaction.DragZoom({ condition: ol.events.condition.always });
            this.map.addInteraction(dragPan);
            this.map.addInteraction(dragSelect);
            this.map.addInteraction(probeInteraction);
            this.map.addInteraction(dragZoom);
            this.interactionModePath.addCallback(this, function () {
                var interactionMode = _this2.interactionModePath.getState();
                dragPan.setActive(interactionMode === "pan");
                dragSelect.setActive(interactionMode === "select");
                dragZoom.setActive(interactionMode === "zoom");
            });
            /* Setup custom controls */
            this.zoomButtons = new ol.control.Zoom();
            this.slider = new ol.control.ZoomSlider();
            this.pan = new _PanCluster2.default();
            this.toolPath.push("showZoomControls").addCallback(this, this.onZoomControlToggle, true);
            this.toolPath.push("showMouseModeControls").addCallback(this, this.onMouseModeControlToggle, true);
            this.mouseModeButtons = new _InteractionModeCluster2.default({ interactionModePath: this.interactionModePath });
            this.plotManager = this.toolPath.push("children", "visualization", "plotManager");
            /* Todo replace override[X,Y][Min,Max] with a single overrideZoomBounds element; alternatively,
             * make a set of parameters on zoombounds itself. */
            var _arr = ["Min", "Max"];
            for (var _i = 0; _i < _arr.length; _i++) {
                var extreme = _arr[_i];var _arr2 = ["X", "Y"];

                for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                    var axis = _arr2[_i2];
                    this.plotManager.push("override" + axis + extreme).addCallback(this, this.onViewParametersChanged);
                }
            }this.toolPath.push("projectionSRS").addCallback(this, this.onViewParametersChanged, true);
            this.plottersPath = this.plotManager.push("plotters");
            this.layerSettingsPath = this.plotManager.push("layerSettings");
            this.zoomBoundsPath = this.plotManager.push("zoomBounds");
            this.plotManager.addCallback(this, this.requestDetail, true);
            this.plottersPath.getObject().childListCallbacks.addImmediateCallback(this, this.plottersChanged, true);
            this.zoomBoundsPath.addCallback(this, this.getSessionCenter, true);
        }
    }, {
        key: "onViewParametersChanged",
        value: function onViewParametersChanged() {
            var extent = [];
            var _arr3 = ["Min", "Max"];
            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var extreme = _arr3[_i3];var _arr4 = ["X", "Y"];

                for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                    var axis = _arr4[_i4];
                    extent.push(this.plotManager.push("override" + axis + extreme).getState());
                }
            }if (!lodash.every(extent, Number.isFinite)) {
                extent = undefined;
            }
            var projection = this.toolPath.push("projectionSRS").getState() || "EPSG:3857";
            var view = new ol.View({ projection: projection, extent: extent });
            view.set("extent", extent);
            this.centerCallbackHandle = view.on("change:center", this.setSessionCenter, this);
            this.resolutionCallbackHandle = view.on("change:resolution", this.setSessionZoom, this);
            this.map.setView(view);
            this.getSessionCenter();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            this.map.updateSize();
            var viewport = this.map.getViewport();
            var screenBounds = new weavejs.geom.Bounds2D(0, 0, viewport.clientWidth, viewport.clientHeight);
            this.zoomBoundsPath.getObject().setScreenBounds(screenBounds, true);
        }
    }, {
        key: "updateControlPositions",
        value: function updateControlPositions() {
            if (this.toolPath.push("showZoomControls").getState()) {
                (0, _jquery2.default)(this.element).find(".ol-control.panCluster").css({ top: "0.5em", left: "0.5em" });
                (0, _jquery2.default)(this.element).find(".ol-control.ol-zoom").css({ top: "5.5em", left: "2.075em" });
                (0, _jquery2.default)(this.element).find(".ol-control.ol-zoomslider").css({ top: "9.25em", left: "2.075em" });
                (0, _jquery2.default)(this.element).find(".ol-control.iModeCluster").css({ top: "20.75em", left: "0.6em" });
            } else {
                (0, _jquery2.default)(this.element).find(".ol-control");
            }
        }
    }, {
        key: "onMouseModeControlToggle",
        value: function onMouseModeControlToggle() {
            var showMouseModeControls = this.toolPath.push("showMouseModeControls").getState();
            if (showMouseModeControls) {
                this.map.addControl(this.mouseModeButtons);
            } else {
                this.map.removeControl(this.mouseModeButtons);
            }
            this.updateControlPositions();
        }
    }, {
        key: "onZoomControlToggle",
        value: function onZoomControlToggle() {
            var showZoomControls = this.toolPath.push("showZoomControls").getState();
            if (showZoomControls) {
                this.map.addControl(this.slider);
                this.map.addControl(this.pan);
                this.map.addControl(this.zoomButtons);
            } else {
                this.map.removeControl(this.slider);
                this.map.removeControl(this.pan);
                this.map.removeControl(this.zoomButtons);
            }
            this.updateControlPositions();
        }
    }, {
        key: "setSessionCenter",
        value: function setSessionCenter() {
            var _map$getView$getCente = this.map.getView().getCenter();

            var _map$getView$getCente2 = _slicedToArray(_map$getView$getCente, 2);

            var xCenter = _map$getView$getCente2[0];
            var yCenter = _map$getView$getCente2[1];

            var zoomBounds = this.zoomBoundsPath.getObject();
            var dataBounds = new weavejs.geom.Bounds2D();
            zoomBounds.getDataBounds(dataBounds);
            dataBounds.setXCenter(xCenter);
            dataBounds.setYCenter(yCenter);
            zoomBounds.setDataBounds(dataBounds);
        }
    }, {
        key: "setSessionZoom",
        value: function setSessionZoom() {
            var resolution = this.map.getView().getResolution();
            var zoomBounds = this.zoomBoundsPath.getObject();
            var dataBounds = new weavejs.geom.Bounds2D();
            var screenBounds = new weavejs.geom.Bounds2D();
            zoomBounds.getDataBounds(dataBounds);
            zoomBounds.getScreenBounds(screenBounds);
            dataBounds.setWidth(screenBounds.getWidth() * resolution);
            dataBounds.setHeight(screenBounds.getHeight() * resolution);
            dataBounds.makeSizePositive();
            zoomBounds.setDataBounds(dataBounds);
        }
    }, {
        key: "getSessionCenter",
        value: function getSessionCenter() {
            var _this3 = this;

            var zoomBounds = this.zoomBoundsPath.getObject();
            var dataBounds = new weavejs.geom.Bounds2D();
            zoomBounds.getDataBounds(dataBounds);
            var center = [dataBounds.getXCenter(), dataBounds.getYCenter()];
            var scale = zoomBounds.getXScale();
            this.map.getView().un("change:center", this.setSessionCenter, this);
            this.map.getView().un("change:resolution", this.setSessionZoom, this);
            this.map.getView().setCenter(center);
            this.map.getView().setResolution(1 / scale);
            lodash.defer(function () {
                _this3.map.getView().on("change:center", _this3.setSessionCenter, _this3);
                _this3.map.getView().on("change:resolution", _this3.setSessionZoom, _this3);
            });
        }
    }, {
        key: "requestDetail",
        value: function requestDetail() {
            var zoomBounds = this.zoomBoundsPath.getObject();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Weave.getDescendants(this.toolPath.getObject(), weavejs.data.column.StreamedGeometryColumn)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var sgc = _step.value;

                    //TODO - this doesn't handle a dataBounds of different projection than the streamed geometries are in
                    sgc.requestGeometryDetailForZoomBounds(zoomBounds);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "plottersChanged",
        value: function plottersChanged() {
            var oldNames = Array.from(this.layers.keys());
            var newNames = this.plottersPath.getNames();
            var removedNames = lodash.difference(oldNames, newNames);
            var addedNames = lodash.difference(newNames, oldNames);
            removedNames.forEach(function (name) {
                if (this.layers.get(name)) {
                    this.layers.get(name).dispose();
                }
                this.layers.delete(name);
            }, this);
            addedNames.forEach(function (name) {
                var layer = _Layer2.default.newLayer(this, name);
                this.layers.set(name, layer);
            }, this);
            /* */
            for (var idx in newNames) {
                var layer = this.layers.get(newNames[idx]);
                if (!layer || !layer.olLayer) {
                    continue;
                }
                layer.olLayer.setZIndex(idx + 2);
            }
        }
    }, {
        key: "destroy",
        value: function destroy() {}
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            return React.createElement("div", { ref: function ref(c) {
                    _this4.element = c;
                }, style: { width: "100%", height: "100%" } });
        }
    }]);

    return WeaveOpenLayersMap;
}(React.Component);

exports.default = WeaveOpenLayersMap;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::MapTool", WeaveOpenLayersMap);

},{"../WeaveTool":3,"./OpenLayersMap/DragSelection":17,"./OpenLayersMap/InteractionModeCluster":18,"./OpenLayersMap/Layers/GeometryLayer":20,"./OpenLayersMap/Layers/ImageGlyphLayer":23,"./OpenLayersMap/Layers/LabelLayer":24,"./OpenLayersMap/Layers/Layer":25,"./OpenLayersMap/Layers/ScatterPlotLayer":26,"./OpenLayersMap/Layers/TileLayer":27,"./OpenLayersMap/PanCluster":28,"./OpenLayersMap/ProbeInteraction":29,"jquery":"jquery","lodash":"lodash","openlayers":"openlayers","react":"react"}],17:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _FeatureLayer = require("./Layers/FeatureLayer");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

var _ProbeInteraction = require("./ProbeInteraction");

var _ProbeInteraction2 = _interopRequireDefault(_ProbeInteraction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../typings/jquery/jquery.d.ts"/>
///<reference path="../../../typings/weave/WeavePath.d.ts"/>

var DragSelectionMode;
(function (DragSelectionMode) {
    DragSelectionMode[DragSelectionMode["SUBTRACT"] = -1] = "SUBTRACT";
    DragSelectionMode[DragSelectionMode["SET"] = 0] = "SET";
    DragSelectionMode[DragSelectionMode["ADD"] = 1] = "ADD";
})(DragSelectionMode || (DragSelectionMode = {}));
;

var DragSelection = function (_ol$interaction$DragB) {
    _inherits(DragSelection, _ol$interaction$DragB);

    function DragSelection() {
        _classCallCheck(this, DragSelection);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DragSelection).call(this, { boxEndCondition: function boxEndCondition() {
                return true;
            } }));

        _this.on('boxstart', DragSelection.prototype.onBoxStart, _this);
        _this.on('boxdrag', DragSelection.prototype.onBoxDrag, _this);
        _this.on('boxend', DragSelection.prototype.onBoxEnd, _this);
        return _this;
    }

    _createClass(DragSelection, [{
        key: "onBoxStart",
        value: function onBoxStart(event) {
            if (this.probeInteraction) this.probeInteraction.setActive(false);
            var dragBoxEvent = event;
            var browserEvent = dragBoxEvent.mapBrowserEvent.originalEvent;
            if (browserEvent.ctrlKey && browserEvent.shiftKey) {
                this.mode = DragSelectionMode.SUBTRACT;
            } else if (browserEvent.ctrlKey) {
                this.mode = DragSelectionMode.ADD;
            } else {
                this.mode = DragSelectionMode.SET;
            }
        }
    }, {
        key: "updateSelection",
        value: function updateSelection(extent) {
            var selectedFeatures = new Set();
            var selectFeature = function selectFeature(feature) {
                selectedFeatures.add(feature.getId());
            };
            var mapTool = this.mapTool;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.getMap().getLayers().getArray()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var olLayer = _step.value;

                    var selectable = olLayer.get("selectable");
                    var weaveLayer = olLayer.get("layerObject");
                    if (weaveLayer instanceof _FeatureLayer2.default && selectable) {
                        var keySet = weaveLayer.selectionKeySet;
                        var source = olLayer.getSource();
                        source.forEachFeatureIntersectingExtent(extent, selectFeature);
                        var keys = Array.from(selectedFeatures);
                        switch (this.mode) {
                            case DragSelectionMode.SET:
                                keySet.setKeys(keys);
                                break;
                            case DragSelectionMode.ADD:
                                keySet.addKeys(keys);
                                break;
                            case DragSelectionMode.SUBTRACT:
                                keySet.removeKeys(keys);
                                break;
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: "onBoxDrag",
        value: function onBoxDrag(event) {
            var extent = this.getGeometry().getExtent();
            this.updateSelection(extent);
        }
    }, {
        key: "onBoxEnd",
        value: function onBoxEnd(event) {
            var extent = this.getGeometry().getExtent();
            this.updateSelection(extent);
            if (this.probeInteraction) this.probeInteraction.setActive(true);
        }
    }, {
        key: "probeInteraction",
        get: function get() {
            if (!this._probeInteraction) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = this.getMap().getInteractions().getArray()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var interaction = _step2.value;

                        if (interaction instanceof _ProbeInteraction2.default) {
                            this._probeInteraction = interaction;
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            return this._probeInteraction;
        }
    }]);

    return DragSelection;
}(ol.interaction.DragBox);

exports.default = DragSelection;

},{"./Layers/FeatureLayer":19,"./ProbeInteraction":29,"openlayers":"openlayers"}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../typings/jquery/jquery.d.ts"/>
///<reference path="../../../typings/weave/WeavePath.d.ts"/>

var InteractionModeCluster = function (_ol$control$Control) {
    _inherits(InteractionModeCluster, _ol$control$Control);

    function InteractionModeCluster(optOptions) {
        _classCallCheck(this, InteractionModeCluster);

        var interactionModePath = optOptions.interactionModePath;
        var options = optOptions || {};
        var buttonTable = (0, _jquery2.default)("\n\t\t\t<table class=\"ol-unselectable ol-control iModeCluster\">\n\t\t\t\t<tr style=\"font-size: 80%\">\n\t\t\t\t\t<td><button class=\"iModeCluster pan fa fa-hand-grab-o\"></button></td>\n\t\t\t\t\t<td><button class=\"iModeCluster select fa fa-mouse-pointer\"></button></td>\n\t\t\t\t\t<td><button class=\"iModeCluster zoom fa fa-search-plus\"></button></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t");
        buttonTable.find("button.iModeCluster.pan").click(function () {
            return interactionModePath.state("pan");
        });
        buttonTable.find("button.iModeCluster.select").click(function () {
            return interactionModePath.state("select");
        });
        buttonTable.find("button.iModeCluster.zoom").click(function () {
            return interactionModePath.state("zoom");
        });

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(InteractionModeCluster).call(this, { element: buttonTable[0], target: options.target }));

        interactionModePath.addCallback(_this, function () {
            buttonTable.find("button.iModeCluster").removeClass("active");
            buttonTable.find("button.iModeCluster." + interactionModePath.getState()).addClass("active");
        }, true);
        return _this;
    }

    return InteractionModeCluster;
}(ol.control.Control);

exports.default = InteractionModeCluster;

},{"jquery":"jquery","openlayers":"openlayers"}],19:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FeatureLayer = undefined;

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _lodash = require("lodash");

var lodash = _interopRequireWildcard(_lodash);

var _Layer2 = require("./Layer");

var _Layer3 = _interopRequireDefault(_Layer2);

var _StandardLib = require("../../../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var FeatureLayer = exports.FeatureLayer = function (_Layer) {
    _inherits(FeatureLayer, _Layer);

    function FeatureLayer(parent, layerName) {
        _classCallCheck(this, FeatureLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FeatureLayer).call(this, parent, layerName));

        _this.updateMetaStyle = _this.updateMetaStyle_unbound.bind(_this);
        _this.debounced_updateMetaStyles = lodash.debounce(_this.updateMetaStyles.bind(_this), 0);
        _this.olLayer = new ol.layer.Vector();
        _this.source = new ol.source.Vector({ wrapX: false });
        /* Every feature that is added should register a handler to automatically recompute the metastyles when the styles change. */
        _this.source.on("addfeature", _this.onFeatureAdd, _this);
        _this.changedItems = new Set();
        _this.probedSet = new Set();
        _this.selectedSet = new Set();
        _this.filteredSet = new Set();
        _this.selectionKeySet = _this.layerPath.selection_keyset;
        _this.probeKeySet = _this.layerPath.probe_keyset;
        _this.filteredKeySet = _this.layerPath.push("filteredKeySet");
        var selectionKeyHandler = _this.updateSetFromKeySet.bind(_this, _this.selectionKeySet, _this.selectedSet);
        var probeKeyHandler = _this.updateSetFromKeySet.bind(_this, _this.probeKeySet, _this.probedSet);
        _this.selectionKeySet.addKeySetCallback(selectionKeyHandler);
        _this.probeKeySet.addKeySetCallback(probeKeyHandler);
        _this.filteredKeySet.addCallback(_this, _this.updateFilteredKeySet, true);
        _this.settingsPath.push("selectable").addCallback(_this, _this.updateMetaStyles);
        return _this;
    }

    _createClass(FeatureLayer, [{
        key: "onFeatureAdd",
        value: function onFeatureAdd(vectorEvent) {
            vectorEvent.feature.on("propertychange", this.onFeaturePropertyChange, this);
        }
    }, {
        key: "onFeaturePropertyChange",
        value: function onFeaturePropertyChange(objectEvent) {
            var propertyName = objectEvent.key;
            if (!lodash.contains(FeatureLayer.Styles, propertyName)) {
                /* The property that changed isn't one of our metaStyle properties, so we don't care. */
                return;
            } else {
                /* The property that changed was a metastyle, and as such the styles should be recomputed */
                this.debounced_updateMetaStyles();
            }
        }
    }, {
        key: "getToolTipColumns",
        value: function getToolTipColumns() {
            return [];
        }
        /* TODO: Move this into WeaveTool */

    }, {
        key: "updateSetFromKeySet",
        value: function updateSetFromKeySet(keySet, set, diff) {
            if (!this.source) return; //HACK
            var wasEmpty = set.size === 0;
            this.changedItems.clear();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = diff.added[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    set.add(key);
                    this.changedItems.add(key);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = diff.removed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var key = _step2.value;

                    set.delete(key);
                    this.changedItems.add(key);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var isEmpty = set.size === 0;
            /* If a set becomes empty or nonempty, we should recompute all the styles. Otherwise, only recompute the styles of the features which changed. */
            if (isEmpty !== wasEmpty) {
                this.updateMetaStyles();
            } else {
                this.changedItems.forEach(function (featureId) {
                    var feature = this.source.getFeatureById(featureId);
                    if (feature) {
                        this.updateMetaStyle(feature);
                    }
                }, this);
            }
        }
    }, {
        key: "updateFilteredKeySet",
        value: function updateFilteredKeySet() {
            if (!this.source) return; //HACK
            var sourceKeys = this.source.getFeatures().map(function (feature) {
                return feature.getId();
            });
            this.filteredSet.clear();
            var filteredKeys = this.filteredKeySet.filterKeys(sourceKeys);
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = filteredKeys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var key = _step3.value;

                    this.filteredSet.add(key);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            this.updateMetaStyles();
        }
    }, {
        key: "updateMetaStyles",
        value: function updateMetaStyles() {
            if (!this.source) return; //HACK
            this.tempSelectable = this.settingsPath.push("selectable").getState();
            this.source.forEachFeature(this.updateMetaStyle, this);
        }
    }, {
        key: "updateMetaStyle_unbound",
        value: function updateMetaStyle_unbound(feature) {
            var id = feature.getId();
            var nullStyle = new ol.style.Style({});
            var unselectedStyle = feature.get("unselectedStyle") || nullStyle;
            var normalStyle = feature.get("normalStyle") || nullStyle;
            var selectedStyle = feature.get("selectedStyle") || nullStyle;
            var probedStyle = feature.get("probedStyle") || nullStyle;
            var zOrder = feature.get("zOrder") || 0;
            var replace = feature.get("replace");
            var newStyle = undefined;
            if (!this.filteredSet.has(id)) {
                feature.setStyle(nullStyle);
                return;
            }
            if (!this.tempSelectable) {
                feature.setStyle(normalStyle);
                return;
            }
            if (!this.selectedSet.has(id) && !this.probedSet.has(id) && this.selectedSet.size > 0) {
                if (replace) {
                    newStyle = unselectedStyle;
                    newStyle.setZIndex(zOrder);
                } else {
                    newStyle = [].concat(unselectedStyle);
                    newStyle[0].setZIndex(zOrder);
                }
            } else {
                newStyle = [].concat(normalStyle);
                newStyle[0].setZIndex(zOrder);
            }
            if (this.selectedSet.has(id)) {
                if (replace) {
                    newStyle = selectedStyle;
                    newStyle.setZIndex(Number.MAX_SAFE_INTEGER - 3);
                } else {
                    newStyle = newStyle.concat(selectedStyle);
                    newStyle[0].setZIndex(Number.MAX_SAFE_INTEGER - 3);
                }
            }
            if (this.probedSet.has(id)) {
                if (replace) {
                    newStyle = probedStyle;
                    newStyle.setZIndex(Number.MAX_SAFE_INTEGER);
                } else {
                    newStyle = newStyle.concat(probedStyle);
                    newStyle[0].setZIndex(Number.MAX_SAFE_INTEGER);
                }
            }
            feature.setStyle(newStyle);
        }
    }], [{
        key: "getToolTipData",
        value: function getToolTipData(key /* IQualifiedKey */) /* Array<IAttributeColumn */{
            var additionalColumns = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

            var columnHashMap = weave.root.getObject("Probed Columns");
            var result = {};
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = columnHashMap.getObjects().concat(additionalColumns)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var child = _step4.value;

                    var title = child.getMetadata("title");
                    var value = child.getValueFromKey(key, String);
                    if (value) {
                        result[title] = value;
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return result;
        }
        /* TODO: Move this into WeaveTool */

    }, {
        key: "getToolTipTitle",
        value: function getToolTipTitle(key /* IQualifiedKey */) {
            var titleHashMap = weave.root.getObject("Probe Header Columns");
            return lodash.map(titleHashMap.getObjects(), function (d) {
                return d.getValueFromKey(key, String);
            }).join(", ");
        }
    }, {
        key: "toColorArray",
        value: function toColorArray(colorString, alpha) {
            var colorArray;
            if (colorString[0] === "#") {
                colorArray = ol.color.asArray(colorString);
            } else {
                colorArray = ol.color.asArray("#" + _StandardLib2.default.decimalToHex(Number(colorString)));
            }
            colorArray = [].concat(colorArray); /* Should not be modified since it is cached in ol.color.asArray */
            if (!colorArray) {
                return null;
            }
            colorArray[3] = Number(alpha);
            return colorArray;
        }
    }, {
        key: "toColorRGBA",
        value: function toColorRGBA(colorString, alpha) {
            var colorArray = FeatureLayer.toColorArray(colorString, alpha);
            return ol.color.asString(colorArray);
        }
    }, {
        key: "olFillFromWeaveFill",
        value: function olFillFromWeaveFill(fill, fade) {
            if (fade === undefined) fade = 1;
            var color = fill.color && FeatureLayer.toColorArray(fill.color, fill.alpha * fade) || [0, 0, 0, 0];
            return new ol.style.Fill({ color: color });
        }
    }, {
        key: "olStrokeFromWeaveStroke",
        value: function olStrokeFromWeaveStroke(stroke, fade) {
            if (fade === undefined) fade = 1;
            var color = stroke.color && FeatureLayer.toColorArray(stroke.color, stroke.alpha * fade) || [0, 0, 0, 1];
            var lineCap = stroke.lineCap === "none" ? "butt" : stroke.lineCap || "round";
            var lineJoin = stroke.lineJoin === null ? "round" : stroke.lineJoin || "round";
            var miterLimit = Number(stroke.miterLimit);
            var width = Number(stroke.weight);
            return new ol.style.Stroke({ color: color, lineCap: lineCap, lineJoin: lineJoin, miterLimit: miterLimit, width: width });
        }
    }, {
        key: "getOlProbedStyle",
        value: function getOlProbedStyle(baseStrokeStyle) {
            var width = baseStrokeStyle.getWidth();
            return [new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: [0, 0, 0, 1],
                    width: width + FeatureLayer.PROBE_HALO_WIDTH + FeatureLayer.PROBE_LINE_WIDTH
                }),
                zIndex: Number.MAX_SAFE_INTEGER - 2
            }), new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: [255, 255, 255, 1],
                    width: width + FeatureLayer.PROBE_HALO_WIDTH
                }),
                zIndex: Number.MAX_SAFE_INTEGER - 1
            })];
        }
    }, {
        key: "getOlSelectionStyle",
        value: function getOlSelectionStyle(baseStrokeStyle) {
            var width = baseStrokeStyle.getWidth();
            var lineCap = baseStrokeStyle.getLineCap();
            var lineJoin = baseStrokeStyle.getLineJoin();
            var miterLimit = baseStrokeStyle.getMiterLimit();
            return [new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: [0, 0, 0, 0.5],
                    width: width + FeatureLayer.SELECT_WIDTH,
                    lineCap: lineCap, lineJoin: lineJoin, miterLimit: miterLimit }),
                zIndex: Number.MAX_SAFE_INTEGER - 4
            })];
        }
    }]);

    return FeatureLayer;
}(_Layer3.default);

FeatureLayer.SELECT_WIDTH = 5;
FeatureLayer.PROBE_HALO_WIDTH = 4;
FeatureLayer.PROBE_LINE_WIDTH = 1;
FeatureLayer.Styles = {
    NORMAL: "normalStyle",
    UNSELECTED: "unselectedStyle",
    SELECTED: "selectedStyle",
    PROBED: "probedStyle"
};
;
;
exports.default = FeatureLayer;

},{"../../../utils/StandardLib":41,"./Layer":25,"lodash":"lodash","openlayers":"openlayers"}],20:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _FeatureLayer2 = require("./FeatureLayer");

var _Layer = require("./Layer");

var _Layer2 = _interopRequireDefault(_Layer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var GeometryLayer = function (_FeatureLayer) {
    _inherits(GeometryLayer, _FeatureLayer);

    function GeometryLayer(parent, layerName) {
        _classCallCheck(this, GeometryLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GeometryLayer).call(this, parent, layerName));

        _this.geoJsonParser = new ol.format.GeoJSON();
        _this.geoColumnPath = _this.layerPath.push("geometryColumn");
        _this.fillStylePath = _this.layerPath.push("fill");
        _this.lineStylePath = _this.layerPath.push("line");
        _this.geoColumnPath.addCallback(_this, _this.updateGeometryData, true);
        _this.projectionPath.addCallback(_this, _this.updateGeometryData, true);
        _this.fillStylePath.addCallback(_this, _this.updateStyleData);
        _this.lineStylePath.addCallback(_this, _this.updateStyleData, true);
        _this.filteredKeySet.getObject().setColumnKeySources([_this.geoColumnPath.getObject("internalDynamicColumn")]);
        return _this;
    }

    _createClass(GeometryLayer, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "updateGeometryData",
        value: function updateGeometryData() {
            var projectionSpec = this.geoColumnPath.getObject("internalDynamicColumn", null).getMetadata('projection');
            var outputProjection = this.projectionPath.getState() || "EPSG:3857";
            var inputProjection = projectionSpec || outputProjection;
            this.source.clear();
            var keys = this.geoColumnPath.push('internalDynamicColumn').getKeys();
            var idc = this.geoColumnPath.getObject("internalDynamicColumn");
            var rawGeometries = weavejs.data.ColumnUtils.getGeoJsonGeometries(idc, idc.keys);
            for (var idx = 0; idx < keys.length; idx++) {
                var id = keys[idx];
                var geometry = this.geoJsonParser.readGeometry(rawGeometries[idx], { dataProjection: inputProjection, featureProjection: outputProjection });
                var feature = new ol.Feature({ geometry: geometry });
                feature.setId(id);
                this.source.addFeature(feature);
            }
            this.updateStyleData();
            this.updateFilteredKeySet();
        }
    }, {
        key: "getToolTipColumns",
        value: function getToolTipColumns() {
            var additionalColumns = new Array();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.fillStylePath.getChildren().concat(this.lineStylePath.getChildren())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var column = _step.value;

                    var internalColumn = weavejs.data.ColumnUtils.hack_findInternalDynamicColumn(column.getObject());
                    if (internalColumn) additionalColumns.push(internalColumn);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return additionalColumns;
        }
    }, {
        key: "updateStyleData",
        value: function updateStyleData() {
            var fillEnabled = this.fillStylePath.push("enable").getState();
            var strokeEnabled = this.lineStylePath.push("enable").getState();
            var styleRecords = this.layerPath.retrieveRecords({
                fill: {
                    color: this.fillStylePath.push("color"),
                    alpha: this.fillStylePath.push("alpha"),
                    imageURL: this.fillStylePath.push("imageURL")
                },
                stroke: {
                    color: this.lineStylePath.push("color"),
                    alpha: this.lineStylePath.push("alpha"),
                    weight: this.lineStylePath.push("weight"),
                    lineCap: this.lineStylePath.push("caps"),
                    lineJoin: this.lineStylePath.push("joints"),
                    miterLimit: this.lineStylePath.push("miterLimit")
                }
            }, this.geoColumnPath.push("internalDynamicColumn"));
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = styleRecords[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var record = _step2.value;

                    var olStroke = _FeatureLayer2.FeatureLayer.olStrokeFromWeaveStroke(record.stroke);
                    var olFill = _FeatureLayer2.FeatureLayer.olFillFromWeaveFill(record.fill);
                    var olStrokeFaded = _FeatureLayer2.FeatureLayer.olStrokeFromWeaveStroke(record.stroke, 0.5);
                    var olFillFaded = _FeatureLayer2.FeatureLayer.olFillFromWeaveFill(record.fill, 0.5);
                    var normalStyle = [new ol.style.Style({
                        fill: fillEnabled ? olFill : undefined,
                        stroke: strokeEnabled ? olStroke : undefined,
                        zIndex: 0
                    })];
                    var unselectedStyle = [new ol.style.Style({
                        fill: fillEnabled ? olFill : undefined,
                        stroke: strokeEnabled ? olStrokeFaded : undefined,
                        zIndex: 0
                    })];
                    var selectedStyle = (strokeEnabled || fillEnabled) && _FeatureLayer2.FeatureLayer.getOlSelectionStyle(olStroke);
                    var probedStyle = (strokeEnabled || fillEnabled) && _FeatureLayer2.FeatureLayer.getOlProbedStyle(olStroke);
                    var feature = this.source.getFeatureById(record.id);
                    if (feature) {
                        var metaStyle = {};
                        metaStyle.normalStyle = normalStyle;
                        metaStyle.unselectedStyle = unselectedStyle;
                        metaStyle.selectedStyle = selectedStyle;
                        metaStyle.probedStyle = probedStyle;
                        feature.setProperties(metaStyle);
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }]);

    return GeometryLayer;
}(_FeatureLayer2.FeatureLayer);

_Layer2.default.registerClass("weave.visualization.plotters::GeometryPlotter", GeometryLayer, [weavejs.api.core.ILinkableObjectWithNewProperties]);
exports.default = GeometryLayer;

},{"./FeatureLayer":19,"./Layer":25,"openlayers":"openlayers"}],21:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _FeatureLayer2 = require("./FeatureLayer");

var _FeatureLayer3 = _interopRequireDefault(_FeatureLayer2);

var _lodash = require("lodash");

var lodash = _interopRequireWildcard(_lodash);

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var GlyphLayer = function (_FeatureLayer) {
    _inherits(GlyphLayer, _FeatureLayer);

    function GlyphLayer(parent, layerName) {
        _classCallCheck(this, GlyphLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GlyphLayer).call(this, parent, layerName));

        _this.projectionPath.addCallback(_this, _this.updateLocations);
        _this.layerPath.push("sourceProjection").addCallback(_this, _this.updateLocations);
        _this.layerPath.push("dataX").addCallback(_this, _this.updateLocations);
        _this.layerPath.push("dataY").addCallback(_this, _this.updateLocations, true);
        _this.filteredKeySet.getObject().setColumnKeySources([_this.layerPath.push("dataX").getObject(), _this.layerPath.push("dataY").getObject()]);
        return _this;
    }

    _createClass(GlyphLayer, [{
        key: "_getFeatureIds",
        value: function _getFeatureIds() {
            return lodash.map(this.source.getFeatures(), function (item) {
                return item.getId();
            });
        }
    }, {
        key: "updateLocations",
        value: function updateLocations() {
            /* Update feature locations */
            var records = this.layerPath.retrieveRecords(["dataX", "dataY"], this.layerPath.push("dataX"));
            var recordIds = lodash.pluck(records, "id");
            var removedIds = lodash.difference(this._getFeatureIds(), recordIds);
            var rawProj = this.layerPath.getState("sourceProjection") || this.layerPath.getObject("dataX").getMetadata("projection") || "EPSG:4326";
            var mapProj = this.projectionPath.getState() || "EPSG:3857";
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = removedIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var id = _step.value;

                    var feature = this.source.getFeatureById(id);
                    this.source.removeFeature(feature);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = records[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var record = _step2.value;

                    var feature = this.source.getFeatureById(record.id);
                    if (!feature) {
                        feature = new ol.Feature({});
                        feature.setId(record.id);
                        this.source.addFeature(feature);
                    }
                    var dataX = undefined,
                        dataY = undefined;
                    dataX = GlyphLayer._toPoint(record.dataX, "xMin", "xMax");
                    dataY = GlyphLayer._toPoint(record.dataY, "yMin", "yMax");
                    var point = new ol.geom.Point([dataX, dataY]);
                    point.transform(rawProj, mapProj);
                    feature.setGeometry(point);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            this.updateFilteredKeySet();
            this.updateStyleData();
        }
    }], [{
        key: "_toPoint",
        value: function _toPoint(datum, field1, field2) {
            if ((typeof datum === "undefined" ? "undefined" : _typeof(datum)) === "object") {
                var firstPoly = datum[0];
                return (firstPoly.bounds[field1] + firstPoly.bounds[field2]) / 2;
            } else {
                return datum;
            }
        }
    }]);

    return GlyphLayer;
}(_FeatureLayer3.default);

exports.default = GlyphLayer;

},{"./FeatureLayer":19,"lodash":"lodash","openlayers":"openlayers"}],22:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Map2D = function () {
    function Map2D() {
        _classCallCheck(this, Map2D);

        this._map = new Map();
    }

    _createClass(Map2D, [{
        key: "get",
        value: function get(firstKey, secondKey) {
            var secondMap = this._map.get(firstKey);
            return secondMap && secondMap.get(secondKey);
        }
    }, {
        key: "set",
        value: function set(firstKey, secondKey, value) {
            var secondMap = this._map.get(firstKey);
            if (!secondMap) {
                secondMap = new Map();
                this._map.set(firstKey, secondMap);
            }
            secondMap.set(secondKey, value);
        }
    }]);

    return Map2D;
}();

var ImageGlyphCache = function () {
    function ImageGlyphCache() {
        _classCallCheck(this, ImageGlyphCache);

        this.baseImageElements = new Map();
        this.canvasMap = new Map2D();
        this.imageMap = new Map2D();
    }

    _createClass(ImageGlyphCache, [{
        key: "requestBaseImageElement",
        value: function requestBaseImageElement(url, callback) {
            var imageElement = this.baseImageElements.get(url);
            if (!imageElement) {
                imageElement = new Image();
                imageElement.src = url;
                this.baseImageElements.set(url, imageElement);
            }
            if (imageElement.complete) {
                callback(imageElement);
            } else {
                (0, _jquery2.default)(imageElement).one("load", function () {
                    return callback(imageElement);
                });
            }
        }
    }, {
        key: "getCachedCanvas",
        value: function getCachedCanvas(url, color) {
            var canvas = this.canvasMap.get(url, color);
            var freshCanvas = false;
            if (!canvas) {
                freshCanvas = true;
                canvas = document.createElement("canvas");
                this.canvasMap.set(url, color, canvas);
            }
            return { canvas: canvas, freshCanvas: freshCanvas };
        }
    }, {
        key: "requestDataUrl",
        value: function requestDataUrl(url, color, callback) {
            var _getCachedCanvas = this.getCachedCanvas(url, color);

            var canvas = _getCachedCanvas.canvas;
            var freshCanvas = _getCachedCanvas.freshCanvas;
            /* If freshCanvas is true, this means that we just created the canvas and haven't rendered to it. Time to do that. */

            if (freshCanvas) {
                this.requestBaseImageElement(url, function (imageElement) {
                    var _ref = [imageElement.naturalHeight, imageElement.naturalWidth];
                    canvas.height = _ref[0];
                    canvas.width = _ref[1];

                    var ctx = canvas.getContext("2d");
                    ctx.fillStyle = color;
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    ctx.globalCompositeOperation = "destination-atop";
                    ctx.drawImage(imageElement, 0, 0);
                    ctx.globalCompositeOperation = "multiply";
                    ctx.drawImage(imageElement, 0, 0);
                    callback(canvas.toDataURL());
                });
            } else {
                callback(canvas.toDataURL());
            }
        }
    }, {
        key: "getImage",
        value: function getImage(url, color) {
            var image = this.imageMap.get(url, color);
            if (!image) {
                image = new Image();
                this.requestDataUrl(url, color, function (dataUrl) {
                    image.src = dataUrl;
                });
            }
            return image;
        }
    }]);

    return ImageGlyphCache;
}();

exports.default = ImageGlyphCache;

},{"jquery":"jquery"}],23:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _GlyphLayer2 = require("./GlyphLayer");

var _GlyphLayer3 = _interopRequireDefault(_GlyphLayer2);

var _FeatureLayer = require("./FeatureLayer");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

var _ImageGlyphCache = require("./ImageGlyphCache");

var _ImageGlyphCache2 = _interopRequireDefault(_ImageGlyphCache);

var _Layer = require("./Layer");

var _Layer2 = _interopRequireDefault(_Layer);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var ImageGlyphLayer = function (_GlyphLayer) {
    _inherits(ImageGlyphLayer, _GlyphLayer);

    function ImageGlyphLayer(parent, layerName) {
        _classCallCheck(this, ImageGlyphLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ImageGlyphLayer).call(this, parent, layerName));

        _this.imageGlyphCache = new _ImageGlyphCache2.default();
        _this.layerPath.push("imageSize").addCallback(_this, _this.updateStyleData);
        _this.layerPath.push("imageURL").addCallback(_this, _this.updateStyleData, true);
        return _this;
    }

    _createClass(ImageGlyphLayer, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "setIconStyle",
        value: function setIconStyle(feature, img, iconSize) {
            var styles = {};
            if (!img.complete || !img.src) {
                (0, _jquery2.default)(img).one("load", this.setIconStyle.bind(this, feature, img, iconSize));
                return;
            }
            var maxDim = Math.max(img.naturalHeight, img.naturalWidth);
            var scale = iconSize / maxDim;
            var imgSize = [img.naturalWidth, img.naturalHeight];
            var _arr = ["normal", "selected", "probed", "unselected"];
            for (var _i = 0; _i < _arr.length; _i++) {
                var stylePrefix = _arr[_i];
                var icon = undefined;
                if (stylePrefix === "probed") {
                    icon = new ol.style.Icon({ img: img, imgSize: imgSize, scale: scale * 2.0 });
                } else {
                    icon = new ol.style.Icon({ img: img, imgSize: imgSize, scale: scale });
                }
                if (stylePrefix === "unselected") {
                    icon.setOpacity(1 / 3);
                }
                styles[stylePrefix + "Style"] = new ol.style.Style({ image: icon });
            }
            styles.replace = true;
            feature.setProperties(styles);
        }
    }, {
        key: "updateStyleData",
        value: function updateStyleData() {
            /* Update feature styles */
            var records = this.layerPath.retrieveRecords(["alpha", "color", "imageURL", "imageSize"], this.layerPath.push("dataX"));
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = records[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var record = _step.value;

                    var feature = this.source.getFeatureById(record.id);
                    if (!feature) {
                        continue;
                    }
                    var imageSize = Number(record.imageSize);
                    var color = _FeatureLayer2.default.toColorRGBA(record.color, record.alpha);
                    if (!record.imageURL) {
                        feature.setStyle(null);
                        continue;
                    }
                    var img = this.imageGlyphCache.getImage(record.imageURL, color);
                    this.setIconStyle(feature, img, imageSize);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);

    return ImageGlyphLayer;
}(_GlyphLayer3.default);

_Layer2.default.registerClass("weave.visualization.plotters::ImageGlyphPlotter", ImageGlyphLayer, [weavejs.api.core.ILinkableObjectWithNewProperties]);
exports.default = ImageGlyphLayer;

},{"./FeatureLayer":19,"./GlyphLayer":21,"./ImageGlyphCache":22,"./Layer":25,"jquery":"jquery","openlayers":"openlayers"}],24:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _FeatureLayer = require("./FeatureLayer");

var _GlyphLayer2 = require("./GlyphLayer");

var _GlyphLayer3 = _interopRequireDefault(_GlyphLayer2);

var _Layer = require("./Layer");

var _Layer2 = _interopRequireDefault(_Layer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var LabelLayer = function (_GlyphLayer) {
    _inherits(LabelLayer, _GlyphLayer);

    function LabelLayer(parent, layerName) {
        _classCallCheck(this, LabelLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LabelLayer).call(this, parent, layerName));

        _this.size = _this.layerPath.getObject("size");
        _this.text = _this.layerPath.getObject("text");
        _this.color = _this.layerPath.getObject("color");
        _this.size.addGroupedCallback(_this, _this.updateStyleData);
        _this.text.addGroupedCallback(_this, _this.updateStyleData);
        _this.color.addGroupedCallback(_this, _this.updateStyleData, true);
        return _this;
    }

    _createClass(LabelLayer, [{
        key: "updateStyleData",
        value: function updateStyleData() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.text.keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    var feature = this.source.getFeatureById(key.toString());
                    if (!feature) {
                        continue;
                    }
                    var text = this.text.getValueFromKey(key, String);
                    var size = this.size.getValueFromKey(key, Number);
                    var color = this.color.getValueFromKey(key, String);
                    var font = size + "px sans-serif";
                    var textColor = _FeatureLayer.FeatureLayer.toColorRGBA(color, 1);
                    var fadedTextColor = _FeatureLayer.FeatureLayer.toColorRGBA(color, 0.5);
                    var selectedStroke = new ol.style.Stroke({
                        color: "rgba(128,128,128,0.75)", width: 3
                    });
                    var probeStroke = new ol.style.Stroke({ color: "white", width: 2 });
                    var normalFill = new ol.style.Fill({ color: textColor });
                    var fadedFill = new ol.style.Fill({ color: fadedTextColor });
                    var normalText = new ol.style.Text({ text: text, font: font, fill: normalFill });
                    var probedText = new ol.style.Text({ text: text, font: font, fill: normalFill, stroke: probeStroke });
                    var selectedText = new ol.style.Text({ text: text, font: font, fill: normalFill, stroke: selectedStroke });
                    var unselectedText = new ol.style.Text({ text: text, font: font, fill: fadedFill });
                    var metaStyle = {};
                    metaStyle.normalStyle = new ol.style.Style({ text: normalText });
                    metaStyle.unselectedStyle = new ol.style.Style({ text: unselectedText });
                    metaStyle.selectedStyle = new ol.style.Style({ text: selectedText });
                    metaStyle.probedStyle = new ol.style.Style({ text: probedText });
                    metaStyle.replace = true;
                    feature.setProperties(metaStyle);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);

    return LabelLayer;
}(_GlyphLayer3.default);

_Layer2.default.registerClass("weave.visualization.plotters::TextGlyphPlotter", LabelLayer, [weavejs.api.core.ILinkableObjectWithNewProperties]);
exports.default = LabelLayer;

},{"./FeatureLayer":19,"./GlyphLayer":21,"./Layer":25,"openlayers":"openlayers"}],25:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lodash = require("lodash");

var lodash = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Layer = function () {
    function Layer(parent, layerName) {
        _classCallCheck(this, Layer);

        this.layerPath = parent.plottersPath.push(layerName);
        this.settingsPath = parent.layerSettingsPath.push(layerName);
        this.projectionPath = parent.toolPath.push("projectionSRS");
        this.parent = parent;
        this.layerName = layerName;
        this._olLayer = null;
        this._layerReadyCallbacks = new Map();
        this.linkProperty(this.settingsPath.push("alpha"), "opacity");
        this.linkProperty(this.settingsPath.push("visible"), "visible");
        this.linkProperty(this.settingsPath.push("selectable"), "selectable");
        /* TODO max and minvisiblescale, map to min/max resolution. */
    }

    _createClass(Layer, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "linkProperty",
        value: function linkProperty(propertyPath, propertyName, inTransform) {
            var _this = this;

            /* change in path modifying propertyName */
            inTransform = inTransform || lodash.identity;
            var callback = function callback() {
                if (_this.olLayer) {
                    _this.olLayer.set(propertyName, inTransform(propertyPath.getState()));
                }
            };
            this._layerReadyCallbacks.set(propertyName, callback);
            propertyPath.addCallback(this, callback, false, false);
        }
    }, {
        key: "dispose",
        value: function dispose() {
            if (this._olLayer != null) {
                this.parent.map.removeLayer(this._olLayer);
            }
        }
    }, {
        key: "source",
        get: function get() {
            return this.olLayer && this.olLayer.getSource();
        },
        set: function set(value) {
            this.olLayer.setSource(value);
        }
        /* Handles initial apply of linked properties, adding/removing from map */

    }, {
        key: "olLayer",
        set: function set(value) {
            this._olLayer = value;
            if (value) {
                this.parent.map.addLayer(value);
                value.set("layerObject", this); /* Need to store this backref */
                if (value) {
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = this._layerReadyCallbacks.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var name = _step.value;

                            this._layerReadyCallbacks.get(name)();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                }
            }
        },
        get: function get() {
            return this._olLayer;
        }
    }], [{
        key: "registerClass",
        value: function registerClass(asClassName, jsClass, interfaces) {
            if (!Layer.layerRegistry) {
                Layer.layerRegistry = new Map();
            }
            Layer.layerRegistry.set(asClassName, jsClass);
        }
    }, {
        key: "newLayer",
        value: function newLayer(parent, layerName) {
            var path = parent.plottersPath.push(layerName);
            var layerType = path.getType();
            var LayerClass = Layer.layerRegistry.get(layerType);
            if (LayerClass) {
                return new LayerClass(parent, layerName);
            }
            return null;
        }
    }]);

    return Layer;
}();

exports.default = Layer;

},{"lodash":"lodash"}],26:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _lodash = require("lodash");

var lodash = _interopRequireWildcard(_lodash);

var _StandardLib = require("../../../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _FeatureLayer = require("./FeatureLayer");

var _GlyphLayer2 = require("./GlyphLayer");

var _GlyphLayer3 = _interopRequireDefault(_GlyphLayer2);

var _Layer = require("./Layer");

var _Layer2 = _interopRequireDefault(_Layer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var ScatterPlotLayer = function (_GlyphLayer) {
    _inherits(ScatterPlotLayer, _GlyphLayer);

    function ScatterPlotLayer(parent, layerName) {
        _classCallCheck(this, ScatterPlotLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ScatterPlotLayer).call(this, parent, layerName));

        _this.sizeBy = _this.layerPath.push("sizeBy").addCallback(_this, _this.updateStyleData, true);
        _this.fillStylePath = _this.layerPath.push("fill").addCallback(_this, _this.updateStyleData);
        _this.lineStylePath = _this.layerPath.push("line").addCallback(_this, _this.updateStyleData);
        _this.maxRadiusPath = _this.layerPath.push("maxScreenRadius").addCallback(_this, _this.updateStyleData);
        _this.minRadiusPath = _this.layerPath.push("minScreenRadius").addCallback(_this, _this.updateStyleData);
        _this.defaultRadiusPath = _this.layerPath.push("defaultScreenRadius").addCallback(_this, _this.updateStyleData, true);
        return _this;
    }

    _createClass(ScatterPlotLayer, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "getToolTipColumns",
        value: function getToolTipColumns() {
            var additionalColumns = new Array();
            var internalColumn = undefined;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.fillStylePath.getChildren().concat(this.lineStylePath.getChildren())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var column = _step.value;

                    internalColumn = weavejs.data.ColumnUtils.hack_findInternalDynamicColumn(column.getObject());
                    if (internalColumn) additionalColumns.push(internalColumn);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            internalColumn = weavejs.data.ColumnUtils.hack_findInternalDynamicColumn(this.sizeBy.getObject());
            if (internalColumn) additionalColumns.push(internalColumn);
            return additionalColumns;
        }
    }, {
        key: "updateStyleData",
        value: function updateStyleData() {
            var fillEnabled = this.fillStylePath.push("enable").getState();
            var strokeEnabled = this.lineStylePath.push("enable").getState();
            var styleRecords = this.layerPath.retrieveRecords({
                fill: {
                    color: this.fillStylePath.push("color"),
                    alpha: this.fillStylePath.push("alpha"),
                    imageURL: this.fillStylePath.push("imageURL")
                },
                stroke: {
                    color: this.lineStylePath.push("color"),
                    alpha: this.lineStylePath.push("alpha"),
                    weight: this.lineStylePath.push("weight"),
                    lineCap: this.lineStylePath.push("caps"),
                    lineJoin: this.lineStylePath.push("joints"),
                    miterLimit: this.lineStylePath.push("miterLimit")
                }
            });
            var styleRecordsIndex = lodash.indexBy(styleRecords, "id");
            var sizeByNumeric = this.layerPath.retrieveRecords({ sizeBy: this.sizeBy }, { dataType: "number" });
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = sizeByNumeric[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var record = _step2.value;

                    var id = record.id;
                    var fullRecord = styleRecordsIndex[id];
                    if (fullRecord) {
                        fullRecord.sizeBy = record.sizeBy;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var sizeBy = lodash.pluck(styleRecords, "sizeBy");
            var sizeByMax = lodash.max(sizeBy);
            var sizeByMin = lodash.min(sizeBy);
            var absMax = Math.max(Math.abs(sizeByMax), Math.abs(sizeByMin));
            var minScreenRadius = this.minRadiusPath.getState();
            var maxScreenRadius = this.maxRadiusPath.getState();
            var defaultScreenRadius = this.defaultRadiusPath.getState();
            styleRecords = lodash.sortByOrder(styleRecords, ["sizeBy", "id"], ["desc", "asc"]);
            var zOrder = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = styleRecords[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var record = _step3.value;

                    var screenRadius = undefined;
                    var normSize = _StandardLib2.default.normalize(Math.abs(record.sizeBy), 0, absMax);
                    if (isNaN(normSize) || record.sizeBy === null) {
                        screenRadius = defaultScreenRadius;
                    } else {
                        screenRadius = minScreenRadius + normSize * (maxScreenRadius - minScreenRadius);
                    }
                    var olStroke = _FeatureLayer.FeatureLayer.olStrokeFromWeaveStroke(record.stroke);
                    var olFill = _FeatureLayer.FeatureLayer.olFillFromWeaveFill(record.fill);
                    var olStrokeFaded = _FeatureLayer.FeatureLayer.olStrokeFromWeaveStroke(record.stroke, 0.5);
                    var olFillFaded = _FeatureLayer.FeatureLayer.olFillFromWeaveFill(record.fill, 0.5);
                    var olSelectionStyle = _FeatureLayer.FeatureLayer.getOlSelectionStyle(olStroke);
                    var olProbedStyle = _FeatureLayer.FeatureLayer.getOlProbedStyle(olStroke);
                    var normalStyle = [new ol.style.Style({
                        image: new ol.style.Circle({
                            fill: fillEnabled ? olFill : undefined, stroke: strokeEnabled ? olStroke : undefined,
                            radius: screenRadius
                        })
                    })];
                    var unselectedStyle = [new ol.style.Style({
                        image: new ol.style.Circle({
                            fill: fillEnabled ? olFillFaded : undefined, stroke: strokeEnabled ? olStrokeFaded : undefined,
                            radius: screenRadius
                        })
                    })];
                    var selectedStyle = (strokeEnabled || fillEnabled) && [new ol.style.Style({
                        image: new ol.style.Circle({
                            stroke: olSelectionStyle[0].getStroke(),
                            radius: screenRadius
                        }),
                        zIndex: olSelectionStyle[0].getZIndex()
                    })];
                    var probedStyle = (strokeEnabled || fillEnabled) && [new ol.style.Style({
                        image: new ol.style.Circle({
                            stroke: olProbedStyle[0].getStroke(),
                            radius: screenRadius
                        }),
                        zIndex: olProbedStyle[0].getZIndex()
                    }), new ol.style.Style({
                        image: new ol.style.Circle({
                            stroke: olProbedStyle[1].getStroke(),
                            radius: screenRadius
                        }),
                        zIndex: olProbedStyle[1].getZIndex()
                    })];
                    var feature = this.source.getFeatureById(record.id);
                    if (feature) {
                        var metaStyle = {};
                        metaStyle.normalStyle = normalStyle;
                        metaStyle.unselectedStyle = unselectedStyle;
                        metaStyle.selectedStyle = selectedStyle;
                        metaStyle.probedStyle = probedStyle;
                        feature.setProperties(metaStyle);
                    }
                    zOrder++;
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    }]);

    return ScatterPlotLayer;
}(_GlyphLayer3.default);

_Layer2.default.registerClass("weave.visualization.plotters::ScatterPlotPlotter", ScatterPlotLayer, [weavejs.api.core.ILinkableObjectWithNewProperties]);
exports.default = ScatterPlotLayer;

},{"../../../utils/StandardLib":41,"./FeatureLayer":19,"./GlyphLayer":21,"./Layer":25,"lodash":"lodash","openlayers":"openlayers"}],27:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _Layer2 = require("./Layer");

var _Layer3 = _interopRequireDefault(_Layer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../../typings/weave/WeavePath.d.ts"/>

var TileLayer = function (_Layer) {
    _inherits(TileLayer, _Layer);

    function TileLayer(parent, layerName) {
        _classCallCheck(this, TileLayer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TileLayer).call(this, parent, layerName));

        _this.olLayer = new ol.layer.Tile();
        _this.servicePath = _this.layerPath.push("service", null);
        _this.oldProviderName = null;
        _this.servicePath.addCallback(_this, _this.updateTileSource, true);
        _this.projectionPath.addCallback(_this, _this.updateValidExtents, true);
        return _this;
    }

    _createClass(TileLayer, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "updateValidExtents",
        value: function updateValidExtents() {
            var proj = ol.proj.get(this.projectionPath.getState() || "EPSG:3857");
            if (proj) this.olLayer.setExtent(proj.getExtent());else console.log('invalid proj -> no extent');
        }
    }, {
        key: "getCustomWMSSource",
        value: function getCustomWMSSource() {
            var customWMSPath = this.servicePath;
            if (customWMSPath.push("wmsURL").getType()) {
                var url = customWMSPath.getState("wmsURL");
                var attributions = customWMSPath.getState("creditInfo");
                var projection = customWMSPath.getState("tileProjectionSRS");
                return new ol.source.XYZ({
                    url: url, attributions: attributions, projection: projection
                });
            }
        }
    }, {
        key: "getModestMapsSource",
        value: function getModestMapsSource() {
            var providerNamePath = this.servicePath.push("providerName");
            if (providerNamePath.getType()) {
                var providerName = providerNamePath.getState();
                if (providerName === this.oldProviderName) {
                    return undefined;
                }
                switch (providerName) {
                    case "Stamen WaterColor":
                        return new ol.source.Stamen({ layer: "watercolor" });
                    case "Stamen Toner":
                        return new ol.source.Stamen({ layer: "toner" });
                    case "Open MapQuest Aerial":
                        return new ol.source.MapQuest({ layer: "sat" });
                    case "Open MapQuest":
                        return new ol.source.MapQuest({ layer: "osm" });
                    case "Open Street Map":
                        return new ol.source.OSM({ wrapX: false });
                    case "Blue Marble Map":
                        return new ol.source.TileWMS({ url: "http://neowms.sci.gsfc.nasa.gov/wms/wms", wrapX: false });
                    default:
                        return null;
                }
            }
        }
    }, {
        key: "updateTileSource",
        value: function updateTileSource() {
            var serviceDriverName = this.servicePath.getType();
            var newLayer = null;
            switch (serviceDriverName) {
                case "weave.services.wms::ModestMapsWMS":
                    newLayer = this.getModestMapsSource();
                    break;
                case "weave.services.wms::CustomWMS":
                    newLayer = this.getCustomWMSSource();
                    break;
                default:
                    newLayer = null;
            }
            if (newLayer !== undefined) {
                this.source = newLayer;
            }
        }
    }]);

    return TileLayer;
}(_Layer3.default);

_Layer3.default.registerClass("weave.visualization.plotters::WMSPlotter", TileLayer, [weavejs.api.core.ILinkableObjectWithNewProperties]);
exports.default = TileLayer;

},{"./Layer":25,"openlayers":"openlayers"}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../typings/jquery/jquery.d.ts"/>
///<reference path="../../../typings/weave/WeavePath.d.ts"/>

var PanCluster = function (_ol$control$Control) {
    _inherits(PanCluster, _ol$control$Control);

    function PanCluster(optOptions) {
        _classCallCheck(this, PanCluster);

        var options = optOptions || {};
        var parent = (0, _jquery2.default)("\n\t\t<div style=\"background-color: rgba(0,0,0,0)\" class=\"ol-unselectable ol-control panCluster\">\n\t\t\t<table style=\"font-size:75%\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td></td><td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster N\">N</button></td><td></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster W\">W</button></td>\n\t\t\t\t\t<td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster X fa fa-arrows-alt\"></button></td>\n\t\t\t\t\t<td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster E\">E</button></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td></td><td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster S\">S</button></td><td></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>");
        var directions = {
            N: [0, 1],
            E: [1, 0],
            S: [0, -1],
            W: [-1, 0],
            X: [null, null]
        };

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PanCluster).call(this, { element: parent[0], target: options.target }));

        var self = _this;
        var pan = function pan(xSign, ySign) {
            var panPercent = 0.3;
            var map = self.getMap();
            var view = map.getView();
            var extent = view.calculateExtent(map.getSize());
            var extentWidth = Math.abs(extent[0] - extent[2]);
            var extentHeight = Math.abs(extent[1] - extent[3]);
            var center = view.getCenter();
            center[0] += extentWidth * xSign * panPercent;
            center[1] += extentHeight * ySign * panPercent;
            view.setCenter(center);
        };
        var zoomExtent = function zoomExtent() {
            var map = self.getMap();
            var view = map.getView();
            var extent = view.get("extent") || view.getProjection().getExtent();
            var size = map.getSize();
            view.fit(extent, size);
        };
        for (var direction in directions) {
            var xSign = directions[direction][0];
            var ySign = directions[direction][1];
            var button = parent.find(".panCluster." + direction);
            if (xSign !== null) {
                button.click(pan.bind(_this, xSign, ySign));
            } else {
                button.click(zoomExtent.bind(_this));
            }
        }
        return _this;
    }

    return PanCluster;
}(ol.control.Control);

exports.default = PanCluster;

},{"jquery":"jquery","openlayers":"openlayers"}],29:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _openlayers = require("openlayers");

var ol = _interopRequireWildcard(_openlayers);

var _FeatureLayer = require("./Layers/FeatureLayer");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../../typings/lodash/lodash.d.ts"/>
///<reference path="../../../typings/openlayers/openlayers.d.ts"/>
///<reference path="../../../typings/jquery/jquery.d.ts"/>
///<reference path="../../../typings/weave/WeavePath.d.ts"/>

var ProbeInteraction = function (_ol$interaction$Point) {
    _inherits(ProbeInteraction, _ol$interaction$Point);

    function ProbeInteraction(tool) {
        _classCallCheck(this, ProbeInteraction);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ProbeInteraction).call(this, { handleMoveEvent: ProbeInteraction.prototype.handleMoveEvent }));

        _this.tool = tool;
        return _this;
    }

    _createClass(ProbeInteraction, [{
        key: "setMap",
        value: function setMap(map) {
            _get(Object.getPrototypeOf(ProbeInteraction.prototype), "setMap", this).call(this, map);
            var element = map.getTargetElement();
            map.getTargetElement().addEventListener('mouseout', this.handleOutEvent.bind(this));
        }
    }, {
        key: "onFeatureAtPixel",
        value: function onFeatureAtPixel(feature, layer) {
            var zIndex = layer.getZIndex();
            if (zIndex > this.topZIndex) {
                var weaveLayerObject = layer.get("layerObject");
                this.topKeySet = weaveLayerObject.probeKeySet && weaveLayerObject.probeKeySet.getObject() || this.topKeySet;
                this.topZIndex = zIndex;
                this.topKeyString = feature.getId().toString();
                this.topLayer = weaveLayerObject;
            }
        }
    }, {
        key: "pixelToKey",
        value: function pixelToKey(pixel) {
            var map = this.getMap();
            this.topKeySet = null;
            this.topZIndex = -Infinity;
            this.topLayer = null;
            this.topKeyString = null;
            var topKey = undefined;
            map.forEachFeatureAtPixel(pixel, this.onFeatureAtPixel, this, ProbeInteraction.layerFilter);
            if (this.topKeyString && this.topKeySet) {
                topKey = weavejs.WeaveAPI.QKeyManager.stringToQKey(this.topKeyString);
                this.topKeySet.replaceKeys([topKey]);
            }
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = map.getLayers().getArray()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var layer = _step.value;

                    if (!ProbeInteraction.layerFilter(layer)) continue;
                    var weaveLayerObject = layer.get("layerObject");
                    var keySet = weaveLayerObject.probeKeySet && weaveLayerObject.probeKeySet.getObject();
                    if (keySet && keySet != this.topKeySet) {
                        keySet.clearKeys();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return topKey;
        }
    }, {
        key: "handleMoveEvent",
        value: function handleMoveEvent(event) {
            var key = this.pixelToKey(event.pixel);
            var toolTipState = {};
            if (key) {
                var browserEvent = event.originalEvent;
                toolTipState.showToolTip = true;
                toolTipState.title = _FeatureLayer2.default.getToolTipTitle(key);
                toolTipState.columnNamesToValue = _FeatureLayer2.default.getToolTipData(key, this.topLayer.getToolTipColumns());
                var _ref = [browserEvent.clientX, browserEvent.clientY];
                toolTipState.x = _ref[0];
                toolTipState.y = _ref[1];
            } else {
                toolTipState.showToolTip = false;
            }
            this.tool.props.toolTip.setState(toolTipState);
        }
    }, {
        key: "handleOutEvent",
        value: function handleOutEvent(event) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = this.getMap().getLayers().getArray()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var layer = _step2.value;

                    if (!ProbeInteraction.layerFilter(layer)) continue;
                    var weaveLayerObject = layer.get("layerObject");
                    var keySet = weaveLayerObject.probeKeySet && weaveLayerObject.probeKeySet.getObject();
                    if (keySet) {
                        keySet.clearKeys();
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            var toolTipState = {};
            toolTipState.showToolTip = false;
            this.tool.props.toolTip.setState(toolTipState);
        }
    }], [{
        key: "layerFilter",
        value: function layerFilter(layer) {
            return layer.get("selectable");
        }
    }]);

    return ProbeInteraction;
}(ol.interaction.Pointer);

exports.default = ProbeInteraction;

},{"./Layers/FeatureLayer":19,"openlayers":"openlayers"}],30:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getTooltipContent = getTooltipContent;

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/weave/WeavePath.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/react/react.d.ts"/>

function getTooltipContent(columnNamesToValue, title, nameFormat, valueFormat, titleFormat, toolTipClass, columnNamesToColor) {
    var _this = this;

    nameFormat = nameFormat || _.identity;
    valueFormat = valueFormat || _.identity;
    titleFormat = titleFormat || _.identity;
    toolTipClass = toolTipClass || "c3-tooltip";
    var template = "";
    var columnNames = Object.keys(columnNamesToValue);
    if (columnNames.length) {
        template += "<table class='" + toolTipClass + "'>" + titleFormat(title ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
        columnNames.forEach(function (columnName) {
            template += "<tr>";
            template += "<td class='name'>";
            if (columnNamesToColor && columnNamesToColor[columnName]) {
                template += "<span style=" + "'background-color': " + _this.state.columnNamesToColor[columnName] + "/>";
            }
            template += "<div style='display':'inline'>" + nameFormat(columnName) + "</div></td>";
            template += "<td class='value'>" + valueFormat(columnNamesToValue[columnName]) + "</td>";
            template += "</tr>";
        });
        template += "</table>";
    }
    return template;
}

var ToolTip = function (_React$Component) {
    _inherits(ToolTip, _React$Component);

    function ToolTip(props) {
        _classCallCheck(this, ToolTip);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolTip).call(this, props));

        _this2.nameFormat = _this2.props.nameFormat || _.identity;
        _this2.valueFormat = _this2.props.valueFormat || _.identity;
        _this2.titleFormat = _this2.props.titleFormat || _.identity;
        _this2.toolTipClass = _this2.props.toolTipClass || "c3-tooltip";
        _this2.tooltipContainerClass = _this2.props.tooltipContainerClass || "c3-tooltip-container";
        _this2.state = {
            x: 0,
            y: 0,
            title: "",
            columnNamesToValue: {},
            columnNamesToColor: {},
            showToolTip: false
        };
        _this2.containerStyle = {
            position: "absolute",
            pointerEvents: "none",
            display: "block"
        };
        return _this2;
    }

    _createClass(ToolTip, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            //this.element = ReactDOM.findDOMNode(this);
        }
    }, {
        key: "getToolTipHtml",
        value: function getToolTipHtml() {
            return this.element.innerHTML;
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            if (!(this.element && this.state.showToolTip)) {
                return React.createElement("div", { ref: function ref(c) {
                        _this3.element = c;
                    } });
            } else {
                var tableRows = [];
                this.containerStyle.display = "block";
                var container = this.element.parentNode;
                var rect = container.getBoundingClientRect();
                var left = window.pageXOffset + rect.left;
                var top = window.pageYOffset + rect.top;
                this.containerStyle.left = this.state.x - left;
                this.containerStyle.top = this.state.y - top;
                var columnNames = Object.keys(this.state.columnNamesToValue);
                if (columnNames.length) {
                    tableRows = columnNames.map(function (columnName) {
                        var colorSpan = _this3.state.columnNamesToColor[columnName] ? React.createElement("span", { style: { backgroundColor: _this3.state.columnNamesToColor[columnName] } }) : null;
                        return React.createElement(
                            "tr",
                            { key: columnName },
                            React.createElement(
                                "td",
                                { className: "name" },
                                colorSpan,
                                React.createElement(
                                    "div",
                                    { style: { display: "inline" } },
                                    _this3.nameFormat(columnName)
                                )
                            ),
                            React.createElement(
                                "td",
                                { className: "value" },
                                _this3.valueFormat(_this3.state.columnNamesToValue[columnName])
                            )
                        );
                    });
                }
                return React.createElement(
                    "div",
                    { style: this.containerStyle, ref: function ref(c) {
                            _this3.element = c;
                        }, className: this.tooltipContainerClass },
                    React.createElement(
                        "table",
                        { className: this.toolTipClass },
                        React.createElement(
                            "tbody",
                            null,
                            React.createElement(
                                "tr",
                                null,
                                React.createElement(
                                    "th",
                                    { colSpan: 2 },
                                    this.state.title ? this.titleFormat(this.state.title) : ""
                                )
                            ),
                            tableRows
                        )
                    )
                );
            }
        }
    }]);

    return ToolTip;
}(React.Component);

exports.default = ToolTip;

},{"lodash":"lodash","react":"react"}],31:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractC3Tool2 = require("./AbstractC3Tool");

var _AbstractC3Tool3 = _interopRequireDefault(_AbstractC3Tool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _c = require("c3");

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../utils/StandardLib.ts"/>
/// <reference path="../../typings/weave/weavejs.d.ts"/>
/// <reference path="../../typings/weave/Weave.d.ts"/>

var WeaveC3Barchart = function (_AbstractC3Tool) {
    _inherits(WeaveC3Barchart, _AbstractC3Tool);

    function WeaveC3Barchart(props) {
        _classCallCheck(this, WeaveC3Barchart);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3Barchart).call(this, props));

        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.yAxisValueToLabel = {};
        _this.xAxisValueToLabel = {};
        _this.c3Config = {
            size: {
                width: _this.props.style.width,
                height: _this.props.style.height
            },
            padding: {
                top: 20,
                bottom: 20
            },
            data: {
                json: [],
                type: "bar",
                xSort: false,
                selection: {
                    enabled: true,
                    multiple: true,
                    draggable: true
                },
                labels: {
                    format: function format(v, id, i, j) {
                        if (_this.showValueLabels) {
                            return v;
                        } else {
                            return "";
                        }
                    }
                },
                order: null,
                color: function color(_color, d) {
                    if (_this.heightColumnNames.length === 1 && d.hasOwnProperty("index")) {
                        // find the corresponding index of numericRecords in stringRecords
                        var id = _this.indexToKey[d.index];
                        var index = _.pluck(_this.stringRecords, "id").indexOf(id);
                        return _this.stringRecords[index] ? _this.stringRecords[index]["color"] : "#C0CDD1";
                    } else {
                        return _color || "#C0CDD1";
                    }
                },
                onclick: function onclick(d) {
                    var event = _this.chart.internal.d3.event;
                    if (!(event.ctrlKey || event.metaKey) && d && d.hasOwnProperty("index")) {
                        _this.toolPath.selection_keyset.setKeys([_this.indexToKey[d.index]]);
                    }
                },
                onselected: function onselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.selection_keyset.addKeys([_this.indexToKey[d.index]]);
                    }
                },
                onunselected: function onunselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.selection_keyset.removeKeys([_this.indexToKey[d.index]]);
                    }
                },
                onmouseover: function onmouseover(d) {
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.probe_keyset.setKeys([]);
                        var columnNamesToValue = {};
                        var columnNamesToColor = {};
                        _this.heightColumnNames.forEach(function (column, index) {
                            columnNamesToValue[_this.heightColumnsLabels[index]] = _this.numericRecords[d.index][column];
                            if (_this.heightColumnNames.length > 1) {
                                var color = _StandardLib2.default.interpolateColor(index / (_this.heightColumnNames.length - 1), _this.colorRamp);
                                columnNamesToColor[_this.heightColumnsLabels[index]] = "#" + _StandardLib2.default.decimalToHex(color);
                            }
                        });
                        var title = _this.stringRecords[d.index]["xLabel"];
                        _this.props.toolTip.setState({
                            x: _this.chart.internal.d3.event.pageX,
                            y: _this.chart.internal.d3.event.pageY,
                            showToolTip: true,
                            title: title,
                            columnNamesToValue: columnNamesToValue,
                            columnNamesToColor: columnNamesToColor
                        });
                        _this.toolPath.probe_keyset.setKeys([_this.indexToKey[d.index]]);
                    }
                },
                onmouseout: function onmouseout(d) {
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.probe_keyset.setKeys([]);
                        _this.props.toolTip.setState({
                            showToolTip: false
                        });
                    }
                }
            },
            axis: {
                x: {
                    type: "category",
                    label: {
                        text: "",
                        position: "outer-center"
                    },
                    tick: {
                        rotate: -45,
                        culling: {
                            max: null
                        },
                        multiline: false,
                        format: function format(num) {
                            if (_this.stringRecords && _this.stringRecords[num]) {
                                if (_this.element && _this.props.style.height > 0) {
                                    var labelHeight = _this.props.style.height * 0.2 / Math.cos(45 * (Math.PI / 180));
                                    var labelString = _this.stringRecords[num]["xLabel"];
                                    if (labelString) {
                                        var stringSize = _StandardLib2.default.getTextWidth(labelString, "14pt Helvetica Neue");
                                        var adjustmentCharacters = labelString.length - Math.floor(labelString.length * (labelHeight / stringSize));
                                        return adjustmentCharacters > 0 ? labelString.substring(0, labelString.length - adjustmentCharacters - 3) + "..." : labelString;
                                    } else {
                                        return "";
                                    }
                                } else {
                                    return _this.stringRecords[num]["xLabel"];
                                }
                            } else {
                                return "";
                            }
                        }
                    }
                },
                y: {
                    show: true,
                    label: {
                        text: "",
                        position: "outer-middle"
                    },
                    tick: {
                        fit: false,
                        multiline: false,
                        format: function format(num) {
                            if (_this.yLabelColumnPath && _this.yLabelColumnDataType !== "number") {
                                return _this.yAxisValueToLabel[num] || "";
                            } else if (_this.groupingMode === "percentStack") {
                                return d3.format(".0%")(num);
                            } else {
                                return String(_FormatUtils2.default.defaultNumberFormatting(num));
                            }
                        }
                    }
                },
                y2: {
                    show: false,
                    label: {
                        text: "",
                        position: "outer-middle"
                    },
                    tick: {
                        fit: false,
                        multiline: false,
                        format: function format(num) {
                            if (_this.yLabelColumnPath && _this.yLabelColumnDataType !== "number") {
                                return _this.yAxisValueToLabel[num] || "";
                            } else if (_this.groupingMode === "percentStack") {
                                return d3.format(".0%")(num);
                            } else {
                                return String(_FormatUtils2.default.defaultNumberFormatting(num));
                            }
                        }
                    }
                },
                rotated: false
            },
            tooltip: {
                format: {
                    title: function title(num) {
                        if (_this.stringRecords && _this.stringRecords[num]) {
                            return _this.stringRecords[num]["xLabel"];
                        } else {
                            return "";
                        }
                    },
                    name: function name(_name, ratio, id, index) {
                        var labelIndex = _this.heightColumnNames.indexOf(_name);
                        return _this.heightColumnsLabels ? _this.heightColumnsLabels[labelIndex] : "";
                    }
                },
                show: false
            },
            grid: {
                x: {
                    show: true
                },
                y: {
                    show: true
                }
            },
            bindto: null,
            bar: {
                width: {
                    ratio: 0.8
                }
            },
            legend: {
                show: false
            },
            onrendered: function onrendered() {
                _this.busy = false;
                _this.updateStyle();
            }
        };
        return _this;
    }

    _createClass(WeaveC3Barchart, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "mirrorVertical",
        value: function mirrorVertical() {
            var temp = this.c3Config.data.keys.value[0];
            if (this.c3Config.axis.y.show == true) {
                this.c3Config.axis.y2.show = true;
                this.c3Config.axis.y.show = false;
                this.c3Config.data.axes = _defineProperty({}, temp, 'y2');
                this.c3Config.axis.y2.label = this.c3Config.axis.y.label;
            } else {
                this.c3Config.axis.y.show = true;
                this.c3Config.axis.y2.show = false;
                this.c3Config.data.axes = _defineProperty({}, temp, 'y');
                this.c3Config.axis.y.label = this.c3Config.axis.y2.label;
            }
            this.dataChanged();
            this.generate();
        }
    }, {
        key: "rotateAxes",
        value: function rotateAxes() {
            this.c3Config.axis.rotated = this.paths.horizontalMode.getState();
            this.generate();
            // setTimeout(() => {
            //   this.busy = true;
            //   c3.generate(this.c3Config);
            // }, 10);
        }
    }, {
        key: "axisChanged",
        value: function axisChanged() {
            if (!this.chart || this.busy) return _StandardLib2.default.debounce(this, 'axisChanged');
            var xLabel = this.paths.xAxis.push("overrideAxisName").getState() || "Sorted by " + this.paths.sortColumn.getObject().getMetadata('title');
            var yLabel = this.paths.yAxis.push("overrideAxisName").getState() || (this.heightColumnsLabels ? this.heightColumnsLabels.join(", ") : "");
            if (!this.showXAxisLabel) {
                xLabel = " ";
            }
            if (this.c3Config.axis.y.show) {
                this.chart.axis.labels({
                    x: xLabel,
                    y: yLabel
                });
            } else {
                this.chart.axis.labels({
                    x: xLabel,
                    y2: yLabel
                });
            }
            this.axisLabelsChanged();
            this.c3Config.axis.x.label = { text: xLabel, position: "outer-center" };
            this.c3Config.axis.y.label = { text: yLabel, position: "outer-middle" };
            this.generate();
        }
    }, {
        key: "axisLabelsChanged",
        value: function axisLabelsChanged() {
            var width = this.chart.internal.width;
            var textHeight = _StandardLib2.default.getTextHeight("test", "14pt Helvetica Neue");
            var xLabelsToShow = Math.floor(width / textHeight);
            xLabelsToShow = Math.max(2, xLabelsToShow);
            this.c3Config.axis.x.tick.culling = { max: xLabelsToShow };
        }
    }, {
        key: "handleShowValueLabels",
        value: function handleShowValueLabels() {
            if (!this.chart) return;
            this.showValueLabels = this.paths.showValueLabels.getState();
            this.chart.flush();
        }
    }, {
        key: "updateColumns",
        value: function updateColumns() {
            this.heightColumnNames = [];
            this.heightColumnsLabels = [];
            var lhm = this.paths.heightColumns.getObject();
            var columns = lhm.getObjects();
            var names = lhm.getNames();
            for (var idx in columns) {
                var column = columns[idx];
                var name = names[idx];
                var title = column.getMetadata('title');
                this.heightColumnsLabels.push(title);
                this.heightColumnNames.push(name);
            }
        }
    }, {
        key: "dataChanged",
        value: function dataChanged() {
            var _this2 = this;

            if (!this.chart || this.busy) return _StandardLib2.default.debounce(this, 'dataChanged');
            this.updateColumns();
            var heightColumns = this.paths.heightColumns.getChildren();
            var numericMapping = {
                sort: this.paths.sortColumn,
                xLabel: this.paths.labelColumn
            };
            var stringMapping = {
                sort: this.paths.sortColumn,
                color: this.paths.colorColumn,
                xLabel: this.paths.labelColumn
            };
            heightColumns.forEach(function (column, idx) {
                var name = column.getPath().pop();
                numericMapping[name] = column; // all height columns as numeric value for the chart
                if (idx === 0) {
                    _this2.yLabelColumnPath = column;
                    stringMapping["yLabel"] = column; // only using the first column to label the y axis
                    numericMapping["yLabel"] = column;
                }
            });
            this.yLabelColumnDataType = this.yLabelColumnPath.getObject().getMetadata('dataType');
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            if (!this.numericRecords.length) return;
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.records = _.zip(this.numericRecords, this.stringRecords);
            //this.records = _.sortByOrder(this.records, ["sort", "id"], ['asc', 'asc']);
            this.records = _.sortBy(this.records, function (record) {
                return record[0]["sort"];
            });
            if (this.c3Config.axis.y.show == false) {
                this.records = this.records.reverse();
            }
            if (this.records.length) {
                ;

                var _$unzip = _.unzip(this.records);

                var _$unzip2 = _slicedToArray(_$unzip, 2);

                this.numericRecords = _$unzip2[0];
                this.stringRecords = _$unzip2[1];
            }this.yAxisValueToLabel = {};
            this.xAxisValueToLabel = {};
            this.keyToIndex = {};
            this.indexToKey = {};
            this.numericRecords.forEach(function (record, index) {
                if (record) {
                    _this2.keyToIndex[record["id"]] = index;
                    _this2.indexToKey[index] = record["id"];
                }
            });
            this.stringRecords.forEach(function (record, index) {
                var numericRecord = _this2.numericRecords[index];
                if (numericRecord) {
                    _this2.yAxisValueToLabel[numericRecord["yLabel"]] = record["yLabel"];
                    _this2.xAxisValueToLabel[numericRecord["xLabel"]] = record["xLabel"];
                }
            });
            this.groupingMode = this.paths.groupingMode.getState();
            //var horizontalMode = this.paths.plotter.push("horizontalMode").getState();
            // set axis rotation mode
            //this.chart.load({axes: { rotated: horizontalMode }});
            if (this.groupingMode === "stack") {
                this.chart.groups([this.heightColumnNames]);
            } else if (this.groupingMode === "group") {
                this.chart.groups([]);
            } else if (this.groupingMode === "percentStack") {
                this.chart.groups([this.heightColumnNames]);
            }
            if (this.groupingMode === "percentStack" && this.heightColumnNames.length > 1) {
                // normalize the height columns to be percentages.
                var newValues = this.numericRecords.map(function (record) {
                    var heights;
                    if (record) {
                        heights = _.pick(record, _this2.heightColumnNames);
                        var sum = 0;
                        _.keys(heights).forEach(function (key) {
                            sum += heights[key];
                        });
                        _.keys(heights).forEach(function (key) {
                            heights[key] = heights[key] / sum;
                        });
                    }
                    return heights;
                });
                this.numericRecords = newValues;
            }
            ;
            var keys = { x: "", value: [] };
            // if label column is specified
            if (this.paths.labelColumn.getState().length) {
                keys.x = "xLabel";
            }
            keys.value = this.heightColumnNames;
            var colors = {};
            if (this.heightColumnNames.length > 1) {
                this.colorRamp = this.paths.chartColors.getState();
                this.heightColumnNames.map(function (name, index) {
                    var color = _StandardLib2.default.interpolateColor(index / (_this2.heightColumnNames.length - 1), _this2.colorRamp);
                    colors[name] = "#" + _StandardLib2.default.decimalToHex(color);
                });
            }
            var data = _.cloneDeep(this.c3Config.data);
            data.json = this.numericRecords;
            data.colors = colors;
            data.keys = keys;
            data.unload = true;
            this.c3Config.data = data;
            this.busy = true;
            this.chart.load(data);
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {
            var _this3 = this;

            if (!this.chart || !this.heightColumnNames) return;
            d3.select(this.element).selectAll("path").style("opacity", 1).style("stroke", "black").style("stroke-width", "1px").style("stroke-opacity", 0.5);
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var probedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var probedIndices = probedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            unselectedIndices = _.difference(unselectedIndices, probedIndices);
            this.heightColumnNames.forEach(function (item) {
                var paths = d3.selectAll("g").filter(".c3-shapes-" + item + ".c3-bars").selectAll("path");
                var texts = d3.selectAll("g").filter(".c3-texts-" + item).selectAll("text");
                if (selectedIndices.length) {
                    _this3.customSelectorStyle(unselectedIndices, paths, { opacity: 0.3, "stroke-opacity": 0.0 });
                    _this3.customSelectorStyle(selectedIndices, paths, { opacity: 1.0, "stroke-opacity": 1.0 });
                    _this3.customSelectorStyle(unselectedIndices, texts, { "fill-opacity": 0.3 });
                    _this3.customSelectorStyle(selectedIndices, texts, { "fill-opacity": 1.0 });
                } else if (!probedIndices.length) {
                    _this3.customSelectorStyle(indices, paths, { opacity: 1.0, "stroke-opacity": 0.5 });
                    _this3.customSelectorStyle(indices, texts, { "fill-opacity": 1.0 });
                }
            });
            if (selectedIndices.length) this.chart.select(this.heightColumnNames, selectedIndices, true);else if (!probedIndices.length) this.chart.select(this.heightColumnNames, [], true);
        }
    }, {
        key: "generate",
        value: function generate() {
            this.busy = true;
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }, {
        key: "resize",
        value: function resize(width, height) {
            if (this.paths.labelColumn.getState().length) {
                this.c3Config.axis.x.height = height * 0.2;
            } else {
                this.c3Config.axis.x.height = null;
            }
            this.c3Config.size = { width: width, height: height };
            this.generate();
            if (this.paths.labelColumn.getState().length) {
                //TODO: For now we have no choice by to update axis for label spacing after generate,
                //so we can get new width and then update label spacing appropriately, but this
                //then requires another call to generate. We may want to try and calculate this
                //width ourselves to save the extra generate call in axisChanged()
                this.axisChanged();
            }
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.element.addEventListener("click", this.handleClick.bind(this));
            this.showXAxisLabel = false;
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "heightColumns", path: plotterPath.push("heightColumns"), callbacks: [this.dataChanged, this.axisChanged] }, { name: "labelColumn", path: plotterPath.push("labelColumn"), callbacks: [this.dataChanged, this.axisChanged] }, { name: "sortColumn", path: plotterPath.push("sortColumn"), callbacks: [this.dataChanged, this.axisChanged] }, { name: "colorColumn", path: plotterPath.push("colorColumn"), callbacks: this.dataChanged }, { name: "chartColors", path: plotterPath.push("chartColors"), callbacks: this.dataChanged }, { name: "groupingMode", path: plotterPath.push("groupingMode"), callbacks: this.dataChanged }, { name: "horizontalMode", path: plotterPath.push("horizontalMode"), callbacks: this.rotateAxes }, { name: "showValueLabels", path: plotterPath.push("showValueLabels"), callbacks: this.handleShowValueLabels }, { name: "xAxis", path: this.toolPath.pushPlotter("xAxis"), callbacks: this.axisChanged }, { name: "yAxis", path: this.toolPath.pushPlotter("yAxis"), callbacks: this.axisChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: this.dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: this.updateStyle }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: this.updateStyle }];
            this.initializePaths(mapping);
            this.paths.filteredKeySet.getObject().setColumnKeySources([this.paths.sortColumn.getObject()]);
            this.c3Config.bindto = this.element;
            if (this.paths.labelColumn.getState().length) {
                this.c3Config.axis.x.height = this.props.style.height * 0.2;
            }
            this.generate();
        }
    }]);

    return WeaveC3Barchart;
}(_AbstractC3Tool3.default);

exports.default = WeaveC3Barchart;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::CompoundBarChartTool", WeaveC3Barchart);
//Weave.registerClass("weavejs.tools.CompoundBarChartTool", WeaveC3Barchart, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../utils/FormatUtils":40,"../utils/StandardLib":41,"./AbstractC3Tool":15,"c3":"c3","d3":"d3","lodash":"lodash"}],32:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _WeaveTool = require("../WeaveTool");

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _ui = require("../react-ui/ui");

var _ui2 = _interopRequireDefault(_ui);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _reactVendorPrefix = require("react-vendor-prefix");

var Prefixer = _interopRequireWildcard(_reactVendorPrefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // <reference path="../../typings/d3/d3.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../react-ui/ui.tsx"/>
///<reference path="../../typings/react/react-dom.d.ts"/>

var SHAPE_TYPE_CIRCLE = "circle";
var SHAPE_TYPE_SQUARE = "square";
var SHAPE_TYPE_LINE = "line";

var WeaveC3BarChartLegend = function (_React$Component) {
    _inherits(WeaveC3BarChartLegend, _React$Component);

    function WeaveC3BarChartLegend(props) {
        _classCallCheck(this, WeaveC3BarChartLegend);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3BarChartLegend).call(this, props));

        _this.toolPath = props.toolPath;
        _this.plotterPath = _this.toolPath.pushPlotter("plot");
        _this.colorRampPath = _this.plotterPath.push("chartColors");
        _this.columnsPath = _this.plotterPath.push("columns");
        _this.maxColumnsPath = _this.plotterPath.push("maxColumns");
        _this.filteredKeySet = _this.plotterPath.push("filteredKeySet");
        _this.state = { selected: [], probed: [] };
        _this.spanStyle = { textAlign: "left", verticalAlign: "middle", overflow: "hidden", whiteSpace: "nowrap", textOverflow: "ellipsis", paddingLeft: 5, userSelect: "none" };
        return _this;
    }

    _createClass(WeaveC3BarChartLegend, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "setupCallbacks",
        value: function setupCallbacks() {
            this.maxColumnsPath.addCallback(this, this.forceUpdate);
            this.filteredKeySet.addCallback(this, this.forceUpdate);
            this.plotterPath.push("shapeSize").addCallback(this, this.forceUpdate);
        }
        //getSelectedBins():number[] {
        //
        //}
        //getProbedBins():number[] {
        //
        //}

    }, {
        key: "handleClick",
        value: function handleClick(label, temp) {}
    }, {
        key: "handleProbe",
        value: function handleProbe(bin, mouseOver) {}
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.setupCallbacks();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {}
    }, {
        key: "drawContinuousPlot",
        value: function drawContinuousPlot() {}
    }, {
        key: "selectionKeysChanged",
        value: function selectionKeysChanged() {}
    }, {
        key: "probeKeysChanged",
        value: function probeKeysChanged() {}
    }, {
        key: "visualizationChanged",
        value: function visualizationChanged() {}
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {}
    }, {
        key: "getInteractionStyle",
        value: function getInteractionStyle(bin) {
            var selectedStyle = {
                width: "100%",
                flex: 1.0,
                borderWidth: 0,
                borderColor: "black",
                borderStyle: "solid",
                opacity: 1.0
            };
            return selectedStyle;
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var width = this.props.style.width;
            var height = this.props.style.height;
            var shapeSize = this.plotterPath.getState("shapeSize");
            this.numberOfLabels = this.columnsPath.getState().length;
            var maxColumns = 1; //TODO: This should really be "this.maxColumnsPath.getState();" but only supporting 1 column for now
            var columnFlex = 1.0 / maxColumns;
            var extraBins = this.numberOfLabels % maxColumns == 0 ? 0 : maxColumns - this.numberOfLabels % maxColumns;
            var ramp = this.colorRampPath.getState();
            var labels = this.columnsPath.getState().map(function (column) {
                var columnName = column.objectName;
                return _this2.columnsPath.push(columnName).getObject().getMetadata('title');
            });
            var finalElements = [];
            var prefixerStyle = Prefixer.prefix({ styles: this.spanStyle }).styles;
            for (var j = 0; j < maxColumns; j++) {
                var element = [];
                var elements = [];
                for (var i = 0; i < this.numberOfLabels + extraBins; i++) {
                    if (i % maxColumns == j) {
                        if (i < this.numberOfLabels) {
                            element.push(React.createElement(
                                _ui2.default.HBox,
                                { key: i, style: this.getInteractionStyle(i), onClick: this.handleClick.bind(this, i), onMouseOver: this.handleProbe.bind(this, i, true), onMouseOut: this.handleProbe.bind(this, i, false) },
                                React.createElement(
                                    _ui2.default.HBox,
                                    { style: { width: shapeSize, position: "relative", padding: "0px 0px 0px 0px" } },
                                    React.createElement(
                                        "svg",
                                        { style: { position: "absolute" }, width: "100%", height: "100%" },
                                        React.createElement("rect", { x: 0, y: 10, height: "80%", width: shapeSize, style: { fill: "#" + _StandardLib2.default.decimalToHex(_StandardLib2.default.interpolateColor(_StandardLib2.default.normalize(i, 0, this.numberOfLabels - 1), ramp)), stroke: "black", strokeOpacity: 0.5 } })
                                    )
                                ),
                                React.createElement(
                                    _ui2.default.HBox,
                                    { style: { width: "100%", flex: 0.8, alignItems: "center" } },
                                    React.createElement(
                                        "span",
                                        { style: prefixerStyle },
                                        labels[i]
                                    )
                                )
                            ));
                        } else {
                            element.push(React.createElement(_ui2.default.HBox, { key: i, style: { width: "100%", flex: 1.0 } }));
                        }
                    }
                }
                {
                    this.props.style.width > this.props.style.height * 2 ? elements.push(React.createElement(
                        _ui2.default.HBox,
                        { key: i, style: { width: "100%", flex: columnFlex } },
                        element
                    )) : elements.push(React.createElement(
                        _ui2.default.VBox,
                        { key: i, style: { height: "100%", flex: columnFlex } },
                        element
                    ));
                }
                finalElements[j] = elements;
            }
            return React.createElement(
                "div",
                { style: { width: "100%", height: "100%", padding: "0px 5px 0px 5px" } },
                React.createElement(
                    _ui2.default.VBox,
                    { style: { height: "100%", flex: 1.0, overflow: "hidden" } },
                    React.createElement(
                        _ui2.default.HBox,
                        { style: { width: "100%", flex: 0.1, alignItems: "center" } },
                        React.createElement(
                            "span",
                            { style: prefixerStyle },
                            "Bar color"
                        )
                    ),
                    this.props.style.width > this.props.style.height * 2 ? React.createElement(
                        _ui2.default.HBox,
                        { style: { width: "100%", flex: 0.9 } },
                        " ",
                        finalElements
                    ) : React.createElement(
                        _ui2.default.VBox,
                        { style: { height: "100%", flex: 0.9 } },
                        " ",
                        finalElements
                    )
                )
            );
        }
    }, {
        key: "title",
        get: function get() {
            return (this.toolPath.getType('panelTitle') ? this.toolPath.getState('panelTitle') : '') || this.toolPath.getPath().pop();
        }
    }]);

    return WeaveC3BarChartLegend;
}(React.Component);

exports.default = WeaveC3BarChartLegend;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::BarChartLegendTool", WeaveC3BarChartLegend);
//Weave.registerClass("weavejs.tools.ColorBinLegendTool", WeaveC3ColorLegend, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../react-ui/ui":14,"../utils/StandardLib":41,"react":"react","react-vendor-prefix":"react-vendor-prefix"}],33:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _ui = require("../react-ui/ui");

var _ui2 = _interopRequireDefault(_ui);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _reactVendorPrefix = require("react-vendor-prefix");

var Prefixer = _interopRequireWildcard(_reactVendorPrefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // <reference path="../../typings/d3/d3.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../react-ui/ui.tsx"/>
///<reference path="../../typings/react/react-dom.d.ts"/>

var SHAPE_TYPE_CIRCLE = "circle";
var SHAPE_TYPE_SQUARE = "square";
var SHAPE_TYPE_LINE = "line";

var WeaveC3ColorLegend = function (_React$Component) {
    _inherits(WeaveC3ColorLegend, _React$Component);

    function WeaveC3ColorLegend(props) {
        _classCallCheck(this, WeaveC3ColorLegend);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3ColorLegend).call(this, props));

        _this.toolPath = props.toolPath;
        _this.plotterPath = _this.toolPath.pushPlotter("plot");
        _this.dynamicColorColumnPath = _this.plotterPath.push("dynamicColorColumn", null);
        _this.binningDefinition = _this.dynamicColorColumnPath.push("internalDynamicColumn", null, "binningDefinition", null);
        _this.binnedColumnPath = _this.dynamicColorColumnPath.push("internalDynamicColumn", null);
        _this.maxColumnsPath = _this.plotterPath.push("maxColumns");
        _this.filteredKeySet = _this.plotterPath.push("filteredKeySet");
        _this.selectionKeySet = _this.toolPath.push("selectionKeySet");
        _this.probeKeySet = _this.toolPath.push("probeKeySet");
        _this.state = { selected: [], probed: [] };
        _this.selectedBins = [];
        _this.spanStyle = {
            textAlign: "left",
            verticalAlign: "middle",
            overflow: "hidden",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            paddingLeft: 5,
            userSelect: "none"
        };
        return _this;
    }

    _createClass(WeaveC3ColorLegend, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "setupCallbacks",
        value: function setupCallbacks() {
            this.dynamicColorColumnPath.addCallback(this, this.forceUpdate);
            this.maxColumnsPath.addCallback(this, this.forceUpdate);
            this.filteredKeySet.addCallback(this, this.forceUpdate);
            this.plotterPath.push("shapeSize").addCallback(this, this.forceUpdate);
            this.binnedColumnPath.addCallback(this, this.forceUpdate);
            this.toolPath.selection_keyset.addCallback(this, this.forceUpdate);
            this.toolPath.probe_keyset.addCallback(this, this.forceUpdate);
        }
    }, {
        key: "getBinIndexFromKey",
        value: function getBinIndexFromKey(key) {
            return this.binnedColumnPath.getObject().getValueFromKey(key, Number);
        }
    }, {
        key: "getSelectedBins",
        value: function getSelectedBins() {
            var _this2 = this;

            var keys = this.toolPath.selection_keyset.getKeys();
            var selectedBins = [];
            keys.forEach(function (key) {
                selectedBins.push(_this2.getBinIndexFromKey(key));
            });
            return _.unique(selectedBins);
        }
    }, {
        key: "getProbedBins",
        value: function getProbedBins() {
            var _this3 = this;

            var keys = this.toolPath.probe_keyset.getKeys();
            var probedBins = [];
            keys.forEach(function (key) {
                probedBins.push(_this3.getBinIndexFromKey(key));
            });
            return _.unique(probedBins);
        }
    }, {
        key: "handleClick",
        value: function handleClick(bin, event) {
            var binnedKeys = this.binnedColumnPath.getObject()._binnedKeysArray;
            //setKeys
            if (_.contains(this.selectedBins, bin)) {
                var currentSelection = this.toolPath.selection_keyset.getKeys();
                currentSelection = _.difference(currentSelection, binnedKeys[bin]);
                this.toolPath.selection_keyset.setKeys(currentSelection);
                _.remove(this.selectedBins, function (value) {
                    return value == bin;
                });
            } else {
                if (event.ctrlKey || event.metaKey) {
                    this.toolPath.selection_keyset.addKeys(binnedKeys[bin]);
                    this.selectedBins.push(bin);
                } else {
                    this.toolPath.selection_keyset.setKeys(binnedKeys[bin]);
                    this.selectedBins = [bin];
                }
            }
        }
    }, {
        key: "handleProbe",
        value: function handleProbe(bin, mouseOver) {
            if (mouseOver) {
                var binnedKeys = this.binnedColumnPath.getObject()._binnedKeysArray;
                this.toolPath.probe_keyset.setKeys(binnedKeys[bin]);
            } else {
                this.toolPath.probe_keyset.setKeys([]);
            }
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.setupCallbacks();
        }
    }, {
        key: "getInteractionStyle",
        value: function getInteractionStyle(bin) {
            var probed = this.getProbedBins().indexOf(bin) >= 0;
            var selected = this.getSelectedBins().indexOf(bin) >= 0;
            var borderAlpha;
            if (probed) borderAlpha = 1;else if (selected) borderAlpha = 0.5;else borderAlpha = 0;
            return {
                width: "100%",
                flex: 1.0,
                borderColor: _StandardLib2.default.rgba(0, 0, 0, borderAlpha),
                borderStyle: "solid",
                borderWidth: 1
            };
        }
    }, {
        key: "render",
        value: function render() {
            if (this.numberOfBins) {
                //Binned plot case
                var width = this.props.style.width;
                var height = this.props.style.height;
                var shapeSize = this.plotterPath.getState("shapeSize");
                var shapeType = this.plotterPath.getState("shapeType");
                var maxColumns = 1; //TODO: This should really be "this.maxColumnsPath.getState();" but only supporting 1 column for now
                var columnFlex = 1.0 / maxColumns;
                var extraBins = this.numberOfBins % maxColumns == 0 ? 0 : maxColumns - this.numberOfBins % maxColumns;
                var ramp = this.dynamicColorColumnPath.getState("ramp");
                var yScale = d3.scale.linear().domain([0, this.numberOfBins + 1]).range([0, height]);
                var yMap = function yMap(d) {
                    return yScale(d);
                };
                shapeSize = _.max([1, _.min([shapeSize, height / this.numberOfBins])]);
                var r = shapeSize / 100 * height / this.numberOfBins / 2;
                var bc = this.binnedColumnPath.getObject();
                var textLabelFunction = bc.deriveStringFromNumber.bind(bc);
                var finalElements = [];
                var prefixerStyle = Prefixer.prefix({ styles: this.spanStyle }).styles;
                for (var j = 0; j < maxColumns; j++) {
                    switch (shapeType) {
                        case SHAPE_TYPE_CIRCLE:
                            {
                                var element = [];
                                var elements = [];
                                for (var i = 0; i < this.numberOfBins + extraBins; i++) {
                                    if (i % maxColumns == j) {
                                        if (i < this.numberOfBins) {
                                            element.push(React.createElement(
                                                _ui2.default.HBox,
                                                { key: i, style: this.getInteractionStyle(i), onClick: this.handleClick.bind(this, i), onMouseOver: this.handleProbe.bind(this, i, true), onMouseOut: this.handleProbe.bind(this, i, false) },
                                                React.createElement(
                                                    _ui2.default.HBox,
                                                    { style: { width: "100%", flex: 0.2, minWidth: 10, position: "relative", padding: "0px 0px 0px 0px" } },
                                                    React.createElement(
                                                        "svg",
                                                        { style: { position: "absolute" }, viewBox: "0 0 100 100", width: "100%", height: "100%" },
                                                        React.createElement("circle", { cx: "50%", cy: "50%", r: "45%", style: {
                                                                fill: "#" + _StandardLib2.default.decimalToHex(_StandardLib2.default.interpolateColor(_StandardLib2.default.normalize(i, 0, this.numberOfBins - 1), ramp)),
                                                                stroke: "black",
                                                                strokeOpacity: 0.5
                                                            } })
                                                    )
                                                ),
                                                React.createElement(
                                                    _ui2.default.HBox,
                                                    { style: { width: "100%", flex: 0.8, alignItems: "center" } },
                                                    React.createElement(
                                                        "span",
                                                        { style: prefixerStyle },
                                                        textLabelFunction(i)
                                                    )
                                                )
                                            ));
                                        } else {
                                            element.push(React.createElement(_ui2.default.HBox, { key: i, style: { width: "100%", flex: 1.0 } }));
                                        }
                                    }
                                }
                                if (this.props.style.width > this.props.style.height * 2) {
                                    elements.push(React.createElement(
                                        _ui2.default.HBox,
                                        { key: i, style: { width: "100%", flex: columnFlex } },
                                        " ",
                                        element,
                                        " "
                                    ));
                                } else {
                                    elements.push(React.createElement(
                                        _ui2.default.VBox,
                                        { key: i, style: { height: "100%", flex: columnFlex } },
                                        " ",
                                        element,
                                        " "
                                    ));
                                }
                                finalElements[j] = elements;
                            }
                            break;
                        case SHAPE_TYPE_SQUARE:
                            break;
                        case SHAPE_TYPE_LINE:
                            break;
                    }
                }
                return React.createElement(
                    "div",
                    { style: { width: "100%", height: "100%", padding: "0px 5px 0px 5px" } },
                    React.createElement(
                        _ui2.default.VBox,
                        { style: { height: "100%", flex: 1.0, overflow: "hidden" } },
                        React.createElement(
                            _ui2.default.HBox,
                            { style: { width: "100%", flex: 0.1, alignItems: "center" } },
                            React.createElement(
                                "span",
                                { style: prefixerStyle },
                                this.dynamicColorColumnPath.getObject().getMetadata('title')
                            )
                        ),
                        this.props.style.width > this.props.style.height * 2 ? React.createElement(
                            _ui2.default.HBox,
                            { style: { width: "100%", flex: 0.9 } },
                            " ",
                            finalElements,
                            " "
                        ) : React.createElement(
                            _ui2.default.VBox,
                            { style: { height: "100%", flex: 0.9 } },
                            " ",
                            finalElements,
                            " "
                        )
                    )
                );
            } else {
                //Continuous plot case
                return React.createElement("svg", null);
            }
        }
    }, {
        key: "title",
        get: function get() {
            return (this.toolPath.getType('panelTitle') ? this.toolPath.getState('panelTitle') : '') || this.toolPath.getPath().pop();
        }
    }, {
        key: "numberOfBins",
        get: function get() {
            return this.binnedColumnPath.getObject().numberOfBins;
        }
    }]);

    return WeaveC3ColorLegend;
}(React.Component);

exports.default = WeaveC3ColorLegend;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::ColorBinLegendTool", WeaveC3ColorLegend);
//Weave.registerClass("weavejs.tools.ColorBinLegendTool", WeaveC3ColorLegend, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../react-ui/ui":14,"../utils/StandardLib":41,"d3":"d3","lodash":"lodash","react":"react","react-vendor-prefix":"react-vendor-prefix"}],34:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractC3Tool2 = require("./AbstractC3Tool");

var _AbstractC3Tool3 = _interopRequireDefault(_AbstractC3Tool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _c = require("c3");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>

var WeaveC3Histogram = function (_AbstractC3Tool) {
    _inherits(WeaveC3Histogram, _AbstractC3Tool);

    function WeaveC3Histogram(props) {
        _classCallCheck(this, WeaveC3Histogram);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3Histogram).call(this, props));

        _this.busy = false;
        _this.idToRecord = {};
        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.c3Config = {
            size: {
                width: _this.props.style.width,
                height: _this.props.style.height
            },
            padding: {
                top: 20,
                bottom: 20,
                right: 30
            },
            data: {
                columns: [],
                selection: {
                    enabled: true,
                    multiple: true,
                    draggable: true
                },
                type: "bar",
                color: function color(_color, d) {
                    if (d && d.hasOwnProperty("index")) {
                        var decColor;
                        if (_this.c3Config.axis.y2.show) {
                            //handle case where labels need to be reversed for chart flip
                            var temp = _this.histData.length - 1;
                            decColor = _this.paths.fillStyle.push("color").getObject("internalDynamicColumn", null).getColorFromDataValue(temp - d.index).toString(16);
                        } else {
                            decColor = _this.paths.fillStyle.push("color").getObject("internalDynamicColumn", null).getColorFromDataValue(d.index).toString(16);
                        }
                        return "#" + _StandardLib2.default.decimalToHex(decColor);
                    }
                    return "#C0CDD1";
                },
                onclick: function onclick(d) {
                    var event = _this.chart.internal.d3;
                    if (!(event.ctrlKey || event.metaKey) && d && d.hasOwnProperty("index")) {
                        var selectedIds = _this.paths.binnedColumn.getObject().getKeysFromBinIndex(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.selection_keyset.setKeys(selectedIds);
                    }
                },
                onselected: function onselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        var selectedIds = _this.paths.binnedColumn.getObject().getKeysFromBinIndex(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.selection_keyset.addKeys(selectedIds);
                    }
                },
                onunselected: function onunselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        var unSelectedIds = _this.paths.binnedColumn.getObject().getKeysFromBinIndex(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.selection_keyset.removeKeys(unSelectedIds);
                    }
                },
                onmouseover: function onmouseover(d) {
                    if (d && d.hasOwnProperty("index")) {
                        var selectedIds = _this.paths.binnedColumn.getObject().getKeysFromBinIndex(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.probe_keyset.setKeys(selectedIds);
                    }
                },
                onmouseout: function onmouseout(d) {
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.probe_keyset.setKeys([]);
                    }
                }
            },
            bindto: _this.element,
            legend: {
                show: false
            },
            axis: {
                x: {
                    type: "category",
                    label: {
                        text: "",
                        position: "outer-center"
                    },
                    tick: {
                        rotate: -45,
                        multiline: false,
                        format: function format(num) {
                            if (_this.element && _this.props.style.height > 0) {
                                var labelHeight = _this.props.style.height * 0.2 / Math.cos(45 * (Math.PI / 180));
                                var labelString;
                                if (_this.c3Config.axis.y2.show) {
                                    //handle case where labels need to be reversed
                                    var temp = _this.histData.length - 1;
                                    labelString = _this.paths.binnedColumn.getObject().deriveStringFromNumber(temp - num);
                                } else {
                                    labelString = _this.paths.binnedColumn.getObject().deriveStringFromNumber(num);
                                }
                                if (labelString) {
                                    var stringSize = _StandardLib2.default.getTextWidth(labelString, "14pt Helvetica Neue");
                                    var adjustmentCharacters = labelString.length - Math.floor(labelString.length * (labelHeight / stringSize));
                                    return adjustmentCharacters > 0 ? labelString.substring(0, labelString.length - adjustmentCharacters - 3) + "..." : labelString;
                                } else {
                                    return "";
                                }
                            } else {
                                return _this.paths.binnedColumn.getObject().deriveStringFromNumber(num);
                            }
                        }
                    }
                },
                y: {
                    show: true,
                    label: {
                        text: "",
                        position: "outer-middle"
                    },
                    tick: {
                        fit: false,
                        format: function format(num) {
                            return String(_FormatUtils2.default.defaultNumberFormatting(num));
                        }
                    }
                },
                y2: {
                    show: false,
                    label: {
                        text: "",
                        position: "outer-middle"
                    },
                    tick: {
                        fit: false,
                        format: function format(num) {
                            return String(_FormatUtils2.default.defaultNumberFormatting(num));
                        }
                    }
                },
                rotated: false
            },
            tooltip: {
                format: {
                    title: function title(num) {
                        return _this.paths.binnedColumn.getObject().deriveStringFromNumber(num);
                    },
                    name: function name(_name, ratio, id, index) {
                        return _this.getYAxisLabel();
                    }
                }
            },
            grid: {
                x: {
                    show: true
                },
                y: {
                    show: true
                }
            },
            bar: {
                width: {
                    ratio: 0.95
                }
            },
            onrendered: function onrendered() {
                _this.updateStyle();
            }
        };
        return _this;
    }

    _createClass(WeaveC3Histogram, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "rotateAxes",
        value: function rotateAxes() {
            //this.c3Config.axis.rotated = true;
            //this.forceUpdate();
        }
    }, {
        key: "getYAxisLabel",
        value: function getYAxisLabel() {
            var overrideAxisName = this.paths.yAxis.push("overrideAxisName").getState();
            if (overrideAxisName) {
                return overrideAxisName;
            } else {
                if (this.paths.columnToAggregate.getState().length) {
                    switch (this.paths.aggregationMethod.getState()) {
                        case "count":
                            return "Number of records";
                        case "sum":
                            return "Sum of " + this.paths.columnToAggregate.getObject().getMetadata('title');
                        case "mean":
                            return "Mean of " + this.paths.columnToAggregate.getObject().getMetadata('title');
                    }
                } else {
                    return "Number of records";
                }
            }
        }
    }, {
        key: "mirrorVertical",
        value: function mirrorVertical() {
            var temp = "height";
            if (this.c3Config.axis.y.show == true) {
                this.c3Config.axis.y2.show = true;
                this.c3Config.axis.y.show = false;
                this.c3Config.data.axes = _defineProperty({}, temp, 'y2');
                this.c3Config.axis.y2.label = this.c3Config.axis.y.label;
            } else {
                this.c3Config.axis.y.show = true;
                this.c3Config.axis.y2.show = false;
                this.c3Config.data.axes = _defineProperty({}, temp, 'y');
                this.c3Config.axis.y.label = this.c3Config.axis.y2.label;
            }
            this.chart = (0, _c.generate)(this.c3Config);
            this._dataChanged();
        }
    }, {
        key: "_axisChanged",
        value: function _axisChanged() {
            if (!this.chart) return;
            if (this.busy) return;
            var xLabel = this.paths.xAxis.getState("overrideAxisName") || this.paths.binnedColumn.getObject().getMetadata('title');
            if (!this.showXAxisLabel) {
                xLabel = " ";
            }
            this.chart.axis.labels({
                x: xLabel,
                y: this.getYAxisLabel.bind(this)()
            });
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {
            if (!this.chart) return;
            d3.select(this.element).selectAll("path").style("opacity", 1).style("stroke", "black").style("stroke-width", "1px").style("stroke-opacity", 0.5);
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var probedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedRecords = _.filter(this.numericRecords, function (record) {
                return _.includes(selectedKeys, record["id"]);
            });
            var probedRecords = _.filter(this.numericRecords, function (record) {
                return _.includes(probedKeys, record["id"]);
            });
            var selectedBinIndices = _.pluck(_.uniq(selectedRecords, 'binnedColumn'), 'binnedColumn');
            var probedBinIndices = _.pluck(_.uniq(probedRecords, 'binnedColumn'), 'binnedColumn');
            var binIndices = _.pluck(_.uniq(this.numericRecords, 'binnedColumn'), 'binnedColumn');
            var unselectedBinIndices = _.difference(binIndices, selectedBinIndices);
            unselectedBinIndices = _.difference(unselectedBinIndices, probedBinIndices);
            if (selectedBinIndices.length) {
                this.customStyle(unselectedBinIndices, "path", ".c3-shape", { opacity: 0.3, "stroke-opacity": 0.0 });
                this.customStyle(selectedBinIndices, "path", ".c3-shape", { opacity: 1.0, "stroke-opacity": 1.0 });
            } else if (!probedBinIndices.length) {
                this.customStyle(binIndices, "path", ".c3-shape", { opacity: 1.0, "stroke-opacity": 0.5 });
                this.chart.select(this.heightColumnNames, [], true);
            }
        }
    }, {
        key: "_dataChanged",
        value: function _dataChanged() {
            var _this2 = this;

            if (!this.chart) return;
            if (this.busy) {
                return;
            }
            var numericMapping = {
                binnedColumn: this.paths.binnedColumn,
                columnToAggregate: this.paths.columnToAggregate
            };
            var stringMapping = {
                binnedColumn: this.paths.binnedColumn
            };
            this.binnedColumnDataType = this.paths.binnedColumn.getObject().getMetadata('dataType');
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.idToRecord = {};
            this.keyToIndex = {};
            this.indexToKey = {};
            this.numericRecords.forEach(function (record, index) {
                _this2.idToRecord[record["id"]] = record;
                _this2.keyToIndex[record["id"]] = index;
                _this2.indexToKey[index] = record["id"];
            });
            this.numberOfBins = this.paths.binnedColumn.getObject().numberOfBins;
            this.histData = [];
            // this._columnToAggregatePath.getObject().getInternalColumn();
            var columnToAggregateNameIsDefined = this.paths.columnToAggregate.getState().length > 0;
            for (var iBin = 0; iBin < this.numberOfBins; iBin++) {
                var recordsInBin = _.filter(this.numericRecords, { binnedColumn: iBin });
                if (recordsInBin) {
                    var obj = { height: 0 };
                    if (columnToAggregateNameIsDefined) {
                        obj.height = this.getAggregateValue(recordsInBin, "columnToAggregate", this.paths.aggregationMethod.getState());
                        this.histData.push(obj);
                    } else {
                        obj.height = this.getAggregateValue(recordsInBin, "binnedColumn", "count");
                        this.histData.push(obj);
                    }
                }
            }
            var keys = { value: ["height"] };
            if (this.c3Config.axis.y2.show) {
                this.histData = this.histData.reverse();
            }
            this._axisChanged();
            this.busy = true;
            this.c3Config.data.json = this.histData;
            this.c3Config.data.keys = keys;
            this.chart.load({ json: this.histData, keys: keys, unload: true, done: function done() {
                    _this2.busy = false;
                } });
        }
    }, {
        key: "getAggregateValue",
        value: function getAggregateValue(records, columnToAggregateName, aggregationMethod) {
            var count = 0;
            var sum = 0;
            if (!Array.isArray(records)) {
                return 0;
            }
            records.forEach(function (record) {
                count++;
                sum += record[columnToAggregateName];
            });
            if (aggregationMethod === "mean") {
                return sum / count; // convert sum to mean
            }
            if (aggregationMethod === "count") {
                return count; // use count of finite values
            }
            // sum
            return sum;
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            // TODO avoid calling generate at each componentDidUpdate
            this.c3Config.size = { width: this.props.style.width, height: this.props.style.height };
            if (this.paths.binnedColumn.push("internalDynamicColumn").getState().length) {
                this.c3Config.axis.x.height = this.props.style.height * 0.2;
            } else {
                this.c3Config.axis.x.height = null;
            }
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.element.addEventListener("click", this.handleClick.bind(this));
            this.showXAxisLabel = false;
            var axisChanged = _.debounce(this._axisChanged.bind(this), 100);
            var dataChanged = _.debounce(this._dataChanged.bind(this), 100);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "binnedColumn", path: plotterPath.push("binnedColumn"), callbacks: [dataChanged, axisChanged] }, { name: "columnToAggregate", path: plotterPath.push("columnToAggregate"), callbacks: dataChanged }, { name: "aggregationMethod", path: plotterPath.push("aggregationMethod"), callbacks: [dataChanged, axisChanged] }, { name: "fillStyle", path: plotterPath.push("fillStyle"), callbacks: dataChanged }, { name: "lineStyle", path: plotterPath.push("lineStyle"), callbacks: dataChanged }, { name: "xAxis", path: this.toolPath.pushPlotter("xAxis"), callbacks: axisChanged }, { name: "yAxis", path: this.toolPath.pushPlotter("yAxis"), callbacks: axisChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: this.updateStyle }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: this.updateStyle }];
            this.initializePaths(mapping);
            this.paths.filteredKeySet.getObject().setSingleKeySource(this.paths.fillStyle.getObject('color', 'internalDynamicColumn'));
            this.c3Config.bindto = this.element;
            if (this.paths.binnedColumn.push("internalDynamicColumn").getState().length) {
                this.c3Config.axis.x.height = this.props.style.height * 0.2;
            }
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3Histogram;
}(_AbstractC3Tool3.default);

exports.default = WeaveC3Histogram;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::HistogramTool", WeaveC3Histogram);
//Weave.registerClass("weavejs.tools.HistogramTool", WeaveC3Histogram, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../utils/FormatUtils":40,"../utils/StandardLib":41,"./AbstractC3Tool":15,"c3":"c3","d3":"d3","lodash":"lodash"}],35:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractC3Tool2 = require("./AbstractC3Tool");

var _AbstractC3Tool3 = _interopRequireDefault(_AbstractC3Tool2);

var _WeaveTool = require("../WeaveTool");

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _c = require("c3");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>

var WeaveC3LineChart = function (_AbstractC3Tool) {
    _inherits(WeaveC3LineChart, _AbstractC3Tool);

    function WeaveC3LineChart(props) {
        _classCallCheck(this, WeaveC3LineChart);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3LineChart).call(this, props));

        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.yAxisValueToLabel = {};
        return _this;
    }

    _createClass(WeaveC3LineChart, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "_selectionKeysChanged",
        value: function _selectionKeysChanged() {
            var _this2 = this;

            if (!this.chart) return;
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var probedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });
            var probedIndices = probedKeys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            unselectedIndices = _.difference(unselectedIndices, probedIndices);
            if (selectedIndices.length) {
                //unfocus all circles
                d3.select(this.element).selectAll("circle").filter(".c3-shape").style("opacity", "0.1");
                var filtered = d3.select(this.element).selectAll("g").filter(".c3-chart-line").selectAll("circle").filter(".c3-shape");
                selectedIndices.forEach(function (index) {
                    //custom style for circles on selected lines
                    var circleCount = filtered[index] ? filtered[index].length : 0;
                    var selectedCircles = _.range(0, circleCount);
                    selectedCircles.forEach(function (i) {
                        filtered[index][i].style.opacity = "1.0";
                        filtered[index][i].style.strokeOpacity = "1.0";
                    });
                });
                this.customStyle(unselectedIndices, "path", ".c3-shape.c3-line", { opacity: 0.1 });
                this.customStyle(selectedIndices, "path", ".c3-shape.c3-line", { opacity: 1.0 });
                this.chart.select(["y"], selectedIndices, true);
            } else if (!probedIndices.length) {
                //focus all circles
                d3.select(this.element).selectAll("circle").filter(".c3-shape").style({ opacity: 1.0, "stroke-opacity": 0.0 });
                this.customStyle(indices, "path", ".c3-shape.c3-line", { opacity: 1.0 });
                this.chart.select(["y"], [], true);
            }
        }
    }, {
        key: "_probedKeysChanged",
        value: function _probedKeysChanged() {
            var _this3 = this;

            var selectedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            if (selectedIndices.length) {
                //unfocus all circles
                d3.select(this.element).selectAll("circle").filter(".c3-shape").style({ opacity: 0.1, "stroke-opacity": 0.0 });
                var filtered = d3.select(this.element).selectAll("g").filter(".c3-chart-line").selectAll("circle").filter(".c3-shape");
                selectedIndices.forEach(function (index) {
                    //custom style for circles on probed lines
                    var circleCount = filtered[index] ? filtered[index].length : 0;
                    var selectedCircles = _.range(0, circleCount);
                    selectedCircles.forEach(function (i) {
                        filtered[index][i].style.opacity = "1.0";
                        filtered[index][i].style.strokeOpacity = "0.0";
                    });
                });
                this.customStyle(unselectedIndices, "path", ".c3-shape.c3-line", { opacity: 0.1 });
                this.customStyle(selectedIndices, "path", ".c3-shape.c3-line", { opacity: 1.0 });
                this._selectionKeysChanged();
            } else {
                this._selectionKeysChanged();
            }
        }
    }, {
        key: "_updateStyle",
        value: function _updateStyle() {
            d3.select(this.element).selectAll("circle").style("opacity", 1).style("stroke", "black").style("stroke-opacity", 0.0);
        }
    }, {
        key: "mirrorVertical",
        value: function mirrorVertical() {
            var temp = {};
            if (this.c3Config.axis.y.show == true) {
                this.stringRecords.forEach(function (record) {
                    temp[record["id"].toString()] = 'y2';
                });
                this.c3Config.axis.y2.show = true;
                this.c3Config.axis.y.show = false;
                this.c3Config.data.axes = temp;
                this.c3Config.axis.y2.label = this.c3Config.axis.y.label;
            } else {
                this.stringRecords.forEach(function (record) {
                    temp[record["id"].toString()] = 'y';
                });
                this.c3Config.axis.y.show = true;
                this.c3Config.axis.y2.show = false;
                this.c3Config.data.axes = temp;
                this.c3Config.axis.y.label = this.c3Config.axis.y2.label;
            }
            this.chart = (0, _c.generate)(this.c3Config);
            this._dataChanged();
        }
    }, {
        key: "_dataChanged",
        value: function _dataChanged() {
            var _this4 = this;

            this.columnLabels = [];
            this.columnNames = [];
            var children = this.paths.columns.getChildren();
            this.yLabelColumnPath = children[0];
            var numericMapping = {
                columns: children,
                yLabel: this.yLabelColumnPath
            };
            var stringMapping = {
                columns: children,
                line: {
                    //alpha: this._lineStylePath.push("alpha"),
                    color: this.paths.lineStyle.push("color")
                },
                yLabel: this.yLabelColumnPath
            };
            for (var idx in children) {
                var child = children[idx];
                var title = child.getObject().getMetadata('title');
                var name = child.getPath().pop();
                this.columnLabels.push(title);
                this.columnNames.push(name);
            }
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.records = _.zip(this.numericRecords, this.stringRecords);
            this.records = _.sortBy(this.records, [0, "id"]);
            if (this.records.length) {
                ;

                var _$unzip = _.unzip(this.records);

                var _$unzip2 = _slicedToArray(_$unzip, 2);

                this.numericRecords = _$unzip2[0];
                this.stringRecords = _$unzip2[1];
            }this.keyToIndex = {};
            this.indexToKey = {};
            this.yAxisValueToLabel = {};
            this.numericRecords.forEach(function (record, index) {
                _this4.keyToIndex[record["id"]] = index;
                _this4.indexToKey[index] = record["id"];
            });
            this.stringRecords.forEach(function (record, index) {
                var numericRecord = _this4.numericRecords[index];
                _this4.yAxisValueToLabel[numericRecord["yLabel"]] = record["yLabel"];
            });
            var columns = [];
            columns = this.numericRecords.map(function (record) {
                var tempArr = [];
                tempArr.push(record["id"]);
                _.keys(record["columns"]).forEach(function (key) {
                    tempArr.push(record["columns"][key]);
                });
                return tempArr;
            });
            this.colors = {};
            this.stringRecords.forEach(function (record) {
                _this4.colors[record["id"]] = record["line"]["color"] || "#C0CDD1";
            });
            var chartType = "line";
            if (this.paths.plotter.push("curveType").getState() === "double") {
                chartType = "spline";
            }
            if (this.c3Config.axis.y2.show) {
                columns.forEach(function (column, index, array) {
                    var temp = [];
                    temp.push(column.shift());
                    column = column.reverse();
                    column.forEach(function (item) {
                        temp.push(item);
                    });
                    array[index] = temp;
                });
            }
            this.chart.load({ columns: columns, colors: this.colors, type: chartType, unload: true });
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this5 = this;

            this.element.addEventListener("click", this.handleClick.bind(this));
            var dataChanged = _.debounce(this._dataChanged.bind(this), 100);
            var selectionKeySetChanged = this._selectionKeysChanged.bind(this);
            var probeKeySetChanged = _.debounce(this._probedKeysChanged.bind(this), 100);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "columns", path: plotterPath.push("columns"), callbacks: dataChanged }, { name: "lineStyle", path: plotterPath.push("lineStyle"), callbacks: dataChanged }, { name: "curveType", path: plotterPath.push("curveType"), callbacks: dataChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];
            this.initializePaths(mapping);
            this.paths.filteredKeySet.getObject().setColumnKeySources(this.paths.columns.getObject().getObjects());
            this.c3Config = {
                size: {
                    width: this.props.style.width,
                    height: this.props.style.height
                },
                padding: {
                    top: 20,
                    bottom: 20
                },
                data: {
                    columns: [],
                    xSort: false,
                    selection: {
                        enabled: true,
                        multiple: true,
                        draggable: true
                    },
                    onclick: function onclick(d) {
                        var event = _this5.chart.internal.d3.event;
                        if (!(event.ctrlKey || event.metaKey) && d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.setKeys([d.id]);
                        }
                    },
                    onselected: function onselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.addKeys([d.id]);
                        }
                    },
                    onunselected: function onunselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.removeKeys([d.id]);
                        }
                    },
                    onmouseover: function onmouseover(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([d.id]);
                        }
                        var columnNamesToValue = {};
                        _this5.columnLabels.forEach(function (label, index, array) {
                            columnNamesToValue[label] = _this5.numericRecords[d.index]["columns"][index];
                        });
                        _this5.props.toolTip.setState({
                            x: _this5.chart.internal.d3.event.pageX,
                            y: _this5.chart.internal.d3.event.pageY,
                            showToolTip: true,
                            columnNamesToValue: columnNamesToValue
                        });
                    },
                    onmouseout: function onmouseout(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([]);
                            _this5.props.toolTip.setState({
                                showToolTip: false
                            });
                        }
                    }
                },
                tooltip: {
                    show: false
                },
                grid: {
                    x: {
                        show: true
                    },
                    y: {
                        show: true
                    }
                },
                axis: {
                    x: {
                        tick: {
                            multiline: false,
                            rotate: 0,
                            format: function format(d) {
                                if (_this5.c3Config.axis.y2.show) {
                                    //handle case where labels need to be reversed
                                    var temp = _this5.columnLabels.length - 1;
                                    return _this5.columnLabels[temp - d];
                                } else {
                                    return _this5.columnLabels[d];
                                }
                            }
                        }
                    },
                    y: {
                        show: true,
                        tick: {
                            multiline: true,
                            format: function format(num) {
                                if (_this5.yLabelColumnPath && _this5.yLabelColumnPath.getValue("this.getMetadata('dataType')") !== "number") {
                                    return _this5.yAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            }
                        }
                    },
                    y2: {
                        show: false,
                        min: null,
                        max: null,
                        tick: {
                            multiline: true,
                            format: function format(num) {
                                if (_this5.yLabelColumnPath && _this5.yLabelColumnPath.getObject().getMetadata('dataType') !== "number") {
                                    return _this5.yAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            }
                        }
                    }
                },
                bindto: this.element,
                legend: {
                    show: false
                },
                onrendered: this._updateStyle.bind(this)
            };
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }]);

    return WeaveC3LineChart;
}(_AbstractC3Tool3.default);

exports.default = WeaveC3LineChart;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::LineChartTool", WeaveC3LineChart);
//Weave.registerClass("weavejs.tools.LineChartTool", WeaveC3LineChart, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../utils/FormatUtils":40,"./AbstractC3Tool":15,"c3":"c3","d3":"d3","lodash":"lodash"}],36:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractC3Tool2 = require("./AbstractC3Tool");

var _AbstractC3Tool3 = _interopRequireDefault(_AbstractC3Tool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _c = require("c3");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/c3/c3.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/d3/d3.d.ts"/>
/// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/weave/WeavePath.d.ts"/>

;

var WeaveC3PieChart = function (_AbstractC3Tool) {
    _inherits(WeaveC3PieChart, _AbstractC3Tool);

    function WeaveC3PieChart(props) {
        _classCallCheck(this, WeaveC3PieChart);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3PieChart).call(this, props));
    }

    _createClass(WeaveC3PieChart, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "selectionKeysChanged",
        value: function selectionKeysChanged() {
            if (!this.chart) return;
            var keys = this.toolPath.selection_keyset.getKeys();
            if (keys.length) {
                this.chart.focus(keys);
            } else {
                this.chart.focus();
            }
        }
    }, {
        key: "probedKeysChanged",
        value: function probedKeysChanged() {
            var keys = this.toolPath.probe_keyset.getKeys();
            if (keys.length) {
                this.chart.focus(keys);
            } else {
                this.selectionKeysChanged();
            }
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {}
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "dataChanged",
        value: function dataChanged() {
            var _this2 = this;

            if (!this.chart) return;
            var numericMapping = {
                data: this.paths.data
            };
            var stringMapping = {
                fill: {
                    color: this.paths.fillStyle.push("color")
                },
                line: {},
                label: this.paths.label
            };
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.keyToIndex = {};
            this.indexToKey = {};
            this.numericRecords.forEach(function (record, index) {
                _this2.indexToKey[index] = record["id"];
                _this2.keyToIndex[record["id"]] = index;
            });
            var columns = [];
            columns = this.numericRecords.map(function (record) {
                var tempArr = [record["id"], record["data"]];
                return tempArr;
            });
            var chartType = "pie";
            if (this.paths.plotter.getState("innerRadius") > 0) {
                chartType = "donut";
            }
            this.colors = {};
            this.stringRecords.forEach(function (record) {
                _this2.colors[record["id"]] = record["fill"]["color"] || "#C0CDD1";
            });
            this.chart.load({
                columns: columns,
                type: chartType,
                colors: this.colors,
                unload: true
            });
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this3 = this;

            this.element.addEventListener("click", this.handleClick.bind(this));
            var dataChanged = _.debounce(this.dataChanged.bind(this), 100);
            var selectionKeySetChanged = this.selectionKeysChanged.bind(this);
            var probeKeySetChanged = _.debounce(this.probedKeysChanged.bind(this), 100);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var manifest = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "data", path: plotterPath.push("data"), callbacks: dataChanged }, { name: "label", path: plotterPath.push("label"), callbacks: dataChanged }, { name: "fillStyle", path: plotterPath.push("fill"), callbacks: dataChanged }, { name: "lineStyle", path: plotterPath.push("line"), callbacks: dataChanged }, { name: "innerRadius", path: plotterPath.push("innerRadius"), callbacks: dataChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];
            this.initializePaths(manifest);
            this.paths.filteredKeySet.getObject().setSingleKeySource(this.paths.data.getObject());
            this.c3Config = {
                size: {
                    width: this.props.style.width,
                    height: this.props.style.height
                },
                bindto: this.element,
                padding: {
                    top: 20,
                    bottom: 20,
                    right: 30
                },
                tooltip: {
                    show: false
                },
                data: {
                    columns: [],
                    selection: {
                        enabled: true,
                        multiple: true,
                        draggable: true
                    },
                    type: "pie",
                    onclick: function onclick(d) {
                        var event = _this3.chart.internal.d3.event;
                        if (!(event.ctrlKey || event.metaKey) && d && d.hasOwnProperty("index")) {
                            _this3.toolPath.selection_keyset.setKeys([_this3.indexToKey[d.index]]);
                        }
                    },
                    onselected: function onselected(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this3.toolPath.selection_keyset.addKeys([_this3.indexToKey[d.index]]);
                        }
                    },
                    onunselected: function onunselected(d) {
                        if (d && d.hasOwnProperty("data")) {
                            // d has a different structure than "onselected" argument
                            _this3.toolPath.selection_keyset.setKeys([]);
                        }
                    },
                    onmouseover: function onmouseover(d) {
                        if (d && d.hasOwnProperty("index")) {
                            var columnNamesToValue = {};
                            columnNamesToValue[_this3.paths.data.getObject().getMetadata("title")] = d.value;
                            _this3.toolPath.probe_keyset.setKeys([_this3.indexToKey[d.index]]);
                            _this3.props.toolTip.setState({
                                showToolTip: true,
                                x: _this3.chart.internal.d3.event.pageX,
                                y: _this3.chart.internal.d3.event.pageY,
                                columnNamesToValue: columnNamesToValue
                            });
                        }
                    },
                    onmouseout: function onmouseout(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this3.toolPath.probe_keyset.setKeys([]);
                            _this3.props.toolTip.setState({
                                showToolTip: false
                            });
                        }
                    }
                },
                pie: {
                    label: {
                        show: true,
                        format: function format(value, ratio, id) {
                            if (_this3.stringRecords && _this3.stringRecords.length) {
                                var record = _this3.stringRecords[_this3.keyToIndex[id]];
                                if (record && record["label"]) {
                                    return record["label"];
                                }
                                return String(value);
                            }
                        }
                    }
                },
                donut: {
                    label: {
                        show: true,
                        format: function format(value, ratio, id) {
                            if (_this3.stringRecords && _this3.stringRecords.length) {
                                var record = _this3.stringRecords[_this3.keyToIndex[id]];
                                if (record && record["label"]) {
                                    return record["label"];
                                }
                                return String(value);
                            }
                        }
                    }
                },
                legend: {
                    show: false
                },
                onrendered: this.updateStyle.bind(this)
            };
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3PieChart;
}(_AbstractC3Tool3.default);

exports.default = WeaveC3PieChart;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::PieChartTool", WeaveC3PieChart);
//Weave.registerClass("weavejs.tools.PieChartTool", WeaveC3PieChart, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"./AbstractC3Tool":15,"c3":"c3","lodash":"lodash"}],37:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractC3Tool2 = require("./AbstractC3Tool");

var _AbstractC3Tool3 = _interopRequireDefault(_AbstractC3Tool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _c = require("c3");

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
/// <reference path="../../typings/react/react-dom.d.ts"/>

/* private
 * @param records array or records
 * @param attributes array of attributes to be normalized
 */

var WeaveC3ScatterPlot = function (_AbstractC3Tool) {
    _inherits(WeaveC3ScatterPlot, _AbstractC3Tool);

    function WeaveC3ScatterPlot(props) {
        _classCallCheck(this, WeaveC3ScatterPlot);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3ScatterPlot).call(this, props));

        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.yAxisValueToLabel = {};
        _this.xAxisValueToLabel = {};
        return _this;
    }

    _createClass(WeaveC3ScatterPlot, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "normalizeRecords",
        value: function normalizeRecords(records, attributes) {
            // to avoid computing the stats at each iteration.
            var columnStatsCache = {};
            attributes.forEach(function (attr) {
                columnStatsCache[attr] = {
                    min: _.min(_.pluck(records, attr)),
                    max: _.max(_.pluck(records, attr))
                };
            });
            return records.map(function (record) {
                var obj = {};
                attributes.forEach(function (attr) {
                    var min = columnStatsCache[attr].min;
                    var max = columnStatsCache[attr].max;
                    if (!min) min = 0;
                    if (max - min === 0) {
                        return 0;
                    }
                    if (record[attr]) {
                        // console.log( (record[attr] - min) / (max - min));
                        obj[attr] = (record[attr] - min) / (max - min);
                    } else {
                        // if any of the value above is null then
                        // we can't normalize
                        obj[attr] = null;
                    }
                });
                return obj;
            });
        }
    }, {
        key: "mirrorVertical",
        value: function mirrorVertical() {
            var temp = "y";
            if (this.c3Config.axis.y.show == true) {
                this.c3Config.axis.y2.show = true;
                this.c3Config.axis.y.show = false;
                this.c3Config.data.axes = _defineProperty({}, temp, 'y2');
                this.c3Config.axis.y2.label = this.c3Config.axis.y.label;
            } else {
                this.c3Config.axis.y.show = true;
                this.c3Config.axis.y2.show = false;
                this.c3Config.data.axes = _defineProperty({}, temp, 'y');
                this.c3Config.axis.y.label = this.c3Config.axis.y2.label;
            }
            this.dataChanged();
            this.generate();
        }
    }, {
        key: "axisChanged",
        value: function axisChanged() {
            if (this.busy) {
                this.busy++;
                return;
            }
            if (this.c3Config.axis.y.show) {
                this.chart.axis.labels({
                    x: this.paths.xAxis.getState("overrideAxisName") || this.paths.dataX.getObject().getMetadata('title'),
                    y: this.paths.yAxis.getState("overrideAxisName") || this.paths.dataY.getObject().getMetadata('title')
                });
            } else {
                this.chart.axis.labels({
                    x: this.paths.xAxis.getState("overrideAxisName") || this.paths.dataX.getObject().getMetadata('title'),
                    y2: this.paths.yAxis.getState("overrideAxisName") || this.paths.dataY.getObject().getMetadata('title')
                });
            }
            this.axisLabelsChanged();
            this.generate();
        }
    }, {
        key: "axisLabelsChanged",
        value: function axisLabelsChanged() {
            var chartWidth = this.chart.internal.width;
            var textHeight = _StandardLib2.default.getTextHeight("test", "14pt Helvetica Neue");
            var xLabelsToShow = Math.floor(chartWidth / textHeight);
            xLabelsToShow = Math.max(2, xLabelsToShow);
            this.c3Config.axis.x.tick.culling = { max: xLabelsToShow };
        }
    }, {
        key: "dataChanged",
        value: function dataChanged() {
            var _this2 = this;

            if (this.busy) {
                this.busy++;
                return;
            }
            var numericMapping = {
                point: {
                    x: this.paths.dataX,
                    y: this.paths.dataY
                },
                size: this.paths.sizeBy
            };
            var stringMapping = {
                point: {
                    x: this.paths.dataX,
                    y: this.paths.dataY
                },
                fill: {
                    //alpha: this._fillStylePath.push("alpha"),
                    color: this.paths.fill.push("color")
                },
                line: {
                    //alpha: this._lineStylePath.push("alpha"),
                    color: this.paths.line.push("color")
                }
            };
            this.dataXType = this.paths.dataX.getObject().getMetadata('dataType');
            this.dataYType = this.paths.dataY.getObject().getMetadata('dataType');
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.records = _.zip(this.numericRecords, this.stringRecords);
            this.records = _.sortByOrder(this.records, ["size", "id"], ["desc", "asc"]);
            if (this.c3Config.axis.y.show == false) {
                this.records = this.records.reverse();
            }
            if (this.records.length) {
                ;

                var _$unzip = _.unzip(this.records);

                var _$unzip2 = _slicedToArray(_$unzip, 2);

                this.numericRecords = _$unzip2[0];
                this.stringRecords = _$unzip2[1];
            }this.keyToIndex = {};
            this.indexToKey = {};
            this.yAxisValueToLabel = {};
            this.xAxisValueToLabel = {};
            this.numericRecords.forEach(function (record, index) {
                _this2.keyToIndex[record["id"]] = index;
                _this2.indexToKey[index] = record["id"];
            });
            this.stringRecords.forEach(function (record, index) {
                _this2.xAxisValueToLabel[_this2.numericRecords[index]["point"]["x"]] = record["point"]["x"];
                _this2.yAxisValueToLabel[_this2.numericRecords[index]["point"]["y"]] = record["point"]["y"];
            });
            this.normalizedRecords = this.normalizeRecords(this.numericRecords, ["size"]);
            this.plotterState = this.paths.plotter.getUntypedState ? this.paths.plotter.getUntypedState() : this.paths.plotter.getState();
            this.normalizedPointSizes = this.normalizedRecords.map(function (normalizedRecord) {
                if (_this2.plotterState && _this2.plotterState.sizeBy) {
                    var minScreenRadius = _this2.plotterState.minScreenRadius;
                    var maxScreenRadius = _this2.plotterState.maxScreenRadius;
                    return (normalizedRecord && normalizedRecord["size"] ? minScreenRadius + normalizedRecord["size"] * (maxScreenRadius - minScreenRadius) : _this2.plotterState.defaultScreenRadius) || 3;
                } else {
                    return _this2.plotterState.defaultScreenRadius || 3;
                }
            });
            this.axisChanged();
            this.busy = 1;
            this.generate();
        }
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {
            var _this3 = this;

            if (!this.chart) return;
            d3.select(this.element).selectAll("circle").style("opacity", 1).style("stroke", "black").style("stroke-opacity", 0.0);
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var probedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var probedIndices = probedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            unselectedIndices = _.difference(unselectedIndices, probedIndices);
            if (probedIndices.length) {
                this.customStyle(probedIndices, "circle", ".c3-shape", { opacity: 1.0, "stroke-opacity": 0.0 });
            }
            if (selectedIndices.length) {
                this.customStyle(unselectedIndices, "circle", ".c3-shape", { opacity: 0.3, "stroke-opacity": 0.0 });
                this.customStyle(selectedIndices, "circle", ".c3-shape", { opacity: 1.0, "stroke-opacity": 1.0 });
                this.chart.select(["y"], selectedIndices, true);
            } else if (!probedIndices.length) {
                this.customStyle(indices, "circle", ".c3-shape", { opacity: 1.0, "stroke-opacity": 0.0 });
                this.chart.select(["y"], [], true);
            }
        }
    }, {
        key: "generate",
        value: function generate() {
            var _this4 = this;

            this.chart = (0, _c.generate)(this.c3Config);
            this.chart.load({ data: _.pluck(this.numericRecords, "point"), unload: true, done: function done() {
                    if (_this4.busy > 1) {
                        _this4.busy = 0;
                        _this4.dataChanged();
                    } else {
                        _this4.busy = 0;
                    }
                } });
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            //console.log("resizing");
            //var start = Date.now();
            if (this.c3Config.size.width != this.props.style.width || this.c3Config.size.height != this.props.style.height) {
                this.c3Config.axis.x.height = this.props.style.height * 0.2;
                this.c3Config.size = { width: this.props.style.width, height: this.props.style.height };
                this.chart = (0, _c.generate)(this.c3Config);
                this.axisChanged();
            }
            //var end = Date.now();
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this5 = this;

            this.element.addEventListener("click", this.handleClick.bind(this));
            var axisChanged = this.axisChanged.bind(this);
            var dataChanged = this.dataChanged.bind(this);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: dataChanged }, { name: "dataX", path: plotterPath.push("dataX"), callbacks: [dataChanged, axisChanged] }, { name: "dataY", path: plotterPath.push("dataY"), callbacks: [dataChanged, axisChanged] }, { name: "sizeBy", path: plotterPath.push("sizeBy"), callbacks: dataChanged }, { name: "fill", path: plotterPath.push("fill"), callbacks: [dataChanged] }, { name: "line", path: plotterPath.push("line"), callbacks: dataChanged }, { name: "xAxis", path: this.toolPath.pushPlotter("xAxis"), callbacks: axisChanged }, { name: "yAxis", path: this.toolPath.pushPlotter("yAxis"), callbacks: axisChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: this.updateStyle }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: this.updateStyle }];
            this.initializePaths(mapping);
            this.paths.filteredKeySet.getObject().setColumnKeySources([this.paths.dataX.getObject(), this.paths.dataY.getObject()]);
            this.c3Config = {
                size: {
                    height: this.props.style.height,
                    width: this.props.style.width
                },
                bindto: this.element,
                padding: {
                    top: 20,
                    bottom: 20
                },
                data: {
                    rows: [],
                    x: "x",
                    xSort: false,
                    type: "scatter",
                    selection: {
                        enabled: true,
                        multiple: true,
                        draggable: true
                    },
                    color: function color(_color, d) {
                        if (_this5.stringRecords && d.hasOwnProperty("index")) {
                            // find the corresponding index of numericRecords in stringRecords
                            var id = _this5.indexToKey[d.index];
                            var index = _.pluck(_this5.stringRecords, "id").indexOf(id);
                            var record = _this5.stringRecords[index];
                            return record && record["fill"] && record["fill"]["color"] ? record["fill"]["color"] : "#000000";
                        }
                        return "#000000";
                    },
                    onclick: function onclick(d) {
                        var event = _this5.chart.internal.d3.event;
                        if (!(event.ctrlKey || event.metaKey) && d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.setKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onselected: function onselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.addKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onunselected: function onunselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.removeKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onmouseover: function onmouseover(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([]);
                            var columnNamesToValue = {};
                            var xValue = _this5.numericRecords[d.index]["point"]["x"];
                            if (xValue) {
                                columnNamesToValue[_this5.paths.dataX.getObject().getMetadata('title')] = xValue;
                            }
                            var yValue = _this5.numericRecords[d.index]["point"]["y"];
                            if (yValue) {
                                columnNamesToValue[_this5.paths.dataY.getObject().getMetadata('title')] = yValue;
                            }
                            var sizeByValue = _this5.numericRecords[d.index]["size"];
                            if (sizeByValue) {
                                columnNamesToValue[_this5.paths.sizeBy.getObject().getMetadata('title')] = sizeByValue;
                            }
                            _this5.toolPath.probe_keyset.setKeys([_this5.indexToKey[d.index]]);
                            _this5.props.toolTip.setState({
                                x: _this5.chart.internal.d3.event.pageX,
                                y: _this5.chart.internal.d3.event.pageY,
                                showToolTip: true,
                                columnNamesToValue: columnNamesToValue
                            });
                        }
                    },
                    onmouseout: function onmouseout(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([]);
                            _this5.props.toolTip.setState({
                                showToolTip: false
                            });
                        }
                    }
                },
                legend: {
                    show: false
                },
                axis: {
                    x: {
                        label: {
                            text: "",
                            position: "outer-center"
                        },
                        tick: {
                            format: function format(num) {
                                if (_this5.paths.dataX && _this5.xAxisValueToLabel && _this5.dataXType !== "number") {
                                    return _this5.xAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            },
                            rotate: -45,
                            culling: {
                                max: null
                            },
                            fit: false //,
                        }
                    },
                    y: {
                        show: true,
                        label: {
                            text: "",
                            position: "outer-middle"
                        },
                        tick: {
                            format: function format(num) {
                                if (_this5.paths.dataY && _this5.yAxisValueToLabel && _this5.dataYType !== "number") {
                                    return _this5.yAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            }
                        }
                    },
                    y2: {
                        show: false,
                        label: {
                            text: "",
                            position: "outer-middle"
                        },
                        tick: {
                            format: function format(num) {
                                if (_this5.paths.dataY && _this5.yAxisValueToLabel && _this5.dataYType !== "number") {
                                    return _this5.yAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            }
                        }
                    }
                },
                grid: {
                    x: {
                        show: true
                    },
                    y: {
                        show: true
                    }
                },
                tooltip: {
                    format: {
                        title: function title(num) {
                            return _this5.paths.xAxis.getState("overrideAxisName") || _this5.paths.dataX.getObject().getMetadata('title');
                        },
                        name: function name(_name, ratio, id, index) {
                            return _this5.paths.yAxis.getState("overrideAxisName") || _this5.paths.dataY.getObject().getMetadata('title');
                        }
                    },
                    show: false
                },
                point: {
                    r: function r(d) {
                        if (d.hasOwnProperty("index")) {
                            return _this5.normalizedPointSizes[d.index];
                        }
                    }
                },
                onrendered: this.updateStyle.bind(this)
            };
            this.c3Config.axis.x.height = this.props.style.height * 0.2;
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3ScatterPlot;
}(_AbstractC3Tool3.default);

exports.default = WeaveC3ScatterPlot;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::ScatterPlotTool", WeaveC3ScatterPlot);
//Weave.registerClass("weavejs.tools.ScatterPlotTool", WeaveC3ScatterPlot, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../utils/FormatUtils":40,"../utils/StandardLib":41,"./AbstractC3Tool":15,"c3":"c3","d3":"d3","lodash":"lodash"}],38:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _WeaveTool = require("../WeaveTool");

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _ReactBootStrapTable = require("../react-bootstrap-datatable/ReactBootStrapTable");

var _ReactBootStrapTable2 = _interopRequireDefault(_ReactBootStrapTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/react/react-dom.d.ts"/>
/// <reference path="../../typings/weave/WeavePath.d.ts"/>

var WeaveReactTable = function (_React$Component) {
    _inherits(WeaveReactTable, _React$Component);

    function WeaveReactTable(props) {
        _classCallCheck(this, WeaveReactTable);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveReactTable).call(this, props));

        _this.toolPath = props.toolPath;
        _this.columnsPath = _this.toolPath.push("columns");
        _this.state = {
            data: []
        };
        return _this;
    }

    _createClass(WeaveReactTable, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.columnsPath.addCallback(this, this.dataChanged, true);
            this.toolPath.push("filteredKeySet").addCallback(this, this.dataChanged, true);
            this.toolPath.push("selectionKeySet").addCallback(this, this.forceUpdate, true);
            this.toolPath.probe_keyset.addCallback(this, this.forceUpdate, true);
            this.toolPath.getObject("filteredKeySet").setColumnKeySources(this.toolPath.getObject("columns").getObjects());
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {}
    }, {
        key: "dataChanged",
        value: function dataChanged() {
            this.setState({
                data: this.columnsPath.retrieveRecords(this.columnsPath.getNames(), this.toolPath.push("filteredKeySet"))
            });
        }
        // customFormat(cell, row) {
        //     if(typeof cell === "number") {
        //         return round(cell, 2)
        //     } else {
        //         return cell;
        //     }
        // }

    }, {
        key: "handleProbe",
        value: function handleProbe(id) {
            this.toolPath.probe_keyset.setKeys(id);
        }
    }, {
        key: "handleSelection",
        value: function handleSelection(id) {
            this.toolPath.push("selectionKeySet", null).setKeys(id);
        }
    }, {
        key: "render",
        value: function render() {
            var columns = {};
            columns["id"] = "Key";
            this.columnsPath.getChildren().forEach(function (columnPath) {
                columns[columnPath.getPath().pop()] = columnPath.getObject().getMetadata('title');
            });
            return React.createElement(_ReactBootStrapTable2.default, { columnTitles: columns, rows: this.state.data, idProperty: "id", height: this.props.style.height, striped: true, hover: true, bordered: true, condensed: true, selectedIds: this.toolPath.push("selectionKeySet", null).getKeys(), probedIds: this.toolPath.probe_keyset.getKeys(), onProbe: this.handleProbe.bind(this), onSelection: this.handleSelection.bind(this), showIdColumn: false });
        }
    }, {
        key: "title",
        get: function get() {
            return (this.toolPath.getType('panelTitle') ? this.toolPath.getState('panelTitle') : '') || this.toolPath.getPath().pop();
        }
    }]);

    return WeaveReactTable;
}(React.Component);

exports.default = WeaveReactTable;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::TableTool", WeaveReactTable);
//Weave.registerClass("weavejs.tools.TableTool", WeaveReactTable, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../react-bootstrap-datatable/ReactBootStrapTable":5,"react":"react"}],39:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _WeaveTool = require("../WeaveTool");

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _ui = require("../react-ui/ui");

var _ui2 = _interopRequireDefault(_ui);

var _reactBootstrap = require("react-bootstrap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/react-bootstrap/react-bootstrap.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../utils/StandardLib.ts"/>

//TODO: This is a hack to allow react to be imported in generated JSX. Without this, import is missing and render encounters an exception
var stub = React;
var sessionStateMenuStyle = { display: "flex", flex: 1, height: "100%", flexDirection: "column", overflow: "auto" };
var sessionStateComboBoxStyle = { display: "flex", flex: 1, height: "100%", flexDirection: "column" };

var SessionStateMenuTool = function (_React$Component) {
    _inherits(SessionStateMenuTool, _React$Component);

    function SessionStateMenuTool(props) {
        _classCallCheck(this, SessionStateMenuTool);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SessionStateMenuTool).call(this, props));

        _this.toolPath = _this.props.toolPath;
        _this.toolPath.push("choices").addCallback(_this, _this.forceUpdate);
        _this.toolPath.push("selectedChoice").addCallback(_this, _this.forceUpdate);
        _this.toolPath.push("layoutMode").addCallback(_this, _this.forceUpdate);
        return _this;
    }

    _createClass(SessionStateMenuTool, [{
        key: "handleMissingSessionStateProperties",
        value: function handleMissingSessionStateProperties(newState) {}
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {}
    }, {
        key: "handleItemClick",
        value: function handleItemClick(index, event) {
            this.toolPath.state("selectedChoice", this.choices.getNames()[index]);
            var targets = this.toolPath.push("targets");
            var choice = this.choices.getState(index);
            targets.forEach(choice, function (value, key) {
                this.push(key, null).state(value);
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            this.choices = this.toolPath.push("choices");
            var selectedChoice = this.toolPath.getState("selectedChoice");
            var layoutMode = this.toolPath.getState("layoutMode");
            var menus = this.choices.getNames().map(function (choice, index) {
                if (layoutMode === "ComboBox") {
                    return choice === selectedChoice ? React.createElement(
                        _reactBootstrap.MenuItem,
                        { active: true, key: index, onSelect: _this2.handleItemClick.bind(_this2, index) },
                        choice
                    ) : React.createElement(
                        _reactBootstrap.MenuItem,
                        { key: index, onSelect: _this2.handleItemClick.bind(_this2, index) },
                        choice
                    );
                } else {
                    return choice === selectedChoice ? React.createElement(
                        _reactBootstrap.ListGroupItem,
                        { active: true, key: index, onClick: _this2.handleItemClick.bind(_this2, index) },
                        choice
                    ) : React.createElement(
                        _reactBootstrap.ListGroupItem,
                        { key: index, onClick: _this2.handleItemClick.bind(_this2, index) },
                        choice
                    );
                }
            });
            var container;
            if (layoutMode === "ComboBox") {
                container = React.createElement(
                    _ui2.default.VBox,
                    { style: { height: "100%", flex: 1.0, alignItems: "center" } },
                    React.createElement(
                        _reactBootstrap.DropdownButton,
                        { title: selectedChoice, id: "dropdown-" + this.toolPath.getState("class") },
                        menus
                    )
                );
            } else {
                container = React.createElement(
                    _reactBootstrap.ListGroup,
                    null,
                    menus
                );
            }
            return React.createElement(
                "div",
                { style: layoutMode === "ComboBox" ? sessionStateComboBoxStyle : sessionStateMenuStyle },
                container
            );
        }
    }]);

    return SessionStateMenuTool;
}(React.Component);

exports.default = SessionStateMenuTool;

(0, _WeaveTool.registerToolImplementation)("weave.ui::SessionStateMenuTool", SessionStateMenuTool);
//Weave.registerClass("weavejs.tools.SessionStateMenuTool", SessionStateMenuTool, [weavejs.api.core.ILinkableObjectWithNewProperties]);

},{"../WeaveTool":3,"../react-ui/ui":14,"react":"react","react-bootstrap":"react-bootstrap"}],40:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /// <reference path="../../typings/d3/d3.d.ts"/>

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormatUtils = function () {
    function FormatUtils() {
        _classCallCheck(this, FormatUtils);
    }

    _createClass(FormatUtils, null, [{
        key: "defaultNumberFormatting",

        // this function returns the default number formating.
        // for number values, we round them to at most 4 decimal places
        // unless the number is very small, in which case we just return it
        value: function defaultNumberFormatting(x) {
            if (x < 0.0001) {
                return x;
            } else {
                return d3.round(x, 4);
            }
        }
    }]);

    return FormatUtils;
}();

exports.default = FormatUtils;

},{"d3":"d3"}],41:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /// <reference path="../../typings/lodash/lodash.d.ts"/>

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StandardLib = function () {
    function StandardLib() {
        _classCallCheck(this, StandardLib);
    }

    _createClass(StandardLib, null, [{
        key: "rgba",

        /**
         * Generates an "rgba()" string for CSS.
         * @param r A number between 0 and 255.
         * @param g A number between 0 and 255.
         * @param b A number between 0 and 255.
         * @param a A number between 0 and 1.
         */
        value: function rgba(r, g, b, a) {
            return "rgba(" + r + "," + g + "," + b + "," + a + ")";
        }
        /**
         * Use this as a temporary solution before we use Weave.registerClass().
         */

    }, {
        key: "debounce",
        value: function debounce(target, methodName) {
            var delay = arguments.length <= 2 || arguments[2] === undefined ? 20 : arguments[2];

            if (target[methodName] === Object.getPrototypeOf(target)[methodName]) target[methodName] = _.debounce(target[methodName].bind(target), delay);
            target[methodName]();
        }
        /**
           * Searches for the first nested object with matching properties
           * @param roo The root Object.
           * @param match Either an Object with properties to match, or a Function that checks for a match.
         *
         * @returns returns an object with the matching properties
           */

    }, {
        key: "findDeep",
        value: function findDeep(root, match) {
            if (typeof match !== "function") {
                match = _.matches(match);
            }
            if (match(root)) {
                return root;
            }
            if ((typeof root === "undefined" ? "undefined" : _typeof(root)) == "object") {
                var key;
                for (key in root) {
                    var found = this.findDeep(root[key], match);
                    if (found) return found;
                }
            }
        }
        /**
          * Adds undefined values to new state for properties in
          * current state not found in new state.
          */

    }, {
        key: "includeMissingPropertyPlaceholders",
        value: function includeMissingPropertyPlaceholders(currentState, newState) {
            var key;
            for (key in currentState) {
                if (!newState.hasOwnProperty(key)) {
                    newState[key] = undefined;
                }
            }
            return newState;
        }
        /**
          * Calculates an interpolated color for a normalized value.
          * @param normValue A Number between 0 and 1.
          * @param colors An Array or list of colors to interpolate between.  Normalized values of 0 and 1 will be mapped to the first and last colors.
          * @return An interpolated color associated with the given normValue based on the list of color values.
          */

    }, {
        key: "interpolateColor",
        value: function interpolateColor(normValue) {
            for (var _len = arguments.length, colors = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                colors[_key - 1] = arguments[_key];
            }

            // handle an array of colors as the second parameter
            if (colors.length === 1 && Array.isArray(colors[0])) {
                colors = colors[0];
            }
            // handle invalid parameters
            if (normValue < 0 || normValue > 1 || colors.length === 0) {
                return NaN;
            }
            // find the min and max colors we want to interpolate between
            var maxIndex = Math.floor(colors.length - 1);
            var leftIndex = Math.floor(maxIndex * normValue);
            var rightIndex = Math.floor(leftIndex + 1);
            // handle boundary condition
            if (rightIndex === colors.length) {
                return parseInt(colors[leftIndex], 16);
            }
            var minColor = colors[leftIndex];
            var maxColor = colors[rightIndex];
            // normalize the norm value between the two norm values associated with the surrounding colors
            normValue = normValue * maxIndex - leftIndex;
            var percentLeft = 1 - normValue; // relevance of minColor
            var percentRight = normValue; // relevance of maxColor
            var R = 0xFF0000;
            var G = 0x00FF00;
            var B = 0x0000FF;
            return percentLeft * (minColor & R) + percentRight * (maxColor & R) & R | percentLeft * (minColor & G) + percentRight * (maxColor & G) & G | percentLeft * (minColor & B) + percentRight * (maxColor & B) & B;
        }
        /**
        * This function converts a decimal number to a 6 digit hexadecimal string
        * @param dec A decimal number
        * @return the hexadecimal value of the decimal number
        */

    }, {
        key: "decimalToHex",
        value: function decimalToHex(dec) {
            return _.padLeft(dec.toString(16), 6, "0");
        }
        /**
         * This function return the normalized value between a range
         * if no range is provided, the default range will be 0 and 1
         *
         * @param value The value to be normalized
         * @param min the range min value
         * @param max the range max value
         */

    }, {
        key: "normalize",
        value: function normalize(value, min, max) {
            if (!min) {
                min = 0;
            }
            if (!max) {
                max = 1;
            }
            return (value - min) / (max - min);
        }
        /**
         *  This function takes merges an object into another
         *
         * @param into {object} the object to merge into
         * @param obj {obj} the object to merge from
         */

    }, {
        key: "merge",
        value: function merge(into, obj) {
            var attr;
            for (attr in obj) {
                into[attr] = obj[attr];
            }
        }
        /**
         * Temporary polyfill workaround for String.startsWith
         * for projects that are targetting es5
         *
         *  determines whether a string begins with the characters of another string, returning true or false as appropriate.
         *
         * @param str {string} the str string in which to search for in str.startsWith
         * @param searchString {string} The characters to be searched for at the start of this string.
         * @param position {number?} Optional. The position in this string at which to begin searching for searchString; defaults to 0.
         *
         * @returns true or false
         *
         */

    }, {
        key: "startsWith",
        value: function startsWith(str, searchString, position) {
            position = position || 0;
            return str.indexOf(searchString, position) === position;
        }
    }, {
        key: "resolveRelative",
        value: function resolveRelative(path, base) {
            // Upper directory
            if (StandardLib.startsWith(path, "../")) {
                return StandardLib.resolveRelative(path.slice(3), base.replace(/\/[^\/]*$/, ""));
            }
            // Relative to the root
            if (StandardLib.startsWith(path, "/")) {
                var match = base.match(/(\w*:\/\/)?[^\/]*\//) || [base];
                return match[0] + path.slice(1);
            }
            //relative to the current directory
            return base.replace(/\/[^\/]*$/, "") + "/" + path;
        }
    }, {
        key: "getDataBounds",
        value: function getDataBounds(column) {
            return {
                min: _.min(column),
                max: _.max(column)
            };
        }
        /**
         *
         *   This function return and object whose keys are url
         *   parameters and value
         */

    }, {
        key: "getUrlParams",
        value: function getUrlParams() {
            var queryParams = {};
            var query = window.location.search.substring(1);
            if (!query) {
                return {};
            }
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (typeof queryParams[pair[0]] === "undefined") {
                    queryParams[pair[0]] = decodeURIComponent(pair[1]);
                } else if (typeof queryParams[pair[0]] === "string") {
                    var arr = [queryParams[pair[0]], decodeURIComponent(pair[1])];
                    queryParams[pair[0]] = arr;
                } else {
                    queryParams[pair[0]].push(decodeURIComponent(pair[1]));
                }
            }
            return queryParams;
        }
        /**
         *
         * This function returns the width of a text string,
         * in pixels, based on its font style
         */

    }, {
        key: "getTextWidth",
        value: function getTextWidth(text, font) {
            // create a dummy canvas element to perform the calculation
            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");
            context.font = font;
            var metrics = context.measureText(text);
            return metrics.width;
        }
    }, {
        key: "getTextHeight",
        value: function getTextHeight(text, font) {
            var body = document.getElementsByTagName("body")[0];
            var dummy = document.createElement("div");
            var dummyText = document.createTextNode("M");
            dummy.appendChild(dummyText);
            dummy.setAttribute("style", font);
            body.appendChild(dummy);
            var result = dummy.offsetHeight;
            body.removeChild(dummy);
            return result;
        }
    }]);

    return StandardLib;
}();

exports.default = StandardLib;

},{"lodash":"lodash"}]},{},[4])(4)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
