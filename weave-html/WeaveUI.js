(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.WeaveUI = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react"),require("react-dom")):"function"==typeof define&&define.amd?define(["react","react-dom"],t):"object"==typeof exports?exports.ReactBootstrapTable=t(require("react"),require("react-dom")):e.ReactBootstrapTable=t(e.React,e.ReactDOM)}(this,function(e,t){return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(1),i=n(o),a=r(40),s=n(a),l=r(34);"undefined"!=typeof window&&(window.BootstrapTable=i["default"],window.TableHeaderColumn=s["default"],window.TableDataSet=l.TableDataSet),t["default"]={BootstrapTable:i["default"],TableHeaderColumn:s["default"],TableDataSet:l.TableDataSet},e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(3),d=n(c),p=r(4),f=n(p),h=r(5),v=n(h),y=r(9),m=n(y),g=r(30),b=n(g),w=r(32),E=n(w),_=r(33),P=n(_),T=r(34),S=r(36),O=n(S),C=function(e){function t(e){var r=this;o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this._scrollHeader=function(e){r.refs.header.refs.container.scrollLeft=e.currentTarget.scrollLeft},this._adjustHeaderWidth=function(){var e=r.refs.header.refs.container.childNodes[0],t=r.refs.body.refs.container.childNodes[0];e.offsetWidth!==t.offsetWidth&&(e.style.width=t.offsetWidth+"px");var n=r.refs.body.getBodyHeaderDomProp();r.refs.header.fitHeader(n,r.refs.body.refs.container.scrollHeight>r.refs.body.refs.container.clientHeight)},this._attachCellEditFunc(),Array.isArray(this.props.data)?this.store=new T.TableDataStore(this.props.data):(this.store=new T.TableDataStore(this.props.data.getData()),this.props.data.clear(),this.props.data.on("change",function(e){r.store.setData(e),r.setState({data:r.getTableData(r.props)})})),this.initTable(this.props),this.props.selectRow&&this.props.selectRow.selected&&this.store.setSelectedRowKey(this.props.selectRow.selected),this.state={data:this.getTableData(this.props),selectedRowKeys:this.store.getSelectedRowKeys()}}return i(t,e),a(t,[{key:"initTable",value:function(e){var t=e.keyField,r={};if("string"==typeof t&&t.length||u["default"].Children.forEach(e.children,function(e){if(e.props.isKey){if(null!=t)throw"Error. Multiple key column be detected in TableHeaderColumn.";t=e.props.dataField}},this),u["default"].Children.forEach(e.children,function(e){e.props.sortFunc&&(r[e.props.dataField]=e.props.sortFunc)},this),null==t)throw"Error. No any key column defined in TableHeaderColumn.Use 'isKey={true}' to specify an unique column after version 0.5.4.";this.store.setProps({isPagination:e.pagination,keyField:t,customSortFuncMap:r,multiColumnSearch:e.multiColumnSearch,remote:this.isRemoteDataSource()})}},{key:"getTableData",value:function(e){var t=[];if(e.pagination){var r=e.options.page,n=e.options.sizePerPage;r||(r=this.refs.pagination?this.refs.pagination.getCurrentPage():1),n||(n=this.refs.pagination?this.refs.pagination.getSizePerPage():f["default"].SIZE_PER_PAGE),r>=e.data.length/n&&(r=1),t=this.store.page(r,n).get()}else t=this.store.get();return t}},{key:"componentWillReceiveProps",value:function(e){if(this.initTable(e),Array.isArray(e.data)){this.store.setData(e.data);var t=this.getTableData(e);this.setState({data:t})}e.selectRow&&e.selectRow.selected&&(this.store.setSelectedRowKey(e.selectRow.selected),this.setState({selectedRowKeys:e.selectRow.selected}))}},{key:"componentDidMount",value:function(){this._adjustHeaderWidth(),window.addEventListener("resize",this._adjustHeaderWidth),this.refs.body.refs.container.addEventListener("scroll",this._scrollHeader)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("resize",this._adjustHeaderWidth),this.refs.body.refs.container.removeEventListener("scroll",this._scrollHeader)}},{key:"componentDidUpdate",value:function(){this._adjustHeaderWidth(),this._attachCellEditFunc(),this.props.options.afterTableComplete&&this.props.options.afterTableComplete()}},{key:"_attachCellEditFunc",value:function(){this.props.cellEdit&&(this.props.cellEdit.__onCompleteEdit__=this.handleEditCell.bind(this),this.props.cellEdit.mode!==f["default"].CELL_EDIT_NONE&&(this.props.selectRow.clickToSelect=!1))}},{key:"isRemoteDataSource",value:function(e){return(e||this.props).remote}},{key:"render",value:function(){var e=((0,d["default"])("react-bs-table"),this.props.children),t={height:this.props.height,maxHeight:this.props.maxHeight};Array.isArray(this.props.children)||(e=[this.props.children]);var r=e.map(function(e,t){return{name:e.props.dataField,align:e.props.dataAlign,sort:e.props.dataSort,format:e.props.dataFormat,editable:e.props.editable,hidden:e.props.hidden,className:e.props.columnClassName,width:e.props.width,text:e.props.children,index:t}},this),n=this.renderPagination(),o=this.renderToolBar(),i=this.renderTableFilter(r),a=this.isSelectAll();return u["default"].createElement("div",{className:"react-bs-container",ref:"table"},o,u["default"].createElement("div",{className:"react-bs-table-container",style:t},u["default"].createElement(v["default"],{ref:"header",rowSelectType:this.props.selectRow.mode,hideSelectColumn:this.props.selectRow.hideSelectColumn,sortName:this.props.options.sortName,sortOrder:this.props.options.sortOrder,onSort:this.handleSort.bind(this),onSelectAllRow:this.handleSelectAllRow.bind(this),bordered:this.props.bordered,condensed:this.props.condensed,isSelectAll:a},this.props.children),u["default"].createElement(m["default"],{height:this.props.height,maxHeight:this.props.maxHeight,ref:"body",data:this.state.data,columns:r,trClassName:this.props.trClassName,striped:this.props.striped,bordered:this.props.bordered,hover:this.props.hover,keyField:this.store.getKeyField(),condensed:this.props.condensed,selectRow:this.props.selectRow,cellEdit:this.props.cellEdit,selectedRowKeys:this.state.selectedRowKeys,onRowClick:this.handleRowClick.bind(this),onSelectRow:this.handleSelectRow.bind(this),noDataText:this.props.options.noDataText})),i,n)}},{key:"isSelectAll",value:function(){var e=this.store.getSelectedRowKeys(),t=this.store.getAllRowkey();return e.length!==t.length?0===e.length?!1:"indeterminate":!0}},{key:"handleSort",value:function(e,t){if(this.props.options.onSortChange&&this.props.options.onSortChange(t,e,this.props),!this.isRemoteDataSource()){var r=this.store.sort(e,t).get();this.setState({data:r})}}},{key:"handlePaginationData",value:function(e,t){var r=this.props.options.onPageChange;if(r&&r(e,t),!this.isRemoteDataSource()){var n=this.store.page(e,t).get();this.setState({data:n})}}},{key:"handleRowClick",value:function(e){this.props.options.onRowClick&&this.props.options.onRowClick(e)}},{key:"handleSelectAllRow",value:function(e){var t=e.currentTarget.checked,r=[],n=!0;this.props.selectRow.onSelectAll&&(n=this.props.selectRow.onSelectAll(t,t?this.store.get():[])),("undefined"==typeof n||n!==!1)&&(t&&(r=this.store.getAllRowkey()),this.store.setSelectedRowKey(r),this.setState({selectedRowKeys:r}))}},{key:"handleSelectRow",value:function(e,t){var r=this.store.getSelectedRowKeys(),n=e[this.store.getKeyField()],o=!0;this.props.selectRow.onSelect&&(o=this.props.selectRow.onSelect(e,t)),("undefined"==typeof o||o!==!1)&&(this.props.selectRow.mode===f["default"].ROW_SELECT_SINGLE?r=t?[n]:[]:t?r.push(n):r=r.filter(function(e){return n!==e}),this.store.setSelectedRowKey(r),this.setState({selectedRowKeys:r}))}},{key:"handleEditCell",value:function(e,t,r){var n=void 0;u["default"].Children.forEach(this.props.children,function(e,t){return t==r?(n=e.props.dataField,!1):void 0});var o=this.store.edit(e,t,n).get();this.setState({data:o}),this.props.cellEdit.afterSaveCell&&this.props.cellEdit.afterSaveCell(this.state.data[t],n,e)}},{key:"handleAddRowBegin",value:function(){this.refs.body}},{key:"handleAddRow",value:function(e){var t=void 0;try{this.store.add(e)}catch(r){return r}if(this.props.pagination){var n=this.refs.pagination.getSizePerPage(),o=Math.ceil(this.store.getDataNum()/n);t=this.store.page(o,n).get(),this.setState({data:t}),this.refs.pagination.changePage(o)}else t=this.store.get(),this.setState({data:t});this.props.options.afterInsertRow&&this.props.options.afterInsertRow(e)}},{key:"getSizePerPage",value:function(){return this.props.pagination?this.refs.pagination.getSizePerPage():void 0}},{key:"getCurrentPage",value:function(){return this.props.pagination?this.refs.pagination.getCurrentPage():void 0}},{key:"handleDropRow",value:function(e){var t=this,r=e?e:this.store.getSelectedRowKeys();r&&r.length>0&&(this.props.options.handleConfirmDeleteRow?this.props.options.handleConfirmDeleteRow(function(){t.deleteRow(r)}):confirm("Are you sure want delete?")&&this.deleteRow(r))}},{key:"deleteRow",value:function(e){var t=void 0;if(this.store.remove(e),this.store.setSelectedRowKey([]),this.props.pagination){var r=this.refs.pagination.getSizePerPage(),n=Math.ceil(this.store.getDataNum()/r),o=this.refs.pagination.getCurrentPage();o>n&&(o=n),t=this.store.page(o,r).get(),this.setState({data:t,selectedRowKeys:this.store.getSelectedRowKeys()}),this.refs.pagination.changePage(o)}else t=this.store.get(),this.setState({data:t,selectedRowKeys:this.store.getSelectedRowKeys()});this.props.options.afterDeleteRow&&this.props.options.afterDeleteRow(e)}},{key:"handleFilterData",value:function(e){this.store.filter(e);var t=void 0;if(this.props.pagination){var r=this.refs.pagination.getSizePerPage();t=this.store.page(1,r).get(),this.refs.pagination.changePage(1)}else t=this.store.get();this.props.options.afterColumnFilter&&this.props.options.afterColumnFilter(e,this.store.getDataIgnoringPagination()),this.setState({data:t})}},{key:"handleExportCSV",value:function(){var e=this.store.getDataIgnoringPagination(),t=[];this.props.children.map(function(e){e.props.hidden===!1&&t.push(e.props.dataField)}),(0,O["default"])(e,t,this.props.csvFileName)}},{key:"handleSearch",value:function(e){this.store.search(e);var t=void 0;if(this.props.pagination){var r=this.refs.pagination.getSizePerPage();t=this.store.page(1,r).get(),this.refs.pagination.changePage(1)}else t=this.store.get();this.props.options.afterSearch&&this.props.options.afterSearch(e,this.store.getDataIgnoringPagination()),this.setState({data:t})}},{key:"renderPagination",value:function(){if(this.props.pagination){var e=void 0;return e=this.isRemoteDataSource()?this.props.fetchInfo.dataTotalSize:this.store.getDataNum(),u["default"].createElement("div",null,u["default"].createElement(b["default"],{ref:"pagination",currPage:this.props.options.page||1,changePage:this.handlePaginationData.bind(this),sizePerPage:this.props.options.sizePerPage||f["default"].SIZE_PER_PAGE_LIST[0],sizePerPageList:this.props.options.sizePerPageList||f["default"].SIZE_PER_PAGE_LIST,paginationSize:this.props.options.paginationSize||f["default"].PAGINATION_SIZE,remote:this.isRemoteDataSource(),dataSize:e,onSizePerPageList:this.props.options.onSizePerPageList}))}return null}},{key:"renderToolBar",value:function(){var e=void 0;return e=Array.isArray(this.props.children)?this.props.children.map(function(e){var t=e.props;return{name:t.children,field:t.dataField,autoValue:t.autoValue||!1,editable:t.editable&&"function"==typeof t.editable?t.editable():t.editable,format:t.format?format:!1}}):[{name:this.props.children.props.children,field:this.props.children.props.dataField,editable:this.props.children.props.editable}],this.props.insertRow||this.props.deleteRow||this.props.search||this.props.exportCSV?u["default"].createElement("div",{className:"tool-bar"},u["default"].createElement(E["default"],{enableInsert:this.props.insertRow,enableDelete:this.props.deleteRow,enableSearch:this.props.search,enableExportCSV:this.props.exportCSV,columns:e,searchPlaceholder:this.props.searchPlaceholder,onAddRow:this.handleAddRow.bind(this),onAddRowBegin:this.handleAddRowBegin.bind(this),onDropRow:this.handleDropRow.bind(this),onSearch:this.handleSearch.bind(this),onExportCSV:this.handleExportCSV.bind(this)})):null}},{key:"renderTableFilter",value:function(e){return this.props.columnFilter?u["default"].createElement(P["default"],{columns:e,rowSelectType:this.props.selectRow.mode,onFilter:this.handleFilterData.bind(this)}):null}}]),t}(u["default"].Component);C.propTypes={keyField:u["default"].PropTypes.string,height:u["default"].PropTypes.string,maxHeight:u["default"].PropTypes.string,data:u["default"].PropTypes.oneOfType([u["default"].PropTypes.array,u["default"].PropTypes.object]),remote:u["default"].PropTypes.bool,striped:u["default"].PropTypes.bool,bordered:u["default"].PropTypes.bool,hover:u["default"].PropTypes.bool,condensed:u["default"].PropTypes.bool,pagination:u["default"].PropTypes.bool,searchPlaceholder:u["default"].PropTypes.string,selectRow:u["default"].PropTypes.shape({mode:u["default"].PropTypes.string,bgColor:u["default"].PropTypes.string,selected:u["default"].PropTypes.array,onSelect:u["default"].PropTypes.func,onSelectAll:u["default"].PropTypes.func,clickToSelect:u["default"].PropTypes.bool,hideSelectColumn:u["default"].PropTypes.bool,clickToSelectAndEditCell:u["default"].PropTypes.bool}),cellEdit:u["default"].PropTypes.shape({mode:u["default"].PropTypes.string,blurToSave:u["default"].PropTypes.bool,afterSaveCell:u["default"].PropTypes.func}),insertRow:u["default"].PropTypes.bool,deleteRow:u["default"].PropTypes.bool,search:u["default"].PropTypes.bool,columnFilter:u["default"].PropTypes.bool,trClassName:u["default"].PropTypes.any,options:u["default"].PropTypes.shape({sortName:u["default"].PropTypes.string,sortOrder:u["default"].PropTypes.string,afterTableComplete:u["default"].PropTypes.func,afterDeleteRow:u["default"].PropTypes.func,afterInsertRow:u["default"].PropTypes.func,afterSearch:u["default"].PropTypes.func,afterColumnFilter:u["default"].PropTypes.func,onRowClick:u["default"].PropTypes.func,page:u["default"].PropTypes.number,sizePerPageList:u["default"].PropTypes.array,sizePerPage:u["default"].PropTypes.number,paginationSize:u["default"].PropTypes.number,onSortChange:u["default"].PropTypes.func,onPageChange:u["default"].PropTypes.func,onSizePerPageList:u["default"].PropTypes.func,noDataText:u["default"].PropTypes.string,handleConfirmDeleteRow:u["default"].PropTypes.func}),fetchInfo:u["default"].PropTypes.shape({dataTotalSize:u["default"].PropTypes.number}),exportCSV:u["default"].PropTypes.bool,csvFileName:u["default"].PropTypes.string},C.defaultProps={height:"100%",maxHeight:void 0,striped:!1,bordered:!0,hover:!1,condensed:!1,pagination:!1,searchPlaceholder:void 0,selectRow:{mode:f["default"].ROW_SELECT_NONE,bgColor:f["default"].ROW_SELECT_BG_COLOR,selected:[],onSelect:void 0,onSelectAll:void 0,clickToSelect:!1,hideSelectColumn:!1,clickToSelectAndEditCell:!1},cellEdit:{mode:f["default"].CELL_EDIT_NONE,blurToSave:!1,afterSaveCell:void 0},insertRow:!1,deleteRow:!1,search:!1,multiColumnSearch:!1,columnFilter:!1,trClassName:"",options:{sortName:void 0,sortOrder:f["default"].SORT_DESC,afterTableComplete:void 0,afterDeleteRow:void 0,afterInsertRow:void 0,afterSearch:void 0,afterColumnFilter:void 0,onRowClick:void 0,page:void 0,sizePerPageList:f["default"].SIZE_PER_PAGE_LIST,sizePerPage:void 0,paginationSize:f["default"].PAGINATION_SIZE,onSizePerPageList:void 0,noDataText:void 0,handleConfirmDeleteRow:void 0},fetchInfo:{dataTotalSize:0},exportCSV:!1,csvFileName:void 0},t["default"]=C,e.exports=t["default"]},function(t,r){t.exports=e},function(e,t,r){var n,o;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
!function(){"use strict";function r(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n))e.push(r.apply(null,n));else if("object"===o)for(var a in n)i.call(n,a)&&n[a]&&e.push(a)}}return e.join(" ")}var i={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=r:(n=[],o=function(){return r}.apply(t,n),!(void 0!==o&&(e.exports=o)))}()},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]={SORT_DESC:"desc",SORT_ASC:"asc",SIZE_PER_PAGE:10,NEXT_PAGE:">",LAST_PAGE:">>",PRE_PAGE:"<",FIRST_PAGE:"<<",ROW_SELECT_BG_COLOR:"",ROW_SELECT_NONE:"none",ROW_SELECT_SINGLE:"radio",ROW_SELECT_MULTI:"checkbox",CELL_EDIT_NONE:"none",CELL_EDIT_CLICK:"click",CELL_EDIT_DBCLICK:"dbclick",SIZE_PER_PAGE_LIST:[10,25,30,50],PAGINATION_SIZE:5,NO_DATA_TEXT:"There is no data to display"},e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(6),d=n(c),p=r(4),f=n(p),h=r(7),v=n(h),y=r(3),m=n(y),g=r(8),b=n(g),w=function(e){function t(){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),a(t,[{key:"componentDidMount",value:function(){this.update(this.props.checked)}},{key:"componentWillReceiveProps",value:function(e){this.update(e.checked)}},{key:"update",value:function(e){d["default"].findDOMNode(this).indeterminate="indeterminate"===e}},{key:"render",value:function(){return u["default"].createElement("input",{type:"checkbox",checked:this.props.checked,onChange:this.props.onChange})}}]),t}(u["default"].Component),E=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.selectRowColumnWidth=null}return i(t,e),a(t,[{key:"clearSortCaret",value:function(e,t){for(var r=this.refs.header,n=0;n<r.childElementCount;n++){var o=r.childNodes[n].childNodes[0];o.getElementsByClassName("order").length>0&&o.removeChild(o.getElementsByClassName("order")[0])}this.props.onSort(e,t)}},{key:"componentDidMount",value:function(){if(this.props.sortName){this.clearSortCaret(this.props.sortOrder,this.props.sortName);for(var e=this.refs.header,t=0;t<e.childElementCount;t++){var r=e.childNodes[t].childNodes[0];if(r.getAttribute("data-field")===this.props.sortName){r.appendChild(v["default"].renderSortCaret(this.props.sortOrder));break}}}}},{key:"render",value:function(){var e=(0,m["default"])("table-header"),t=(0,m["default"])("table","table-hover",{"table-bordered":this.props.bordered,"table-condensed":this.props.condensed}),r=this.props.hideSelectColumn?null:this.renderSelectRowHeader();return this._attachClearSortCaretFunc(),u["default"].createElement("div",{ref:"container",className:e},u["default"].createElement("table",{className:t},u["default"].createElement("thead",null,u["default"].createElement("tr",{ref:"header"},r,this.props.children))))}},{key:"renderSelectRowHeader",value:function(){return this.props.rowSelectType==f["default"].ROW_SELECT_SINGLE?u["default"].createElement(b["default"],{width:this.selectRowColumnWidth}):this.props.rowSelectType==f["default"].ROW_SELECT_MULTI?u["default"].createElement(b["default"],{width:this.selectRowColumnWidth},u["default"].createElement(w,{onChange:this.props.onSelectAllRow,checked:this.props.isSelectAll})):null}},{key:"_attachClearSortCaretFunc",value:function(){if(Array.isArray(this.props.children))for(var e=0;e<this.props.children.length;e++)this.props.children[e]=u["default"].cloneElement(this.props.children[e],{key:e,clearSortCaret:this.clearSortCaret.bind(this)});else this.props.children=u["default"].cloneElement(this.props.children,{key:0,clearSortCaret:this.clearSortCaret.bind(this)})}},{key:"fitHeader",value:function(e,t){if(Array.isArray(this.props.children)){var r=this.props.rowSelectType!=f["default"].ROW_SELECT_SINGLE&&this.props.rowSelectType!=f["default"].ROW_SELECT_MULTI||this.props.hideSelectColumn?0:1;1==r&&(this.selectRowColumnWidth=e[0].width);for(var n=0;n<this.props.children.length;n++)this.props.children[n]=u["default"].cloneElement(this.props.children[n],{width:e[n+r].width+"px"})}else this.props.children=u["default"].cloneElement(this.props.children,{width:e[0].width+"px"});this.props.condensed&&(this.refs.container.style.height="36px"),this.forceUpdate(),t&&(this.refs.container.style.marginRight=v["default"].getScrollBarWidth()+"px")}}]),t}(u["default"].Component);E.propTypes={rowSelectType:u["default"].PropTypes.string,onSort:u["default"].PropTypes.func,onSelectAllRow:u["default"].PropTypes.func,sortName:u["default"].PropTypes.string,sortOrder:u["default"].PropTypes.string,hideSelectColumn:u["default"].PropTypes.bool,bordered:u["default"].PropTypes.bool,condensed:u["default"].PropTypes.bool,isSelectAll:u["default"].PropTypes.oneOf([!0,"indeterminate",!1])},E.defaultProps={},t["default"]=E,e.exports=t["default"]},function(e,r){e.exports=t},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),i=n(o),a=r(4),s=n(a),l=r(3),u=n(l);t["default"]={renderSortCaret:function(e){var t=document.createElement("span");t.className="order",e==s["default"].SORT_ASC&&(t.className+=" dropup");var r=document.createElement("span");return r.className="caret",r.style.margin="10px 5px",t.appendChild(r),t},renderReactSortCaret:function(e){var t=(0,u["default"])("order",{dropup:e==s["default"].SORT_ASC});return i["default"].createElement("span",{className:t},i["default"].createElement("span",{className:"caret",style:{margin:"10px 5px"}}))},getScrollBarWidth:function(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var t=document.createElement("div");t.style.position="absolute",t.style.top="0px",t.style.left="0px",t.style.visibility="hidden",t.style.width="200px",t.style.height="150px",t.style.overflow="hidden",t.appendChild(e),document.body.appendChild(t);var r=e.offsetWidth;t.style.overflow="scroll";var n=e.offsetWidth;return r==n&&(n=t.clientWidth),document.body.removeChild(t),r-n}},e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(3),d=(n(c),r(4)),p=(n(d),function(e){function t(){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),a(t,[{key:"render",value:function(){var e={width:parseInt(this.props.width)?this.props.width:35};return u["default"].createElement("th",{style:e},u["default"].createElement("div",{className:"th-inner table-header-column"},this.props.children))}}]),t}(u["default"].Component));t["default"]=p,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(4),d=n(c),p=r(7),f=n(p),h=r(10),v=n(h),y=r(11),m=n(y),g=r(12),b=n(g),w=r(3),E=n(w),_=function(e){return e&&"function"==typeof e},P=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={currEditCell:null},this.editing=!1}return i(t,e),a(t,[{key:"componentDidMount",value:function(){this.adjustBody()}},{key:"componentDidUpdate",value:function(){this.adjustBody()}},{key:"render",value:function(){var e=(0,E["default"])("table-container"),t=(0,E["default"])("table",{"table-striped":this.props.striped,"table-bordered":this.props.bordered,"table-hover":this.props.hover,"table-condensed":this.props.condensed}),r=this._isSelectRowDefined(),n=this.renderTableHeader(r),o=this.props.data.map(function(e,t){var n=this.props.columns.map(function(r,n){var o=e[r.name];if(this.editing&&r.name!==this.props.keyField&&r.editable&&null!=this.state.currEditCell&&this.state.currEditCell.rid==t&&this.state.currEditCell.cid==n){var i=r.format?function(t){return r.format(t,e).replace(/<.*?>/g,"")}:!1;return u["default"].createElement(b["default"],{completeEdit:this.handleCompleteEditCell.bind(this),editable:_(r.editable)?r.editable(o,e,t,n):r.editable,format:r.format?i:!1,key:n,blurToSave:this.props.cellEdit.blurToSave,rowIndex:t,colIndex:n},o)}var a=_(r.className)?r.className(o,e,t,n):r.className;if("undefined"!=typeof r.format){var s=r.format(o,e);return u["default"].isValidElement(s)||(s=u["default"].createElement("div",{dangerouslySetInnerHTML:{__html:s}})),u["default"].createElement(m["default"],{dataAlign:r.align,key:n,className:a,cellEdit:this.props.cellEdit,onEdit:this.handleEditCell.bind(this),width:r.width},s)}return u["default"].createElement(m["default"],{dataAlign:r.align,key:n,className:a,cellEdit:this.props.cellEdit,hidden:r.hidden,onEdit:this.handleEditCell.bind(this),width:r.width},o)},this),o=-1!=this.props.selectedRowKeys.indexOf(e[this.props.keyField]),i=r&&!this.props.selectRow.hideSelectColumn?this.renderSelectRowColumn(o):null,a=_(this.props.trClassName)?this.props.trClassName(e,t):this.props.trClassName;return u["default"].createElement(v["default"],{isSelected:o,key:t,className:a,selectRow:r?this.props.selectRow:void 0,enableCellEdit:this.props.cellEdit.mode!==d["default"].CELL_EDIT_NONE,onRowClick:this.handleRowClick.bind(this),onSelectRow:this.handleSelectRow.bind(this)},i,n)},this);0===o.length&&o.push(u["default"].createElement(v["default"],{key:"##table-empty##"},u["default"].createElement("td",{colSpan:this.props.columns.length+(r?1:0),style:{textAlign:"center"}},this.props.noDataText||d["default"].NO_DATA_TEXT))),this.editing=!1;var i=this.calculateContainerHeight().toString();return u["default"].createElement("div",{ref:"container",className:e,style:{height:i}},u["default"].createElement("table",{ref:"body",className:t},n,u["default"].createElement("tbody",null,o)))}},{key:"renderTableHeader",value:function(e){var t=null;if(e){var r={width:35,minWidth:35};t=this.props.selectRow.hideSelectColumn?null:u["default"].createElement("th",{style:r,key:-1})}var n=this.props.columns.map(function(e,t){var r=null==e.width?e.width:parseInt(e.width),n={display:e.hidden?"none":null,width:r,maxWidth:r},o=e.sort?f["default"].renderReactSortCaret(d["default"].SORT_DESC):null;return u["default"].createElement("th",{style:n,key:t,className:e.className},e.text,o)});return u["default"].createElement("thead",{ref:"header"},u["default"].createElement("tr",null,t,n))}},{key:"handleRowClick",value:function(e){var t,r;this.props.data.forEach(function(n,o){o==e-1&&(t=n[this.props.keyField],r=n)},this),this.props.onRowClick(r)}},{key:"handleSelectRow",value:function(e,t){var r,n;this.props.data.forEach(function(t,o){o==e-1&&(r=t[this.props.keyField],n=t)},this),this.props.onSelectRow(n,t)}},{key:"handleSelectRowColumChange",value:function(e){this.props.selectRow.clickToSelect&&this.props.selectRow.clickToSelectAndEditCell||this.handleSelectRow(e.currentTarget.parentElement.parentElement.rowIndex,e.currentTarget.checked)}},{key:"handleEditCell",value:function(e,t){this.editing=!0,this._isSelectRowDefined()&&(t--,this.props.selectRow.hideSelectColumn&&t++),e--;var r={currEditCell:{rid:e,cid:t}};if(this.props.selectRow.clickToSelectAndEditCell){var n=-1!=this.props.selectedRowKeys.indexOf(this.props.data[e][this.props.keyField]);this.handleSelectRow(e+1,!n)}this.setState(r)}},{key:"cancelEdit",value:function(){var e=this.state.currEditCell;e&&this.handleCompleteEditCell(null,e.rid,e.cid)}},{key:"handleCompleteEditCell",value:function(e,t,r){this.setState({currEditCell:null}),null!=e&&this.props.cellEdit.__onCompleteEdit__(e,t,r)}},{key:"renderSelectRowColumn",value:function(e){return this.props.selectRow.mode==d["default"].ROW_SELECT_SINGLE?u["default"].createElement(m["default"],null,u["default"].createElement("input",{type:"radio",name:"selection",checked:e,onChange:this.handleSelectRowColumChange.bind(this)})):u["default"].createElement(m["default"],null,u["default"].createElement("input",{type:"checkbox",checked:e,onChange:this.handleSelectRowColumChange.bind(this)}))}},{key:"getBodyHeaderDomProp",value:function(){for(var e=this.refs.header.childNodes[0].childNodes,t=[],r=0;r<e.length;r++)t.push({width:e[r].offsetWidth});return t}},{key:"adjustBody",value:function(){this.hardFixHeaderWidth(),this.props.condensed&&(this.refs.body.style.marginTop="-36px"),this.props.maxHeight&&parseInt(this.props.maxHeight)<this.refs.container.offsetHeight&&(this.refs.container.style.height=this.props.maxHeight-42+"px")}},{key:"hardFixHeaderWidth",value:function(){for(var e=this.refs.header.childNodes[0].childNodes,t=0;t<e.length;t++)e[t].style.width=e[t].offsetWidth+"px"}},{key:"calculateContainerHeight",value:function(){return"100%"==this.props.height?this.props.height:parseInt(this.props.height)-42}},{key:"_isSelectRowDefined",value:function(){return this.props.selectRow.mode==d["default"].ROW_SELECT_SINGLE||this.props.selectRow.mode==d["default"].ROW_SELECT_MULTI}}]),t}(u["default"].Component);P.propTypes={height:u["default"].PropTypes.string,data:u["default"].PropTypes.array,columns:u["default"].PropTypes.array,striped:u["default"].PropTypes.bool,bordered:u["default"].PropTypes.bool,hover:u["default"].PropTypes.bool,condensed:u["default"].PropTypes.bool,keyField:u["default"].PropTypes.string,selectedRowKeys:u["default"].PropTypes.array,onRowClick:u["default"].PropTypes.func,onSelectRow:u["default"].PropTypes.func,noDataText:u["default"].PropTypes.string},t["default"]=P,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),l=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},u=r(2),c=n(u),d=r(4),p=(n(d),function(e){function t(){o(this,t),l(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),s(t,[{key:"rowClick",value:function(e){"INPUT"!==e.target.tagName&&(this.props.selectRow&&this.props.selectRow.clickToSelect&&this.props.onSelectRow(e.currentTarget.rowIndex,!this.props.isSelected),this.props.onRowClick&&this.props.onRowClick(e.currentTarget.rowIndex))}},{key:"render",value:function(){var e={style:{backgroundColor:this.props.isSelected?this.props.selectRow.bgColor:null},className:(this.props.isSelected&&this.props.selectRow.className?this.props.selectRow.className:"")+(this.props.className||"")};return this.props.selectRow&&!this.props.enableCellEdit&&(this.props.selectRow.clickToSelect||this.props.selectRow.clickToSelectAndEditCell)||this.props.onRowClick?c["default"].createElement("tr",a({},e,{onClick:this.rowClick.bind(this)}),this.props.children):c["default"].createElement("tr",e,this.props.children)}}]),t}(c["default"].Component));p.propTypes={isSelected:c["default"].PropTypes.bool,enableCellEdit:c["default"].PropTypes.bool,onRowClick:c["default"].PropTypes.func,onSelectRow:c["default"].PropTypes.func},p.defaultProps={onRowClick:void 0},t["default"]=p,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),l=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},u=r(2),c=n(u),d=r(4),p=n(d),f=function(e){function t(e){o(this,t),l(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return i(t,e),s(t,[{key:"handleCellEdit",value:function(e){if(this.props.cellEdit.mode==p["default"].CELL_EDIT_DBCLICK)if(document.selection&&document.selection.empty)document.selection.empty();else if(window.getSelection){var t=window.getSelection();t.removeAllRanges()}this.props.onEdit(e.currentTarget.parentElement.rowIndex,e.currentTarget.cellIndex)}},{key:"render",value:function(){var e=null==this.props.width?this.props.width:parseInt(this.props.width),t={textAlign:this.props.dataAlign,display:this.props.hidden?"none":null,width:e,maxWidth:e},r=this.props.className;this.props.width&&(r+=" col-md-"+e);var n={};return this.props.cellEdit&&(this.props.cellEdit.mode==p["default"].CELL_EDIT_CLICK?n.onClick=this.handleCellEdit.bind(this):this.props.cellEdit.mode==p["default"].CELL_EDIT_DBCLICK&&(n.onDoubleClick=this.handleCellEdit.bind(this))),c["default"].createElement("td",a({style:t,className:r},n),this.props.children)}}]),t}(c["default"].Component);f.propTypes={dataAlign:c["default"].PropTypes.string,hidden:c["default"].PropTypes.bool,className:c["default"].PropTypes.string},f.defaultProps={dataAlign:"left",hidden:!1,className:""},t["default"]=f,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(4),d=(n(c),r(13)),p=n(d),f=r(14),h=n(f),v=r(3),y=n(v),m=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.timeouteClear=0,this.state={shakeEditor:!1}}return i(t,e),a(t,[{key:"handleKeyPress",value:function(e){if(13==e.keyCode){var t="checkbox"==e.currentTarget.type?this._getCheckBoxValue(e):e.currentTarget.value;if(!this.validator(t))return;this.props.completeEdit(t,this.props.rowIndex,this.props.colIndex)}else 27==e.keyCode&&this.props.completeEdit(null,this.props.rowIndex,this.props.colIndex)}},{key:"handleBlur",value:function(e){if(this.props.blurToSave){var t="checkbox"==e.currentTarget.type?this._getCheckBoxValue(e):e.currentTarget.value;if(!this.validator(t))return;this.props.completeEdit(t,this.props.rowIndex,this.props.colIndex)}}},{key:"validator",value:function(e){var t=this;if(t.props.editable.validator){var r=t.props.editable.validator(e);if(r!==!0){t.refs.notifier.notice("error",r,"Pressed ESC can cancel");var n=t.refs.inputRef;return t.clearTimeout(),t.setState({shakeEditor:!0}),t.timeouteClear=setTimeout(function(){t.setState({shakeEditor:!1})},300),n.focus(),!1}}return!0}},{key:"clearTimeout",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){0!=this.timeouteClear&&(clearTimeout(this.timeouteClear),this.timeouteClear=0)})},{key:"componentDidMount",value:function(){var e=this.refs.inputRef;e.focus()}},{key:"componentWillUnmount",value:function(){this.clearTimeout()}},{key:"render",value:function(){var e=this.props.editable,t=this.props.format,r={ref:"inputRef",onKeyDown:this.handleKeyPress.bind(this),onBlur:this.handleBlur.bind(this)};e.placeholder&&(r.placeholder=e.placeholder);var n=(0,y["default"])({animated:this.state.shakeEditor,shake:this.state.shakeEditor});return u["default"].createElement("td",{ref:"td",style:{position:"relative"}},(0,p["default"])(e,r,t,n,this.props.children||""),u["default"].createElement(h["default"],{ref:"notifier"}))}},{key:"_getCheckBoxValue",value:function(e){var t="",r=e.currentTarget.value.split(":");return t=e.currentTarget.checked?r[0]:r[1]}}]),t}(u["default"].Component);m.propTypes={completeEdit:u["default"].PropTypes.func,rowIndex:u["default"].PropTypes.number,colIndex:u["default"].PropTypes.number,blurToSave:u["default"].PropTypes.bool},t["default"]=m,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i=r(2),a=n(i),s=function(e,t,r,n,i){if(e===!0||"string"==typeof e){var s=e===!0?"text":e;return a["default"].createElement("input",o({},t,{type:s,defaultValue:i,className:(n||"")+" form-control editor edit-text"}))}if(!e){var s=e===!0?"text":e;return a["default"].createElement("input",o({},t,{type:s,defaultValue:i,disabled:"disabled",className:(n||"")+" form-control editor edit-text"}))}if(e.type){if(e.style&&(t.style=e.style),t.className=(n||"")+" form-control editor edit-"+e.type+(e.className?" "+e.className:""),"select"===e.type){var l=[],u=e.options.values;if(Array.isArray(u)){var c;l=u.map(function(e,t){return c=r?r(e):e,a["default"].createElement("option",{key:"option"+t,value:e},c)})}return a["default"].createElement("select",o({},t,{defaultValue:i}),l)}if("textarea"===e.type){e.cols&&(t.cols=e.cols),e.rows&&(t.rows=e.rows);var d=t.onKeyDown,p=null;return d&&(t.onKeyDown=function(e){13!=e.keyCode&&d(e)},p=a["default"].createElement("butto",{className:"btn btn-info btn-xs textarea-save-btn",onClick:d},"save")),a["default"].createElement("div",null,a["default"].createElement("textarea",o({},t,{defaultValue:i})),p)}if("checkbox"===e.type){var f="true:false";e.options&&e.options.values&&(f=e.options.values),t.className=t.className.replace("form-control",""),t.className+=" checkbox pull-right";var h=i&&i.toString()==f.split(":")[0]?!0:!1;return a["default"].createElement("input",o({},t,{type:"checkbox",value:f,defaultChecked:h}))}return a["default"].createElement("input",o({},t,{type:s,defaultValue:i}))}return a["default"].createElement("input",o({},t,{type:"text",className:(n||"")+" form-control editor edit-text"}))};t["default"]=s,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(4),d=(n(c),r(15)),p=n(d),f=p["default"].ToastContainer,h=u["default"].createFactory(p["default"].ToastMessage.animation),v=function(e){function t(){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),a(t,[{key:"notice",value:function(e,t,r){this.refs.toastr[e](t,r,{mode:"single",timeOut:5e3,extendedTimeOut:1e3,showAnimation:"animated  bounceIn",hideAnimation:"animated bounceOut"})}},{key:"render",value:function(){return u["default"].createElement(f,{ref:"toastr",toastMessageFactory:h,id:"toast-container",className:"toast-top-right"})}}]),t}(u["default"].Component);t["default"]=v,e.exports=t["default"]},function(e,t,r){"use strict";t.ToastContainer=r(16),t.ToastMessage=r(23)},function(e,t,r){"use strict";function n(){}var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i=r(2),a=r(17),s=i.createFactory(r(23));e.exports=i.createClass({displayName:"ToastContainer",error:function(e,t,r){this._notify(this.props.toastType.error,e,t,r)},info:function(e,t,r){this._notify(this.props.toastType.info,e,t,r)},success:function(e,t,r){this._notify(this.props.toastType.success,e,t,r)},warning:function(e,t,r){this._notify(this.props.toastType.warning,e,t,r)},clear:function(){var e,t=this.refs;for(e in t)t[e].hideToast(!1)},getDefaultProps:function(){return{toastType:{error:"error",info:"info",success:"success",warning:"warning"},id:"toast-container",toastMessageFactory:s,preventDuplicates:!1,newestOnTop:!0,onClick:n}},getInitialState:function(){return{toasts:[],toastId:0,previousMessage:null}},render:function(){return this._render(this.props,this.state)},_notify:function(e,t,r){var n=this,o=arguments.length<=3||void 0===arguments[3]?{}:arguments[3],i=this.props,s=this.state;if(!i.preventDuplicates||s.previousMessage!==t){var l=s.toastId++,u=l,c=a(o,{$merge:{type:e,title:r,message:t,toastId:u,key:l,ref:"toasts__"+l,handleOnClick:function(e){return"function"==typeof o.handleOnClick&&o.handleOnClick(),n._handle_toast_on_click(e)},handleRemove:this._handle_toast_remove}}),d={};d[""+(i.newestOnTop?"$unshift":"$push")]=[c];var p=a(s,{toasts:d,previousMessage:{$set:t}});this.setState(p)}},_handle_toast_on_click:function(e){this.props.onClick(e),e.defaultPrevented||(e.preventDefault(),e.stopPropagation())},_handle_toast_remove:function(e){var t=this,r=this.state;r.toasts[""+(this.props.newestOnTop?"reduceRight":"reduce")](function(n,o,i){return n||o.toastId!==e?!1:(t.setState(a(r,{toasts:{$splice:[[i,1]]}})),!0)},!1)},_render:function(e,t){return i.createElement("div",o({},e,{"aria-live":"polite",role:"alert"}),t.toasts.map(function(t){return e.toastMessageFactory(t)}))}})},function(e,t,r){e.exports=r(18)},function(e,t,r){(function(t){"use strict";function n(e){return Array.isArray(e)?e.concat():e&&"object"==typeof e?a(new e.constructor,e):e}function o(e,r,n){Array.isArray(e)?void 0:"production"!==t.env.NODE_ENV?l(!1,"update(): expected target of %s to be an array; got %s.",n,e):l(!1);var o=r[n];Array.isArray(o)?void 0:"production"!==t.env.NODE_ENV?l(!1,"update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?",n,o):l(!1)}function i(e,r){if("object"!=typeof r?"production"!==t.env.NODE_ENV?l(!1,"update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?",y.join(", "),f):l(!1):void 0,u.call(r,f))return 1!==Object.keys(r).length?"production"!==t.env.NODE_ENV?l(!1,"Cannot have more than one key in an object with %s",f):l(!1):void 0,r[f];var s=n(e);if(u.call(r,h)){var g=r[h];g&&"object"==typeof g?void 0:"production"!==t.env.NODE_ENV?l(!1,"update(): %s expects a spec of type 'object'; got %s",h,g):l(!1),s&&"object"==typeof s?void 0:"production"!==t.env.NODE_ENV?l(!1,"update(): %s expects a target of type 'object'; got %s",h,s):l(!1),
a(s,r[h])}u.call(r,c)&&(o(e,r,c),r[c].forEach(function(e){s.push(e)})),u.call(r,d)&&(o(e,r,d),r[d].forEach(function(e){s.unshift(e)})),u.call(r,p)&&(Array.isArray(e)?void 0:"production"!==t.env.NODE_ENV?l(!1,"Expected %s target to be an array; got %s",p,e):l(!1),Array.isArray(r[p])?void 0:"production"!==t.env.NODE_ENV?l(!1,"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",p,r[p]):l(!1),r[p].forEach(function(e){Array.isArray(e)?void 0:"production"!==t.env.NODE_ENV?l(!1,"update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?",p,r[p]):l(!1),s.splice.apply(s,e)})),u.call(r,v)&&("function"!=typeof r[v]?"production"!==t.env.NODE_ENV?l(!1,"update(): expected spec of %s to be a function; got %s.",v,r[v]):l(!1):void 0,s=r[v](s));for(var b in r)m.hasOwnProperty(b)&&m[b]||(s[b]=i(e[b],r[b]));return s}var a=r(20),s=r(21),l=r(22),u={}.hasOwnProperty,c=s({$push:null}),d=s({$unshift:null}),p=s({$splice:null}),f=s({$set:null}),h=s({$merge:null}),v=s({$apply:null}),y=[c,d,p,f,h,v],m={};y.forEach(function(e){m[e]=!0}),e.exports=i}).call(t,r(19))},function(e,t){function r(){u=!1,a.length?l=a.concat(l):c=-1,l.length&&n()}function n(){if(!u){var e=setTimeout(r);u=!0;for(var t=l.length;t;){for(a=l,l=[];++c<t;)a&&a[c].run();c=-1,t=l.length}a=null,u=!1,clearTimeout(e)}}function o(e,t){this.fun=e,this.array=t}function i(){}var a,s=e.exports={},l=[],u=!1,c=-1;s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new o(e,t)),1!==l.length||u||setTimeout(n,0)},o.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=i,s.addListener=i,s.once=i,s.off=i,s.removeListener=i,s.removeAllListeners=i,s.emit=i,s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t){"use strict";function r(e,t){if(null==e)throw new TypeError("Object.assign target cannot be null or undefined");for(var r=Object(e),n=Object.prototype.hasOwnProperty,o=1;o<arguments.length;o++){var i=arguments[o];if(null!=i){var a=Object(i);for(var s in a)n.call(a,s)&&(r[s]=a[s])}}return r}e.exports=r},function(e,t){"use strict";var r=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};e.exports=r},function(e,t,r){(function(t){"use strict";function r(e,r,n,o,i,a,s,l){if("production"!==t.env.NODE_ENV&&void 0===r)throw new Error("invariant requires an error message argument");if(!e){var u;if(void 0===r)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,s,l],d=0;u=new Error(r.replace(/%s/g,function(){return c[d++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}e.exports=r}).call(t,r(19))},function(e,t,r){"use strict";function n(){}var o=r(2),i=r(17),a=r(3),s={displayName:"ToastMessage",getDefaultProps:function(){var e={error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"};return{className:"toast",iconClassNames:e,titleClassName:"toast-title",messageClassName:"toast-message",tapToDismiss:!0,closeButton:!1}},handleOnClick:function(e){var t=this.props;t.handleOnClick(e),t.tapToDismiss&&this.hideToast(!0)},_handle_close_button_click:function(e){e.stopPropagation(),this.hideToast(!0)},_handle_remove:function(){var e=this.props;e.handleRemove(e.toastId)},_render_close_button:function(e){return e.closeButton?o.createElement("button",{className:"toast-close-button",role:"button",onClick:this._handle_close_button_click,dangerouslySetInnerHTML:{__html:"&times;"}}):!1},_render_title_element:function(e){return e.title?o.createElement("div",{className:e.titleClassName},e.title):!1},_render_message_element:function(e){return e.message?o.createElement("div",{className:e.messageClassName},e.message):!1},render:function(){var e=this.props,t=e.iconClassName||e.iconClassNames[e.type],r={};return r[e.className]=!0,r[t]=!0,o.createElement("div",{className:a(r),style:e.style||{},onClick:this.handleOnClick,onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave},this._render_close_button(e),this._render_title_element(e),this._render_message_element(e))}},l=o.createClass(i(s,{displayName:{$set:"ToastMessage.animation"},mixins:{$set:[r(24)]}})),u=o.createClass(i(s,{displayName:{$set:"ToastMessage.jQuery"},mixins:{$set:[r(29)]}}));s.handleMouseEnter=n,s.handleMouseLeave=n,s.hideToast=n;var c=e.exports=o.createClass(s);c.animation=l,c.jQuery=u},function(e,t,r){"use strict";var n=r(25),o=r(27),i=r(6),a=17,s=Object.prototype.toString;e.exports={getDefaultProps:function(){return{transition:null,showAnimation:"animated bounceIn",hideAnimation:"animated bounceOut",timeOut:5e3,extendedTimeOut:1e3}},componentWillMount:function(){this.classNameQueue=[],this.isHiding=!1,this.intervalId=null},componentDidMount:function(){var e=this,t=this.props;this._show(t);var r=function a(){e.isHiding&&(e._set_is_hiding(!1),o.removeEndEventListener(n,a),e._handle_remove())},n=i.findDOMNode(this);o.addEndEventListener(n,r),0<t.timeOut&&this._set_interval_id(setTimeout(this.hideToast,t.timeOut))},componentWillUnmount:function(){this.intervalId&&clearTimeout(this.intervalId)},_set_transition:function(e){var t=e?"leave":"enter",r=i.findDOMNode(this),a=this.props.transition+"-"+t,s=a+"-active",l=function u(e){e&&e.target!==r||(n.removeClass(r,a),n.removeClass(r,s),o.removeEndEventListener(r,u))};o.addEndEventListener(r,l),n.addClass(r,a),this._queue_class(s)},_clear_transition:function(e){var t=i.findDOMNode(this),r=e?"leave":"enter",o=this.props.transition+"-"+r,a=o+"-active";n.removeClass(t,o),n.removeClass(t,a)},_set_animation:function(e){var t=i.findDOMNode(this),r=this._get_animation_classes(e),a=function s(e){e&&e.target!==t||(r.forEach(function(e){n.removeClass(t,e)}),o.removeEndEventListener(t,s))};o.addEndEventListener(t,a),r.forEach(function(e){n.addClass(t,e)})},_get_animation_classes:function(e){var t=this.props,r=e?t.hideAnimation:t.showAnimation;return"[object Array]"===s.call(r)?r:"string"==typeof r?r.split(" "):void 0},_clear_animation:function(e){var t=this,r=this._get_animation_classes(e);r.forEach(function(e){n.removeClass(i.findDOMNode(t),e)})},_queue_class:function(e){this.classNameQueue.push(e),this.timeout||(this.timeout=setTimeout(this._flush_class_name_queue,a))},_flush_class_name_queue:function(){this.isMounted()&&this.classNameQueue.forEach(n.addClass.bind(n,i.findDOMNode(this))),this.classNameQueue.length=0,this.timeout=null},_show:function(){var e=this.props;e.transition?this._set_transition():e.showAnimation&&this._set_animation()},handleMouseEnter:function(){if(clearTimeout(this.intervalId),this._set_interval_id(null),this.isHiding){this._set_is_hiding(!1);var e=this.props;e.hideAnimation?this._clear_animation(!0):e.transition&&this._clear_transition(!0)}},handleMouseLeave:function(){var e=this.props;!this.isHiding&&(0<e.timeOut||0<e.extendedTimeOut)&&this._set_interval_id(setTimeout(this.hideToast,e.extendedTimeOut))},hideToast:function(e){var t=this.props;this.isHiding||null==this.intervalId&&!e||(this._set_is_hiding(!0),t.transition?this._set_transition(!0):t.hideAnimation?this._set_animation(!0):this._handle_remove())},_set_interval_id:function(e){this.intervalId=e},_set_is_hiding:function(e){this.isHiding=e}}},function(e,t,r){(function(t){"use strict";var n=r(26),o={addClass:function(e,r){return/\s/.test(r)?"production"!==t.env.NODE_ENV?n(!1,'CSSCore.addClass takes only a single class name. "%s" contains multiple classes.',r):n(!1):void 0,r&&(e.classList?e.classList.add(r):o.hasClass(e,r)||(e.className=e.className+" "+r)),e},removeClass:function(e,r){return/\s/.test(r)?"production"!==t.env.NODE_ENV?n(!1,'CSSCore.removeClass takes only a single class name. "%s" contains multiple classes.',r):n(!1):void 0,r&&(e.classList?e.classList.remove(r):o.hasClass(e,r)&&(e.className=e.className.replace(new RegExp("(^|\\s)"+r+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,""))),e},conditionClass:function(e,t,r){return(r?o.addClass:o.removeClass)(e,t)},hasClass:function(e,r){return/\s/.test(r)?"production"!==t.env.NODE_ENV?n(!1,"CSS.hasClass takes only a single class name."):n(!1):void 0,e.classList?!!r&&e.classList.contains(r):(" "+e.className+" ").indexOf(" "+r+" ")>-1}};e.exports=o}).call(t,r(19))},function(e,t,r){(function(t){"use strict";function r(e,r,n,o,i,a,s,l){if("production"!==t.env.NODE_ENV&&void 0===r)throw new Error("invariant requires an error message argument");if(!e){var u;if(void 0===r)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,s,l],d=0;u=new Error(r.replace(/%s/g,function(){return c[d++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}e.exports=r}).call(t,r(19))},function(e,t,r){"use strict";function n(){var e=document.createElement("div"),t=e.style;"AnimationEvent"in window||delete s.animationend.animation,"TransitionEvent"in window||delete s.transitionend.transition;for(var r in s){var n=s[r];for(var o in n)if(o in t){l.push(n[o]);break}}}function o(e,t,r){e.addEventListener(t,r,!1)}function i(e,t,r){e.removeEventListener(t,r,!1)}var a=r(28),s={transitionend:{transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"mozTransitionEnd",OTransition:"oTransitionEnd",msTransition:"MSTransitionEnd"},animationend:{animation:"animationend",WebkitAnimation:"webkitAnimationEnd",MozAnimation:"mozAnimationEnd",OAnimation:"oAnimationEnd",msAnimation:"MSAnimationEnd"}},l=[];a.canUseDOM&&n();var u={addEndEventListener:function(e,t){return 0===l.length?void window.setTimeout(t,0):void l.forEach(function(r){o(e,r,t)})},removeEndEventListener:function(e,t){0!==l.length&&l.forEach(function(r){i(e,r,t)})}};e.exports=u},function(e,t){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),n={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=n},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){e[t.showMethod]({duration:t.showDuration,easing:t.showEasing})}var i=r(6),a=n(i);e.exports={getDefaultProps:function(){return{style:{display:"none"},showMethod:"fadeIn",showDuration:300,showEasing:"swing",hideMethod:"fadeOut",hideDuration:1e3,hideEasing:"swing",timeOut:5e3,extendedTimeOut:1e3}},getInitialState:function(){return{intervalId:null,isHiding:!1}},componentDidMount:function(){var e=this.props;o(this._get_$_node(),e),0<e.timeOut&&this._set_interval_id(setTimeout(this.hideToast,e.timeOut))},handleMouseEnter:function(){clearTimeout(this.state.intervalId),this._set_interval_id(null),this._set_is_hiding(!1),o(this._get_$_node().stop(!0,!0),this.props)},handleMouseLeave:function(){var e=this.props;!this.state.isHiding&&(0<e.timeOut||0<e.extendedTimeOut)&&this._set_interval_id(setTimeout(this.hideToast,e.extendedTimeOut))},hideToast:function(e){var t=this.state,r=this.props;t.isHiding||null==t.intervalId&&!e||(this.setState({isHiding:!0}),this._get_$_node()[r.hideMethod]({duration:r.hideDuration,easing:r.hideEasing,complete:this._handle_remove}))},_get_$_node:function(){return jQuery(a["default"].findDOMNode(this))},_set_interval_id:function(e){this.setState({intervalId:e})},_set_is_hiding:function(e){this.setState({isHiding:e})}}},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(31),d=n(c),p=r(4),f=n(p),h=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.state={currentPage:this.props.currPage,sizePerPage:this.props.sizePerPage}}return i(t,e),a(t,[{key:"changePage",value:function(e){e=e==f["default"].PRE_PAGE?this.state.currentPage-1<1?1:this.state.currentPage-1:e==f["default"].NEXT_PAGE?this.state.currentPage+1>this.totalPages?this.totalPages:this.state.currentPage+1:e==f["default"].LAST_PAGE?this.totalPages:e==f["default"].FIRST_PAGE?1:parseInt(e),e!=this.state.currentPage&&(this.setState({currentPage:e}),this.props.changePage(e,this.state.sizePerPage))}},{key:"componentWillReceiveProps",value:function(e){this.props.remote&&(e.currPage||e.sizePerPage)&&this.setState({currentPage:e.currPage,sizePerPage:e.sizePerPage})}},{key:"changeSizePerPage",value:function(e){e.preventDefault();var t=parseInt(e.currentTarget.text);t!=this.state.sizePerPage&&(this.totalPages=Math.ceil(this.props.dataSize/t),this.state.currentPage>this.totalPages&&(this.state.currentPage=this.totalPages),this.setState({sizePerPage:t,currentPage:this.state.currentPage}),this.props.changePage(this.state.currentPage,t),this.props.onSizePerPageList&&this.props.onSizePerPageList(t))}},{key:"render",value:function(){var e=this;this.totalPages=Math.ceil(this.props.dataSize/this.state.sizePerPage);var t=this.makePage(),r={"float":"right",marginTop:"0px"},n=this.props.sizePerPageList.map(function(t){return u["default"].createElement("li",{key:t,role:"presentation"},u["default"].createElement("a",{role:"menuitem",tabIndex:"-1",href:"#",onClick:e.changeSizePerPage.bind(e)},t))});return u["default"].createElement("div",{className:"row",style:{marginTop:15}},u["default"].createElement("div",{className:"col-md-6"},this.props.sizePerPageList.length>1?u["default"].createElement("div",{className:"dropdown"},u["default"].createElement("button",{className:"btn btn-default dropdown-toggle",type:"button",id:"pageDropDown","data-toggle":"dropdown","aria-expanded":"true"},this.state.sizePerPage,u["default"].createElement("span",null," ",u["default"].createElement("span",{className:"caret"}))),u["default"].createElement("ul",{className:"dropdown-menu",role:"menu","aria-labelledby":"pageDropDown"},n)):""),u["default"].createElement("div",{className:"col-md-6"},u["default"].createElement("ul",{className:"pagination",style:r},t)))}},{key:"makePage",value:function(){var e=this.getPages();return e.map(function(e){var t=e===this.state.currentPage,r=!1;return 1!=this.state.currentPage||e!==f["default"].FIRST_PAGE&&e!==f["default"].PRE_PAGE||(r=!0),this.state.currentPage!=this.totalPages||e!==f["default"].NEXT_PAGE&&e!==f["default"].LAST_PAGE||(r=!0),u["default"].createElement(d["default"],{changePage:this.changePage.bind(this),active:t,disable:r,key:e},e)},this)}},{key:"getPages",value:function(){var e=1,t=this.totalPages;e=Math.max(this.state.currentPage-Math.floor(this.props.paginationSize/2),1),t=e+this.props.paginationSize-1,t>this.totalPages&&(t=this.totalPages,e=t-this.props.paginationSize+1);for(var r=[f["default"].FIRST_PAGE,f["default"].PRE_PAGE],n=e;t>=n;n++)n>0&&r.push(n);return r.push(f["default"].NEXT_PAGE),r.push(f["default"].LAST_PAGE),r}},{key:"getCurrentPage",value:function(){return this.state.currentPage}},{key:"getSizePerPage",value:function(){return this.state.sizePerPage}}]),t}(u["default"].Component);h.propTypes={currPage:u["default"].PropTypes.number,sizePerPage:u["default"].PropTypes.number,dataSize:u["default"].PropTypes.number,changePage:u["default"].PropTypes.func,sizePerPageList:u["default"].PropTypes.array,paginationSize:u["default"].PropTypes.number,remote:u["default"].PropTypes.bool,onSizePerPageList:u["default"].PropTypes.func},h.defaultProps={sizePerPage:f["default"].SIZE_PER_PAGE},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(3),d=n(c),p=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e)}return i(t,e),a(t,[{key:"pageBtnClick",value:function(e){e.preventDefault(),this.props.changePage(e.currentTarget.text)}},{key:"render",value:function(){var e=(0,d["default"])({active:this.props.active,disabled:this.props.disable});return u["default"].createElement("li",{className:e},u["default"].createElement("a",{href:"#",onClick:this.pageBtnClick.bind(this)},this.props.children))}}]),t}(u["default"].Component);p.propTypes={changePage:u["default"].PropTypes.func,active:u["default"].PropTypes.bool,disable:u["default"].PropTypes.bool},t["default"]=p,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(3),d=n(c),p=r(4),f=(n(p),r(13)),h=n(f),v=r(14),y=n(v),m=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.timeouteClear=0,this.state={isInsertRowTrigger:!0,validateState:null,shakeEditor:!1}}return i(t,e),a(t,[{key:"componentWillUnmount",value:function(){this.clearTimeout()}},{key:"clearTimeout",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){this.timeouteClear&&(clearTimeout(this.timeouteClear),this.timeouteClear=0)})},{key:"checkAndParseForm",value:function(){var e,t,r=this,n={},o=!0,i={};return this.props.columns.forEach(function(r,a){if(r.autoValue)e="function"==typeof r.autoValue?r.autoValue():"autovalue-"+(new Date).getTime();else{var s=this.refs[r.field+a];if(e=s.value,r.editable&&"checkbox"==r.editable.type){var l=s.value.split(":");e=s.checked?l[0]:l[1]}r.editable&&r.editable.validator&&(t=r.editable.validator(e),t!==!0&&(o=!1,i[r.field]=t))}n[r.field]=e},this),o?n:(r.clearTimeout(),this.setState({validateState:i,shakeEditor:!0}),r.refs.notifier.notice("error","Form validate errors, please checking!","Pressed ESC can cancel"),r.timeouteClear=setTimeout(function(){r.setState({shakeEditor:!1})},300),null)}},{key:"handleSaveBtnClick",value:function(e){var t=this.checkAndParseForm();if(t){var r=this.props.onAddRow(t);if(r){var n=this;n.refs.notifier.notice("error",r,"Pressed ESC can cancel"),n.clearTimeout(),n.setState({shakeEditor:!0,validateState:"this is hack for prevent bootstrap modal hide"}),n.timeouteClear=setTimeout(function(){n.setState({shakeEditor:!1})},300)}else this.setState({validateState:null,shakeEditor:!1}),this.refs.form.reset()}}},{key:"handleDropRowBtnClick",value:function(e){this.props.onDropRow()}},{key:"handleCloseBtn",value:function(e){this.refs.warning.style.display="none"}},{key:"handleKeyUp",value:function(e){this.props.onSearch(e.currentTarget.value)}},{key:"handleExportCSV",value:function(){this.props.onExportCSV()}},{key:"render",value:function(){var e="bs-table-modal-sm"+(new Date).getTime(),t=this.props.enableInsert?u["default"].createElement("button",{type:"button",onClick:this.props.onAddRowBegin,className:"btn btn-info","data-toggle":"modal","data-target":"."+e},u["default"].createElement("i",{className:"glyphicon glyphicon-plus"})," New"):null,r=this.props.enableDelete?u["default"].createElement("button",{type:"button",className:"btn btn-warning","data-toggle":"tooltip","data-placement":"right",title:"Drop selected row",onClick:this.handleDropRowBtnClick.bind(this)},u["default"].createElement("i",{className:"glyphicon glyphicon-trash"})," Delete"):null,n=this.props.enableSearch?u["default"].createElement("div",{className:"form-group form-group-sm"},u["default"].createElement("input",{className:"form-control",type:"text",placeholder:this.props.searchPlaceholder?this.props.searchPlaceholder:"Search",onKeyUp:this.handleKeyUp.bind(this)})):null,o=this.props.enableInsert?this.renderInsertRowModal(e):null,i=this.props.enableExportCSV?u["default"].createElement("button",{type:"button",className:"btn btn-success",onClick:this.handleExportCSV.bind(this)},u["default"].createElement("i",{className:"glyphicon glyphicon-export"})," Export to CSV"):null;return u["default"].createElement("div",{className:"row"},u["default"].createElement("div",{className:"col-xs-9"},u["default"].createElement("div",{className:"btn-group btn-group-sm",role:"group"},i,t,r)),u["default"].createElement("div",{className:"col-xs-3"},n),u["default"].createElement(y["default"],{ref:"notifier"}),o)}},{key:"renderInsertRowModal",value:function(e){var t=this.state.validateState||{},r=this.props.columns.map(function(e,r){var n=e.editable,o=e.format,i={ref:e.field+r,placeholder:n.placeholder?n.placeholder:e.name};if(e.autoValue)return null;var a=t[e.field]?u["default"].createElement("span",{className:"help-block bg-danger"},t[e.field]):null;return u["default"].createElement("div",{className:"form-group",key:e.field},u["default"].createElement("label",null,e.name),(0,h["default"])(n,i,o,""),a)}),n=(0,d["default"])("modal","fade",e,{"in":this.state.shakeEditor||this.state.validateState}),o=(0,d["default"])("modal-dialog","modal-sm",{animated:this.state.shakeEditor,shake:this.state.shakeEditor});return u["default"].createElement("div",{ref:"modal",className:n,tabIndex:"-1",role:"dialog"},u["default"].createElement("div",{className:o},u["default"].createElement("div",{className:"modal-content"},u["default"].createElement("div",{className:"modal-header"},u["default"].createElement("button",{type:"button",className:"close","data-dismiss":"modal","aria-label":"Close"},u["default"].createElement("span",{"aria-hidden":"true"},"×")),u["default"].createElement("h4",{className:"modal-title"},"New Record")),u["default"].createElement("div",{className:"modal-body"},u["default"].createElement("form",{ref:"form"},r)),u["default"].createElement("div",{className:"modal-footer"},u["default"].createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal"},"Close"),u["default"].createElement("button",{type:"button",className:"btn btn-info",onClick:this.handleSaveBtnClick.bind(this)},"Save")))))}}]),t}(u["default"].Component);m.propTypes={onAddRow:u["default"].PropTypes.func,onDropRow:u["default"].PropTypes.func,enableInsert:u["default"].PropTypes.bool,enableDelete:u["default"].PropTypes.bool,enableSearch:u["default"].PropTypes.bool,columns:u["default"].PropTypes.array,searchPlaceholder:u["default"].PropTypes.string},m.defaultProps={enableInsert:!1,enableDelete:!1,enableSearch:!1},t["default"]=m,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(4),d=n(c),p=r(3),f=n(p),h=function(e){function t(e){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.filterObj={}}return i(t,e),a(t,[{key:"handleKeyUp",value:function(e){""===e.currentTarget.value.trim()?delete this.filterObj[e.currentTarget.name]:this.filterObj[e.currentTarget.name]=e.currentTarget.value,this.props.onFilter(this.filterObj)}},{key:"render",value:function(){var e=(0,f["default"])("table",{"table-striped":this.props.striped,"table-condensed":this.props.condensed}),t=null;if(this.props.rowSelectType==d["default"].ROW_SELECT_SINGLE||this.props.rowSelectType==d["default"].ROW_SELECT_MULTI){var r={width:35,paddingLeft:0,paddingRight:0};t=u["default"].createElement("th",{style:r,key:-1},"Filter")}var n=this.props.columns.map(function(e){var t={display:e.hidden?"none":null,width:e.width};return u["default"].createElement("th",{key:e.name,style:t},u["default"].createElement("div",{className:"th-inner table-header-column"},u["default"].createElement("input",{size:"10",type:"text",placeholder:e.name,name:e.name,onKeyUp:this.handleKeyUp.bind(this)})))},this);return u["default"].createElement("table",{className:e,style:{marginTop:5}},u["default"].createElement("thead",null,u["default"].createElement("tr",{style:{borderBottomStyle:"hidden"}},t,n)))}}]),t}(u["default"].Component);h.propTypes={columns:u["default"].PropTypes.array,rowSelectType:u["default"].PropTypes.string,onFilter:u["default"].PropTypes.func},t["default"]=h,e.exports=t["default"]},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t,r,n){return r=r.toLowerCase(),e.sort(function(e,o){return n?n(e,o,r):r==c["default"].SORT_DESC?e[t]>o[t]?-1:e[t]<o[t]?1:0:e[t]<o[t]?-1:e[t]>o[t]?1:0}),e}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),l=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},u=r(4),c=n(u),d=r(35).EventEmitter,p=function(e){function t(e){o(this,t),l(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this.data=e}return i(t,e),s(t,[{key:"setData",value:function(e){this.emit("change",e)}},{key:"clear",value:function(){this.data=null}},{key:"getData",value:function(){return this.data}}]),t}(d);t.TableDataSet=p;var f=function(){function e(t){o(this,e),this.data=t,this.customSortFuncMap=null,this.filteredData=null,this.isOnFilter=!1,this.filterObj=null,this.searchText=null,this.sortObj=null,this.pageObj={},this.selected=[],this.multiColumnSearch=!1,this.remote=!1}return s(e,[{key:"setProps",value:function(e){this.keyField=e.keyField,this.enablePagination=e.isPagination,this.customSortFuncMap=e.customSortFuncMap,this.remote=e.remote,this.multiColumnSearch=e.multiColumnSearch}},{key:"setData",value:function(e){this.data=e,this.isOnFilter&&(null!==this.filterObj&&this.filter(this.filterObj),null!==this.searchText&&this.search(this.searchText)),this.sortObj&&this.sort(this.sortObj.order,this.sortObj.sortField)}},{key:"setSelectedRowKey",value:function(e){this.selected=e}},{key:"getSelectedRowKeys",value:function(){return this.selected}},{key:"getCurrentDisplayData",value:function(){return this.isOnFilter?this.filteredData:this.data}},{key:"sort",value:function(e,t){this.sortObj={order:e,sortField:t};var r=this.getCurrentDisplayData(),n=this.customSortFuncMap[t];return r=a(r,t,e,n),this}},{key:"page",value:function(e,t){return this.pageObj.end=e*t-1,this.pageObj.start=this.pageObj.end-(t-1),this}},{key:"edit",value:function(e,t,r){var n=this.getCurrentDisplayData(),o=void 0;return this.enablePagination?(n[this.pageObj.start+t][r]=e,o=n[this.pageObj.start+t][this.keyField]):(n[t][r]=e,o=n[t][this.keyField]),this.isOnFilter&&this.data.forEach(function(t){t[this.keyField]===o&&(t[r]=e)},this),this}},{key:"add",value:function(e){if(!e[this.keyField]||""===e[this.keyField].toString())throw this.keyField+" can't be empty value.";var t=this.getCurrentDisplayData();t.forEach(function(t){if(t[this.keyField].toString()===e[this.keyField].toString())throw this.keyField+" "+e[this.keyField]+" already exists"},this),t.push(e),this.isOnFilter&&this.data.push(e)}},{key:"remove",value:function(e){var t=this.getCurrentDisplayData(),r=t.filter(function(t){return-1==e.indexOf(t[this.keyField])},this);this.isOnFilter?(this.data=this.data.filter(function(t){return-1==e.indexOf(t[this.keyField])},this),this.filteredData=r):this.data=r}},{key:"filter",value:function(e){0==Object.keys(e).length?(this.filteredData=null,this.isOnFilter=!1,this.filterObj=null):(this.filterObj=e,this.filteredData=this.data.filter(function(t){var r=!0;for(var n in e)if(-1==t[n].toString().toLowerCase().indexOf(e[n].toLowerCase())){r=!1;break}return r}),this.isOnFilter=!0);
}},{key:"search",value:function(e){if(""===e.trim())this.filteredData=null,this.isOnFilter=!1,this.searchText=null;else{this.searchText=e;var t=[];this.filteredData=this.data.filter(function(r){var n=!1;this.multiColumnSearch?t=e.split(" "):t.push(e);for(var o in r)if(r[o]&&(t.forEach(function(e){-1!==r[o].toString().toLowerCase().indexOf(e.toLowerCase())&&(n=!0)}),n))break;return n},this),this.isOnFilter=!0}}},{key:"getDataIgnoringPagination",value:function(){var e=this.getCurrentDisplayData();return e}},{key:"get",value:function(){var e=this.getCurrentDisplayData();if(0==e.length)return e;if(this.remote||!this.enablePagination)return e;for(var t=[],r=this.pageObj.start;r<=this.pageObj.end&&(t.push(e[r]),r+1!=e.length);r++);return t}},{key:"getKeyField",value:function(){return this.keyField}},{key:"getDataNum",value:function(){return this.getCurrentDisplayData().length}},{key:"isChangedPage",value:function(){return this.pageObj.start&&this.pageObj.end?!0:!1}},{key:"getAllRowkey",value:function(){return this.data.map(function(e){return e[this.keyField]},this)}}]),e}();t.TableDataStore=f},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function o(e){return"number"==typeof e}function i(e){return"object"==typeof e&&null!==e}function a(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if(!o(e)||0>e||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,o,s,l,u;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if(t=arguments[1],t instanceof Error)throw t;throw TypeError('Uncaught, unspecified "error" event.')}if(r=this._events[e],a(r))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:s=Array.prototype.slice.call(arguments,1),r.apply(this,s)}else if(i(r))for(s=Array.prototype.slice.call(arguments,1),u=r.slice(),o=u.length,l=0;o>l;l++)u[l].apply(this,s);return!0},r.prototype.addListener=function(e,t){var o;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(o=a(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,o&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace())),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){function r(){this.removeListener(e,r),o||(o=!0,t.apply(this,arguments))}if(!n(t))throw TypeError("listener must be a function");var o=!1;return r.listener=t,this.on(e,r),this},r.prototype.removeListener=function(e,t){var r,o,a,s;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(r=this._events[e],a=r.length,o=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(s=a;s-- >0;)if(r[s]===t||r[s].listener&&r[s].listener===t){o=s;break}if(0>o)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(r=this._events[e],n(r))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){var t;return t=this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){"use strict";function n(e,t){var r="";return 0===e.length?r:(r+=t.join(",")+"\n",e.map(function(e){t.map(function(t){var n=e[t]?'"'+e[t]+'"':"";r+=n+","}),r+="\n"}),r)}if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"!=typeof window)var o=r(37),i=o.saveAs;var a=function(e,t,r){var o=n(e,t);"undefined"!=typeof window&&i(new Blob([o],{type:"text/plain;charset=utf-8"}),r||"spreadsheet.csv")};t["default"]=a,e.exports=t["default"]},function(e,t,r){var n,o,i=i||function(e){"use strict";if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var t=e.document,r=function(){return e.URL||e.webkitURL||e},n=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in n,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},a=/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),s=e.webkitRequestFileSystem,l=e.requestFileSystem||s||e.mozRequestFileSystem,u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},c="application/octet-stream",d=0,p=500,f=function(t){var n=function(){"string"==typeof t?r().revokeObjectURL(t):t.remove()};e.chrome?n():setTimeout(n,p)},h=function(e,t,r){t=[].concat(t);for(var n=t.length;n--;){var o=e["on"+t[n]];if("function"==typeof o)try{o.call(e,r||e)}catch(i){u(i)}}},v=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e},y=function(t,u,p){p||(t=v(t));var y,m,g,b=this,w=t.type,E=!1,_=function(){h(b,"writestart progress write writeend".split(" "))},P=function(){if(m&&a&&"undefined"!=typeof FileReader){var n=new FileReader;return n.onloadend=function(){var e=n.result;m.location.href="data:attachment/file"+e.slice(e.search(/[,;]/)),b.readyState=b.DONE,_()},n.readAsDataURL(t),void(b.readyState=b.INIT)}if((E||!y)&&(y=r().createObjectURL(t)),m)m.location.href=y;else{var o=e.open(y,"_blank");void 0==o&&a&&(e.location.href=y)}b.readyState=b.DONE,_(),f(y)},T=function(e){return function(){return b.readyState!==b.DONE?e.apply(this,arguments):void 0}},S={create:!0,exclusive:!1};return b.readyState=b.INIT,u||(u="download"),o?(y=r().createObjectURL(t),n.href=y,n.download=u,void setTimeout(function(){i(n),_(),f(y),b.readyState=b.DONE})):(e.chrome&&w&&w!==c&&(g=t.slice||t.webkitSlice,t=g.call(t,0,t.size,c),E=!0),s&&"download"!==u&&(u+=".download"),(w===c||s)&&(m=e),l?(d+=t.size,void l(e.TEMPORARY,d,T(function(e){e.root.getDirectory("saved",S,T(function(e){var r=function(){e.getFile(u,S,T(function(e){e.createWriter(T(function(r){r.onwriteend=function(t){m.location.href=e.toURL(),b.readyState=b.DONE,h(b,"writeend",t),f(e)},r.onerror=function(){var e=r.error;e.code!==e.ABORT_ERR&&P()},"writestart progress write abort".split(" ").forEach(function(e){r["on"+e]=b["on"+e]}),r.write(t),b.abort=function(){r.abort(),b.readyState=b.DONE},b.readyState=b.WRITING}),P)}),P)};e.getFile(u,{create:!1},T(function(e){e.remove(),r()}),T(function(e){e.code===e.NOT_FOUND_ERR?r():P()}))}),P)}),P)):void P())},m=y.prototype,g=function(e,t,r){return new y(e,t,r)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,r){return r||(e=v(e)),navigator.msSaveOrOpenBlob(e,t||"download")}:(m.abort=function(){var e=this;e.readyState=e.DONE,h(e,"abort")},m.readyState=m.INIT=0,m.WRITING=1,m.DONE=2,m.error=m.onwritestart=m.onprogress=m.onwrite=m.onabort=m.onerror=m.onwriteend=null,g)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||(void 0).content);"undefined"!=typeof e&&e.exports?e.exports.saveAs=i:null!==r(38)&&null!=r(39)&&(n=[],o=function(){return i}.apply(t,n),!(void 0!==o&&(e.exports=o)))},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t){(function(t){e.exports=t}).call(t,{})},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var s=Object.getOwnPropertyDescriptor(o,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(o);if(null===u)return;e=u,t=i,r=a,n=!0,s=u=void 0}},l=r(2),u=n(l),c=r(3),d=(n(c),r(4)),p=n(d),f=r(7),h=n(f),v=function(e){function t(){o(this,t),s(Object.getPrototypeOf(t.prototype),"constructor",this).apply(this,arguments)}return i(t,e),a(t,[{key:"handleColumnClick",value:function(e){if(this.props.dataSort){var t=this.refs.innerDiv;this.order=this.order==p["default"].SORT_DESC?p["default"].SORT_ASC:p["default"].SORT_DESC,this.props.clearSortCaret(this.order,this.props.dataField),t.appendChild(h["default"].renderSortCaret(this.order))}}},{key:"componentDidMount",value:function(){this.refs.innerDiv.setAttribute("data-field",this.props.dataField)}},{key:"render",value:function(){var e=null!==this.props.width?parseInt(this.props.width):null,t={textAlign:this.props.dataAlign,display:this.props.hidden?"none":null,width:e,maxWidth:e},r=this.props.className+" "+(this.props.dataSort?"sort-column":"");return u["default"].createElement("th",{className:r,style:t},u["default"].createElement("div",{ref:"innerDiv",className:"th-inner table-header-column",onClick:this.handleColumnClick.bind(this)},this.props.children))}}]),t}(u["default"].Component);v.propTypes={dataField:u["default"].PropTypes.string,dataAlign:u["default"].PropTypes.string,dataSort:u["default"].PropTypes.bool,clearSortCaret:u["default"].PropTypes.func,dataFormat:u["default"].PropTypes.func,isKey:u["default"].PropTypes.bool,editable:u["default"].PropTypes.any,hidden:u["default"].PropTypes.bool,className:u["default"].PropTypes.string,width:u["default"].PropTypes.string,sortFunc:u["default"].PropTypes.func,columnClassName:u["default"].PropTypes.any},v.defaultProps={dataAlign:"left",dataSort:!1,dataFormat:void 0,isKey:!1,editable:!0,clearSortCaret:void 0,hidden:!1,className:"",width:null,sortFunc:void 0,columnClassName:""},t["default"]=v,e.exports=t["default"]}])});
},{"react":"react","react-dom":"react-dom"}],2:[function(require,module,exports){
'use strict';

var React = require('react');
var moment = require('moment');
var assign = require('object-assign');

var FORMAT = require('./utils/format');
var asConfig = require('./utils/asConfig');
var toMoment = require('./toMoment');
var onEnter = require('./onEnter');
var assign = require('object-assign');

var TODAY;

function emptyFn() {}

var DecadeView = React.createClass({

    displayName: 'DecadeView',

    getDefaultProps: function getDefaultProps() {
        return asConfig();
    },

    /**
     * Returns all the years in the decade of the given value
     *
     * @param  {Moment/Date/Number} value
     * @return {Moment[]}
     */
    getYearsInDecade: function getYearsInDecade(value) {
        var year = moment(value).get('year');
        var offset = year % 10;

        year = year - offset - 1;

        var result = [];
        var i = 0;

        var start = moment(year, 'YYYY').startOf('year');

        for (; i < 12; i++) {
            result.push(moment(start));
            start.add(1, 'year');
        }

        return result;
    },

    render: function render() {

        TODAY = +moment().startOf('day');

        var props = assign({}, this.props);

        var viewMoment = props.viewMoment = moment(this.props.viewDate);

        if (props.date) {
            props.moment = moment(props.date).startOf('year');
        }

        var yearsInView = this.getYearsInDecade(viewMoment);

        return React.createElement(
            'div',
            { className: 'dp-table dp-decade-view' },
            this.renderYears(props, yearsInView)
        );
    },

    /**
     * Render the given array of days
     * @param  {Moment[]} days
     * @return {React.DOM}
     */
    renderYears: function renderYears(props, days) {
        var nodes = days.map(function (date, index, arr) {
            return this.renderYear(props, date, index, arr);
        }, this);
        var len = days.length;
        var buckets = [];
        var bucketsLen = Math.ceil(len / 4);

        var i = 0;

        for (; i < bucketsLen; i++) {
            buckets.push(nodes.slice(i * 4, (i + 1) * 4));
        }

        return buckets.map(function (bucket, i) {
            return React.createElement(
                'div',
                { key: "row" + i, className: 'dp-row' },
                bucket
            );
        });
    },

    renderYear: function renderYear(props, date, index, arr) {
        var yearText = FORMAT.year(date, props.yearFormat);
        var classes = ["dp-cell dp-year"];

        var dateTimestamp = +date;

        if (dateTimestamp == props.moment) {
            classes.push('dp-value');
        }

        if (!index) {
            classes.push('dp-prev');
        }

        if (index == arr.length - 1) {
            classes.push('dp-next');
        }

        var onClick = this.handleClick.bind(this, props, date);

        return React.createElement(
            'div',
            {
                role: 'link',
                tabIndex: '1',
                key: yearText,
                className: classes.join(' '),
                onClick: onClick,
                onKeyUp: onEnter(onClick)
            },
            yearText
        );
    },

    handleClick: function handleClick(props, date, event) {
        event.target.value = date;(props.onSelect || emptyFn)(date, event);
    }
});

DecadeView.getHeaderText = function (value, props) {
    var year = moment(value).get('year');
    var offset = year % 10;

    year = year - offset - 1;

    return year + ' - ' + (year + 11);
};

module.exports = DecadeView;
},{"./onEnter":8,"./toMoment":9,"./utils/asConfig":10,"./utils/format":11,"moment":13,"object-assign":14,"react":"react"}],3:[function(require,module,exports){
'use strict';

var React = require('react');
var P = React.PropTypes;
var onEnter = require('./onEnter');

module.exports = React.createClass({

  displayName: 'DatePickerHeader',

  propTypes: {
    onChange: P.func,
    onPrev: P.func,
    onNext: P.func,
    colspan: P.number,
    children: P.node
  },

  render: function render() {

    var props = this.props;

    return React.createElement(
      'div',
      { className: 'dp-header' },
      React.createElement(
        'div',
        { className: 'dp-nav-table' },
        React.createElement(
          'div',
          { className: 'dp-row' },
          React.createElement(
            'div',
            {
              tabIndex: '1',
              role: 'link',
              className: 'dp-prev-nav dp-nav-cell dp-cell',
              onClick: props.onPrev,
              onKeyUp: onEnter(props.onPrev)
            },
            props.prevText
          ),
          React.createElement(
            'div',
            {
              tabIndex: '1',
              role: 'link',
              className: 'dp-nav-view dp-cell',
              colSpan: props.colspan,
              onClick: props.onChange,
              onKeyUp: onEnter(props.onChange)
            },
            props.children
          ),
          React.createElement(
            'div',
            {
              tabIndex: '1',
              role: 'link',
              className: 'dp-next-nav dp-nav-cell dp-cell',
              onClick: props.onNext,
              onKeyUp: onEnter(props.onNext)
            },
            props.nextText
          )
        )
      )
    );
  }

});
},{"./onEnter":8,"react":"react"}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var React = require('react');
var moment = require('moment');
var assign = require('object-assign');

var FORMAT = require('./utils/format');
var asConfig = require('./utils/asConfig');
var onEnter = require('./onEnter');
var toMoment = require('./toMoment');

var TODAY;

function emptyFn() {}

var MonthView = React.createClass({

  displayName: 'MonthView',

  /**
   * Formats the given date in the specified format.
   * @method format
   *
   * @param  {Date/String/Moment} value
   * @param  {String} [format] If none specified, #dateFormat will be used
   *
   * @return {String}
   */

  formatAsDay: function formatAsDay(moment, dayDisplayFormat) {
    return moment.format(dayDisplayFormat || 'D');
  },

  getDefaultProps: function getDefaultProps() {
    return asConfig();
  },

  getWeekStartMoment: function getWeekStartMoment(value) {
    var weekStartDay = this.weekStartDay;
    var clone = this.toMoment(value).day(weekStartDay);

    return clone;
  },

  /**
   * Returns all the days in the specified month.
   *
   * @param  {Moment/Date/Number} value
   * @return {Moment[]}
   */
  getDaysInMonth: function getDaysInMonth(value) {
    var first = this.toMoment(value).startOf('month');
    var beforeFirst = this.toMoment(value).startOf('month').add(-1, 'days');
    var start = this.getWeekStartMoment(first);
    var result = [];
    var i = 0;

    if (beforeFirst.isBefore(start)
    // and it doen't start with a full week before and the week has at least 1 day from current month (default)
     && (this.props.alwaysShowPrevWeek || !start.isSame(first))) {
      start.add(-1, 'weeks');
    }

    for (; i < 42; i++) {
      result.push(this.toMoment(start));
      start.add(1, 'days');
    }

    return result;
  },

  render: function render() {

    var props = assign({}, this.props);

    this.toMoment = function (value, dateFormat) {
      return toMoment(value, dateFormat || props.dateFormat, { locale: props.locale });
    };

    TODAY = +this.toMoment().startOf('day');

    var dateFormat = props.dateFormat;
    var viewMoment = props.viewMoment = this.toMoment(props.viewDate, dateFormat);

    var weekStartDay = props.weekStartDay;

    if (weekStartDay == null) {
      weekStartDay = props.localeData._week ? props.localeData._week.dow : null;
    }

    this.weekStartDay = props.weekStartDay = weekStartDay;

    if (props.minDate && moment.isMoment(props.minDate)) {
      props.minDate.startOf('day');
    }

    props.minDate && (props.minDate = +this.toMoment(props.minDate, dateFormat));
    props.maxDate && (props.maxDate = +this.toMoment(props.maxDate, dateFormat));

    this.monthFirst = this.toMoment(viewMoment).startOf('month');
    this.monthLast = this.toMoment(viewMoment).endOf('month');

    if (props.date) {
      props.moment = this.toMoment(props.date).startOf('day');
    }

    var daysInView = this.getDaysInMonth(viewMoment);

    return React.createElement(
      'div',
      { className: 'dp-table dp-month-view' },
      this.renderWeekDayNames(),
      this.renderDays(props, daysInView)
    );
  },

  /**
   * Render the given array of days
   * @param  {Moment[]} days
   * @return {React.DOM}
   */
  renderDays: function renderDays(props, days) {
    var nodes = days.map(function (date) {
      return this.renderDay(props, date);
    }, this);

    var len = days.length;
    var buckets = [];
    var bucketsLen = Math.ceil(len / 7);

    var i = 0;

    for (; i < bucketsLen; i++) {
      buckets.push(nodes.slice(i * 7, (i + 1) * 7));
    }

    return buckets.map(function (bucket, i) {
      return React.createElement(
        'div',
        { key: "row" + i, className: 'dp-week dp-row' },
        bucket
      );
    });
  },

  renderDay: function renderDay(props, date) {
    var dayText = FORMAT.day(date, props.dayFormat);
    var classes = ["dp-cell dp-day"];

    var dateTimestamp = +date;

    if (dateTimestamp == TODAY) {
      classes.push('dp-current');
    } else if (dateTimestamp < this.monthFirst) {
      classes.push('dp-prev');
    } else if (dateTimestamp > this.monthLast) {
      classes.push('dp-next');
    }

    var beforeMinDate;

    if (props.minDate && date < props.minDate) {
      classes.push('dp-disabled dp-before-min');
      beforeMinDate = true;
    }

    var afterMaxDate;
    if (props.maxDate && date > props.maxDate) {
      classes.push('dp-disabled dp-after-max');
      afterMaxDate = true;
    }

    if (dateTimestamp == props.moment) {
      classes.push('dp-value');
    }

    var mom = this.toMoment(date);
    var onClick = this.handleClick.bind(this, props, date, dateTimestamp);

    var renderDayProps = {
      role: 'link',
      tabIndex: 1,
      key: dayText,
      text: dayText,
      date: mom,
      moment: mom,
      className: classes.join(' '),
      style: {},
      onClick: onClick,
      onKeyUp: onEnter(onClick),
      children: dayText
    };

    if (beforeMinDate) {
      renderDayProps.isDisabled = true;
      renderDayProps.beforeMinDate = true;
    }
    if (afterMaxDate) {
      renderDayProps.isDisabled = true;
      renderDayProps.afterMaxDate = true;
    }

    if (typeof props.onRenderDay === 'function') {
      renderDayProps = props.onRenderDay(renderDayProps);
    }

    var defaultRenderFunction = React.DOM.div;
    var renderFunction = props.renderDay || defaultRenderFunction;

    var result = renderFunction(renderDayProps);

    if (result === undefined) {
      result = defaultRenderFunction(renderDayProps);
    }

    return result;
  },

  getWeekDayNames: function getWeekDayNames(props) {
    props = props || this.props;

    var names = props.weekDayNames;
    var weekStartDay = this.weekStartDay;

    if (typeof names == 'function') {
      names = names(weekStartDay, props.locale);
    } else if (Array.isArray(names)) {

      names = [].concat(names);

      var index = weekStartDay;

      while (index > 0) {
        names.push(names.shift());
        index--;
      }
    }

    return names;
  },

  renderWeekDayNames: function renderWeekDayNames() {
    var names = this.getWeekDayNames();

    return React.createElement(
      'div',
      { className: 'dp-row dp-week-day-names' },
      names.map(function (name, index) {
        return React.createElement(
          'div',
          { key: index, className: 'dp-cell dp-week-day-name' },
          name
        );
      })
    );
  },

  handleClick: function handleClick(props, date, timestamp, event) {
    if (props.minDate && timestamp < props.minDate) {
      return;
    }
    if (props.maxDate && timestamp > props.maxDate) {
      return;
    }

    event.target.value = date;(props.onChange || emptyFn)(date, event);
  }
});

MonthView.getHeaderText = function (moment, props) {
  return toMoment(moment, null, { locale: props.locale }).format('MMMM YYYY');
};

exports['default'] = MonthView;
module.exports = exports['default'];
},{"./onEnter":8,"./toMoment":9,"./utils/asConfig":10,"./utils/format":11,"moment":13,"object-assign":14,"react":"react"}],5:[function(require,module,exports){
'use strict';

var React = require('react');
var moment = require('moment');

var FORMAT = require('./utils/format');
var asConfig = require('./utils/asConfig');
var toMoment = require('./toMoment');
var onEnter = require('./onEnter');
var assign = require('object-assign');

var TODAY;

function emptyFn() {}

var YearView = React.createClass({

    displayName: 'YearView',

    getDefaultProps: function getDefaultProps() {

        return asConfig();
    },

    /**
     * Returns all the days in the specified month.
     *
     * @param  {Moment/Date/Number} value
     * @return {Moment[]}
     */
    getMonthsInYear: function getMonthsInYear(value) {
        var start = moment(value).startOf('year');
        var result = [];
        var i = 0;

        for (; i < 12; i++) {
            result.push(moment(start));
            start.add(1, 'month');
        }

        return result;
    },

    render: function render() {

        TODAY = +moment().startOf('day');

        var props = assign({}, this.props);

        var viewMoment = props.viewMoment = moment(this.props.viewDate);

        if (props.date) {
            props.moment = moment(props.date).startOf('month');
        }

        var monthsInView = this.getMonthsInYear(viewMoment);

        return React.createElement(
            'div',
            { className: 'dp-table dp-year-view' },
            this.renderMonths(props, monthsInView)
        );
    },

    /**
     * Render the given array of days
     * @param  {Moment[]} days
     * @return {React.DOM}
     */
    renderMonths: function renderMonths(props, days) {
        var nodes = days.map(function (date) {
            return this.renderMonth(props, date);
        }, this);
        var len = days.length;
        var buckets = [];
        var bucketsLen = Math.ceil(len / 4);

        var i = 0;

        for (; i < bucketsLen; i++) {
            buckets.push(nodes.slice(i * 4, (i + 1) * 4));
        }

        return buckets.map(function (bucket, i) {
            return React.createElement(
                'div',
                { key: "row" + i, className: 'dp-row' },
                bucket
            );
        });
    },

    renderMonth: function renderMonth(props, date) {
        var monthText = FORMAT.month(date, props.monthFormat);
        var classes = ["dp-cell dp-month"];

        var dateTimestamp = +date;

        if (dateTimestamp == props.moment) {
            classes.push('dp-value');
        }

        var onClick = this.handleClick.bind(this, props, date);

        return React.createElement(
            'div',
            {
                tabIndex: '1',
                role: 'link',
                key: monthText,
                className: classes.join(' '),
                onClick: onClick,
                onKeyUp: onEnter(onClick)
            },
            monthText
        );
    },

    handleClick: function handleClick(props, date, event) {
        event.target.value = date;(props.onSelect || emptyFn)(date, event);
    }
});

YearView.getHeaderText = function (moment, props) {
    return toMoment(moment, null, { locale: props.locale }).format('YYYY');
};

module.exports = YearView;
},{"./onEnter":8,"./toMoment":9,"./utils/asConfig":10,"./utils/format":11,"moment":13,"object-assign":14,"react":"react"}],6:[function(require,module,exports){
'use strict';

var getWeekDayNames = require('./utils/getWeekDayNames');

// console.log(getWeekDayNames())

module.exports = {

    //the names of week days to be displayed in month view - first should be sunday
    weekDayNames: getWeekDayNames,

    //the day to display as first day of week. defaults to 0, which is sunday
    weekStartDay: null,

    locale: null,

    //the format in which days should be displayed in month view
    dayFormat: 'D',

    //the format in which months should be displayed in year view
    monthFormat: 'MMMM',

    //the format in which years should be displayed in decade view
    yearFormat: 'YYYY',

    //text for navigating to prev period
    navPrev: '‹',

    //text for navigating to next period
    navNext: '›',

    //the view to render initially. Possible values are: 'month', 'year', 'decade'
    view: null,

    //the date to mark as selected in the date picker.
    //Can be a Date object, a moment object or a string.
    //If it's a string, it will be parsed using dateFormat
    date: null,

    minDate: null,

    maxDate: null,

    //the date where to open the picker. defaults to today if no date and no viewDate specified
    viewDate: null,

    //if the date property is given as string, it will be parsed using this format
    dateFormat: 'YYYY-MM-DD',

    onRenderDay: null,
    renderDay: null,

    alwaysShowPrevWeek: false
};
},{"./utils/getWeekDayNames":12}],7:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');

var moment = require('moment');
var assign = require('object-assign');
var asConfig = require('./utils/asConfig');

var MonthView = require('./MonthView');
var YearView = require('./YearView');
var DecadeView = require('./DecadeView');
var Header = require('./Header');

var toMoment = require('./toMoment');

var hasOwn = function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};

var onEnter = require('./onEnter');

var Views = {
    month: MonthView,
    year: YearView,
    decade: DecadeView
};

function emptyFn() {}

var DatePicker = React.createClass({

    displayName: 'DatePicker',

    propTypes: {
        todayText: React.PropTypes.string,
        gotoSelectedText: React.PropTypes.string,

        renderFooter: React.PropTypes.func,
        onChange: React.PropTypes.func,

        date: React.PropTypes.any,
        viewDate: React.PropTypes.any
    },

    getViewOrder: function getViewOrder() {
        return this.props.viewOrder || ['month', 'year', 'decade'];
    },

    getDefaultProps: function getDefaultProps() {
        var props = assign({}, asConfig(), {
            isDatePicker: true,
            navOnDateClick: true,
            defaultStyle: {
                boxSizing: 'border-box'
            }
        });

        delete props.viewDate;
        delete props.date;

        return props;
    },

    getInitialState: function getInitialState() {
        return {
            view: this.props.defaultView,
            viewDate: this.props.defaultViewDate,
            defaultDate: this.props.defaultDate
        };
    },

    getViewName: function getViewName() {
        var view = this.props.view != null ? this.props.view : this.state.view;

        return view || 'month';
    },

    addViewIndex: function addViewIndex(amount) {
        var viewName = this.getViewName();

        var order = this.getViewOrder();
        var index = order.indexOf(viewName);

        index += amount;

        return index % order.length;
    },

    getNextViewName: function getNextViewName() {
        return this.getViewOrder()[this.addViewIndex(1)];
    },

    getPrevViewName: function getPrevViewName() {
        return this.getViewOrder()[this.addViewIndex(-1)];
    },

    getView: function getView() {
        var views = this.props.views || Views;
        return views[this.getViewName()] || views.month;
    },

    getViewFactory: function getViewFactory() {
        var view = this.getView();

        if (React.createFactory && view && view.prototype && typeof view.prototype.render == 'function') {
            view.__factory = view.__factory || React.createFactory(view);
            view = view.__factory;
        }

        return view;
    },

    getViewDate: function getViewDate() {
        var date = hasOwn(this.props, 'viewDate') ? this.props.viewDate : this.state.viewDate;

        date = date || this.viewMoment || this.getDate() || new Date();

        if (moment.isMoment(date)) {
            //in order to strip the locale - the date picker may have had its locale changed
            //between two render calls. If we don't strip this, moment(mom) returns a new moment
            //with the locale of mom, which is not what we want
            date = +date;
        }

        date = this.toMoment(date);

        return date;
    },

    getDate: function getDate() {
        var date;

        if (hasOwn(this.props, 'date')) {
            date = this.props.date;
        } else {
            date = this.state.defaultDate;
        }

        return date ? this.toMoment(date) : null;
    },

    render: function render() {

        var props = assign({}, this.props);

        this.toMoment = function (value, dateFormat) {
            return toMoment(value, dateFormat || props.dateFormat, { locale: props.locale });
        };

        var view = this.getViewFactory();

        props.date = this.getDate();

        var dateString = props.date == null ? '' : props.date.format(this.props.dateFormat);

        props.viewDate = this.viewMoment = this.getViewDate();
        props.locale = this.props.locale;
        props.localeData = moment.localeData(props.locale);

        props.renderDay = this.props.renderDay;
        props.onRenderDay = this.props.onRenderDay;

        // props.onChange  = this.handleChange
        // props.onSelect  = this.handleSelect

        var className = (this.props.className || '') + ' date-picker';

        props.style = this.prepareStyle(props);

        var viewProps = props;
        var viewProps = asConfig(props);

        viewProps.dateString = dateString;
        viewProps.localeData = props.localeData;
        viewProps.onSelect = this.handleSelect;
        viewProps.onChange = this.handleChange;

        return React.createElement(
            'div',
            _extends({}, this.props, { className: className, style: props.style }),
            this.renderHeader(view, props),
            React.createElement(
                'div',
                { className: 'dp-body', style: { flex: 1 } },
                view(viewProps)
            ),
            this.renderFooter(props)
        );
    },

    prepareStyle: function prepareStyle(props) {
        return assign({}, props.defaultStyle, props.style);
    },

    renderFooter: function renderFooter(props) {
        if (this.props.hideFooter) {
            return;
        }

        if (this.props.today) {
            console.warn('Please use "todayText" prop instead of "today"!');
        }
        if (this.props.gotoSelected) {
            console.warn('Please use "gotoSelectedText" prop instead of "gotoSelected"!');
        }

        var todayText = this.props.todayText || 'Today';
        var gotoSelectedText = this.props.gotoSelectedText || 'Go to selected';

        var footerProps = {
            todayText: todayText,
            gotoSelectedText: gotoSelectedText,
            gotoToday: this.gotoNow,
            gotoSelected: this.gotoSelected.bind(this, props),
            date: props.date,
            viewDate: props.viewDate
        };

        var result;
        if (typeof this.props.footerFactory == 'function') {
            result = this.props.footerFactory(footerProps);
        }

        if (result !== undefined) {
            return result;
        }

        return React.createElement(
            'div',
            { className: 'dp-footer' },
            React.createElement(
                'div',
                {
                    tabIndex: '1',
                    role: 'link',
                    className: 'dp-footer-today',
                    onClick: footerProps.gotoToday,
                    onKeyUp: onEnter(footerProps.gotoToday)
                },
                todayText
            ),
            React.createElement(
                'div',
                {
                    tabIndex: '1',
                    role: 'link',
                    className: 'dp-footer-selected',
                    onClick: footerProps.gotoSelected,
                    onKeyUp: onEnter(footerProps.gotoSelected)
                },
                gotoSelectedText
            )
        );
    },

    gotoNow: function gotoNow() {
        this.gotoDate(+new Date());
    },

    gotoSelected: function gotoSelected(props) {
        this.gotoDate(props.date || +new Date());
    },

    gotoDate: function gotoDate(value) {

        this.setView('month');

        this.setViewDate(value);
    },

    getViewColspan: function getViewColspan() {
        var map = {
            month: 5,
            year: 2,
            decade: 2
        };

        return map[this.getViewName()];
    },

    renderHeader: function renderHeader(view, props) {

        if (this.props.hideHeader) {
            return;
        }

        props = props || this.props;

        var viewDate = this.getViewDate();
        var headerText = this.getView().getHeaderText(viewDate, props);

        var colspan = this.getViewColspan();
        var prev = this.props.navPrev;
        var next = this.props.navNext;

        return React.createElement(
            Header,
            {
                prevText: prev,
                nextText: next,
                colspan: colspan,
                onPrev: this.handleNavPrev,
                onNext: this.handleNavNext,
                onChange: this.handleViewChange
            },
            headerText
        );
    },

    handleRenderDay: function handleRenderDay(date) {
        return (this.props.renderDay || emptyFn)(date) || [];
    },

    handleViewChange: function handleViewChange() {
        this.setView(this.getNextViewName());
    },

    /**
     * Use this method to set the view.
     *
     * @param {String} view 'month'/'year'/'decade'
     *
     * It calls onViewChange, and if the view is uncontrolled, also sets it is state,
     * so the datepicker gets re-rendered view the new view
     *
     */
    setView: function setView(view) {

        if (typeof this.props.onViewChange == 'function') {
            this.props.onViewChange(view);
        }

        if (this.props.view == null) {
            this.setState({
                view: view
            });
        }
    },

    setViewDate: function setViewDate(moment) {

        moment = this.toMoment(moment);

        var fn = this.props.onViewDateChange;

        if (typeof fn == 'function') {

            var text = moment.format(this.props.dateFormat);
            var view = this.getViewName();

            fn(text, moment, view);
        }

        if (!hasOwn(this.props, 'viewDate')) {
            this.setState({
                viewDate: moment
            });
        }
    },

    getNext: function getNext() {
        var current = this.getViewDate();
        var toMoment = this.toMoment;

        return ({
            month: function month() {
                return toMoment(current).add(1, 'month');
            },
            year: function year() {
                return toMoment(current).add(1, 'year');
            },
            decade: function decade() {
                return toMoment(current).add(10, 'year');
            }
        })[this.getViewName()]();
    },

    getPrev: function getPrev() {
        var current = this.getViewDate();
        var toMoment = this.toMoment;

        return ({
            month: function month() {
                return toMoment(current).add(-1, 'month');
            },
            year: function year() {
                return toMoment(current).add(-1, 'year');
            },
            decade: function decade() {
                return toMoment(current).add(-10, 'year');
            }
        })[this.getViewName()]();
    },

    handleNavigation: function handleNavigation(direction, event) {
        var viewMoment = direction == -1 ? this.getPrev() : this.getNext();

        this.setViewDate(viewMoment);

        if (typeof this.props.onNav === 'function') {
            var text = viewMoment.format(this.props.dateFormat);
            var view = this.getViewName();

            this.props.onNav(text, viewMoment, view, direction, event);
        }
    },

    handleNavPrev: function handleNavPrev(event) {
        this.handleNavigation(-1, event);
    },

    handleNavNext: function handleNavNext(event) {
        this.handleNavigation(1, event);
    },

    handleChange: function handleChange(date, event) {
        date = this.toMoment(date);

        if (this.props.navOnDateClick) {
            var viewDate = this.toMoment(this.getViewDate());

            //it's not enough to compare months, since the year can change as well
            //
            //also it's ok to hardcode the format here
            var viewMonth = viewDate.format('YYYY-MM');
            var dateMonth = date.format('YYYY-MM');

            if (dateMonth > viewMonth) {
                this.handleNavNext(event);
            } else if (dateMonth < viewMonth) {
                this.handleNavPrev(event);
            }
        }

        var text = date.format(this.props.dateFormat);

        if (!hasOwn(this.props, 'date')) {
            this.setState({
                defaultDate: text
            });
        }

        ;(this.props.onChange || emptyFn)(text, date, event);
    },

    handleSelect: function handleSelect(date, event) {
        var viewName = this.getViewName();

        var property = ({
            decade: 'year',
            year: 'month'
        })[viewName];

        var value = date.get(property);
        var viewMoment = this.toMoment(this.getViewDate()).set(property, value);
        var view = this.getPrevViewName();

        this.setViewDate(viewMoment);

        this.setView(view);

        if (typeof this.props.onSelect === 'function') {
            var text = viewMoment.format(this.props.dateFormat);
            this.props.onSelect(text, viewMoment, view, event);
        }
    }

});

DatePicker.views = Views;

var PT = React.PropTypes;

DatePicker.propTypes = {

    /**
     * Function to be called when user selects a date.
     *
     * Called with the following params:
     *
     * @param {String} dateText Date formatted as string
     * @param {Moment} moment Moment.js instance
     * @param {Event} event
     *
     * @type {Function}
     */
    onChange: PT.func,

    /**
     * Function to be called when the user navigates to the next/prev month/year/decade
     *
     * Called with the following params:
     *
     * @param {String} dateText Date formatted as string
     * @param {Moment} moment Moment.js instance
     * @param {String} view The name of the current view (eg: "month")
     * @param {Number} direction 1 or -1. 1 if the right arrow, to nav to next period was pressed. -1 if the left arrow, to nav to the prev period was pressed.
     * @param {Event} event
     *
     * @type {Function}
     */
    onNav: PT.func,

    /**
     * Function to be called when the user selects a year/month.
     *
     * Called with the following params:
     *
     * @param {String} dateText Date formatted as string
     * @param {Moment} moment Moment.js instance
     * @param {String} view The name of the view displayed after following the selection. For now, either "year" or "month"
     *
     * @type {Function}
     */
    onSelect: PT.func,

    /**
     * A function that should return a React DOM for the day cell. The first param is the props object.
     * You can use this to have full control over what gets rendered for a day.
     *
     * @param {Object} dayProps The props object passed to day rendering
     *
     * @type {Function}
     */
    renderDay: PT.func,

    /**
     * A function that can manipulate the props object for a day, and SHOULD return a props object (a new one, or the same).
     * Use this for CUSTOM DAY STYLING.
     * You can use this to take full control over the styles/css classes/attributes applied to the day cell in the month view.
     *
     * @param {Object} dayProps
     * @return {Object} dayProps
     *
     * @type {Function}
     */
    onRenderDay: PT.func,

    /******************************************/
    /********** VIEW-related props ************/
    /******************************************/

    /**
     * The default view to show in the picker. This is an uncontrolled prop.
     * If none specified, the default view will be "month"
     *
     * @type {String}
     */
    defaultView: PT.string,

    /**
     * The view to show in the picker. This is a CONTROLLED prop!
     *
     * When using this controlled prop, make sure you update it when `onViewChange` function is called
     * if you want to navigate to another view, as expected.
     *
     * @type {String}
     */
    view: PT.string,

    /**
     * A function to be called when navigating to another view date.
     *
     * Called with the following params:
     *
     * @param {String} dateText Date formatted as string
     * @param {Moment} moment Moment.js instance
     * @param {String} view the name of the view displayed after the navigation occurs.
     *
     * @type {Function}
     */
    onViewDateChange: PT.func,

    /**
     * A function to be called when the view is changed.
     * If you're using the controlled `view` prop, make sure you update the `view` prop in this function if you want to navigate to another view, as expected.
     *
     * @param {String} nextView One of "month", "year", "decade"
     *
     * @type {Function}
     */
    onViewChange: PT.func,

    /**
     * Defaults to true. If specified as false, will not navigate to the date that was clicked, even if that date is in the prev/next month
     * @type {Boolean}
     */
    navOnDateClick: PT.bool
};

module.exports = DatePicker;
},{"./DecadeView":2,"./Header":3,"./MonthView":4,"./YearView":5,"./onEnter":8,"./toMoment":9,"./utils/asConfig":10,"moment":13,"object-assign":14,"react":"react"}],8:[function(require,module,exports){
'use strict';

module.exports = function onKeyUp(fn) {
  return function (event) {
    if (event.key == 'Enter') {
      fn(event);
    }
  };
};
},{}],9:[function(require,module,exports){
'use strict';

var moment = require('moment');
var CONFIG = require('./config');

/**
 * This function will be used to convert a date to a moment.
 *
 * It accepts input as sring, date or moment
 *
 * @param  {String/Date/Moment} value
 * @param  {String} [dateFormat] if value is string, it will be parsed to a moment using this format
 * @param  {Object} [config]
 * @param  {Boolean} [config.strict] whether to perform strict parsing on strings
 * @return {Moment}
 */
module.exports = function (value, dateFormat, config) {
    var strict = !!(config && config.strict);
    var locale = config && config.locale;

    dateFormat = dateFormat || CONFIG.dateFormat;

    if (typeof value == 'string') {
        return moment(value, dateFormat, locale, strict);
    }

    // return moment.isMoment(value)?
    // 			value:
    return moment(value == null ? new Date() : value, undefined, locale, strict);
};
},{"./config":6,"moment":13}],10:[function(require,module,exports){
'use strict';

var assign = require('object-assign');

var CONFIG = require('../config');
var KEYS = Object.keys(CONFIG);

function copyList(src, target, list) {
    if (src) {
        list.forEach(function (key) {
            target[key] = src[key];
        });
    }

    return target;
}

/**
 * Returns an object that copies from given source object
 * on the resulting object only the properties also found in cfg.
 *
 * If no cfg specified, CONFIG is assumed
 *
 * @param  {object} source
 * @param  {Object} [cfg] If not specied, CONFIG will be used
 *
 * @return {Object}
 */
module.exports = function asConfig(source, cfg) {

    var keys = KEYS;

    if (cfg) {
        keys = Object.keys(cfg);
    }

    cfg = cfg || CONFIG;

    if (!source) {
        return assign({}, cfg);
    }

    return copyList(source, assign({}, cfg), keys);
};
},{"../config":6,"object-assign":14}],11:[function(require,module,exports){
'use strict';

var CONFIG = require('../config');
var toMoment = require('../toMoment');

function f(mom, format) {
    return toMoment(mom).format(format);
}

module.exports = {
    day: function day(mom, format) {
        return f(mom, format || CONFIG.dayFormat);
    },

    month: function month(mom, format) {
        return f(mom, format || CONFIG.monthFormat);
    },

    year: function year(mom, format) {
        return f(mom, format || CONFIG.yearFormat);
    }
};
},{"../config":6,"../toMoment":9}],12:[function(require,module,exports){
'use strict';

var moment = require('moment');

var DEFAULT_WEEK_START_DAY = moment().startOf('week').format('d') * 1;

module.exports = function getWeekDayNames(startDay, locale) {

	var weekDays;

	if (locale) {
		var data = moment.localeData(locale);

		weekDays = data && data._weekdaysShort ? data._weekdaysShort : weekDays;
	}

	weekDays = (weekDays || moment.weekdaysShort()).concat();

	var names = weekDays;
	var index = startDay == null ? DEFAULT_WEEK_START_DAY : startDay;

	while (index > 0) {
		names.push(names.shift());
		index--;
	}

	return names;
};
},{"moment":13}],13:[function(require,module,exports){
//! moment.js
//! version : 2.11.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    function isUndefined(input) {
        return input === void 0;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    // internal storage for locale config files
    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && !isUndefined(module) &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function get_set__set (mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*(a[mn]\s?)?['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\-]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        return isArray(this._months) ? this._months[m.month()] :
            this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sept_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && !isUndefined(console) && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        //the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // FORMATTING

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(utils_hooks__hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        if (!valid__isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date(utils_hooks__hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             if (this.isValid() && other.isValid()) {
                 return other < this ? this : other;
             } else {
                 return valid__createInvalid();
             }
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = Date.now || function () {
        return +(new Date());
    };

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = ((string || '').match(matcher) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(matchOffset, this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return +this > +localInput;
        } else {
            return +localInput < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return +this < +localInput;
        } else {
            return +this.clone().endOf(units) < +localInput;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return +this === +localInput;
        } else {
            inputMs = +localInput;
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input,units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input,units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 local__createLocal(time).isValid())) {
            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 local__createLocal(time).isValid())) {
            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // JSON.stringify(new Date(NaN)) === 'null'
        return this.isValid() ? this.toISOString() : 'null';
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        // console.log("got", weekYear, week, weekday, "set", date.toISOString());
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = local__createLocal([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add               = add_subtract__add;
    momentPrototype__proto.calendar          = moment_calendar__calendar;
    momentPrototype__proto.clone             = clone;
    momentPrototype__proto.diff              = diff;
    momentPrototype__proto.endOf             = endOf;
    momentPrototype__proto.format            = format;
    momentPrototype__proto.from              = from;
    momentPrototype__proto.fromNow           = fromNow;
    momentPrototype__proto.to                = to;
    momentPrototype__proto.toNow             = toNow;
    momentPrototype__proto.get               = getSet;
    momentPrototype__proto.invalidAt         = invalidAt;
    momentPrototype__proto.isAfter           = isAfter;
    momentPrototype__proto.isBefore          = isBefore;
    momentPrototype__proto.isBetween         = isBetween;
    momentPrototype__proto.isSame            = isSame;
    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
    momentPrototype__proto.isValid           = moment_valid__isValid;
    momentPrototype__proto.lang              = lang;
    momentPrototype__proto.locale            = locale;
    momentPrototype__proto.localeData        = localeData;
    momentPrototype__proto.max               = prototypeMax;
    momentPrototype__proto.min               = prototypeMin;
    momentPrototype__proto.parsingFlags      = parsingFlags;
    momentPrototype__proto.set               = getSet;
    momentPrototype__proto.startOf           = startOf;
    momentPrototype__proto.subtract          = add_subtract__subtract;
    momentPrototype__proto.toArray           = toArray;
    momentPrototype__proto.toObject          = toObject;
    momentPrototype__proto.toDate            = toDate;
    momentPrototype__proto.toISOString       = moment_format__toISOString;
    momentPrototype__proto.toJSON            = toJSON;
    momentPrototype__proto.toString          = toString;
    momentPrototype__proto.unix              = unix;
    momentPrototype__proto.valueOf           = to_type__valueOf;
    momentPrototype__proto.creationData      = creationData;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        monthsParse : [/^jan/i, /^feb/i, /^mar/i, /^apr/i, /^may/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^oct/i, /^nov/i, /^dec/i],
        longMonthsParse : [/^january$/i, /^february$/i, /^march$/i, /^april$/i, /^may$/i, /^june$/i, /^july$/i, /^august$/i, /^september$/i, /^october$/i, /^november$/i, /^december$/i],
        shortMonthsParse : [/^jan$/i, /^feb$/i, /^mar$/i, /^apr$/i, /^may$/i, /^jun$/i, /^jul$/i, /^aug/i, /^sept?$/i, /^oct$/i, /^nov$/i, /^dec$/i],
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes <= 1           && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   <= 1           && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    <= 1           && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  <= 1           && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   <= 1           && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.11.0';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.now                   = now;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.prototype             = momentPrototype;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],14:[function(require,module,exports){
/* eslint-disable no-unused-vars */
'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],15:[function(require,module,exports){
module.exports=function(n){function t(i){if(e[i])return e[i].exports;var r=e[i]={exports:{},id:i,loaded:!1};return n[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var e={};return t.m=n,t.c=e,t.p="",t(0)}([function(n,t){"use strict";function e(n){return a.js+n[0].toUpperCase()+n.substr(1)}function i(n){return Object.keys(n).reduce(function(t,i){return-1!==s.indexOf(i)?t[e(i)]=n[i]:t[i]=n[i],t},{})}function r(n){var t=navigator.userAgent.toLowerCase();return-1!==t.indexOf("safari")&&-1===t.indexOf("chrome")?!function(){var t=function(n,t,e){n[e]=n[t],delete n[t]};"flex"===n.display&&(n.display="-webkit-flex"),["alignItems","justifyContent","flexDirection","flex","flexWrap"].forEach(function(i){t(n,i,e(i))})}():-1!==navigator.appVersion.indexOf("MSIE 10")&&"flex"===n.display&&(n.display="-ms-flexbox"),n}function o(n){return Object.keys(n).reduce(function(t,e){return t[e]=r(i(n[e])),t},{})}var a=function(){var n=window.getComputedStyle(document.documentElement,""),t=(Array.prototype.slice.call(n).join("").match(/-(moz|webkit|ms)-/)||""===n.OLink&&["","o"])[1];return{dom:"ms"===t?"MS":t,lowercase:t,css:"-"+t+"-",js:"ms"===t?t:t[0].toUpperCase()+t.substr(1)}}(),s=["animation","animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction","appearance","backfaceVisibility","backgroundClip","borderImage","borderImageSlice","boxSizing","boxShadow","contentColumns","transform","transformOrigin","transformStyle","transition","transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction","perspective","perspectiveOrigin","userSelect"];t.prefix=o}]);
},{}],16:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../typings/react/react.d.ts"/>

var toolOverlayStyle = {
    background: "#000",
    opacity: .2,
    zIndex: 3,
    boxSizing: "border-box",
    backgroundClip: "padding",
    position: "absolute",
    visibility: "hidden",
    pointerEvents: "none"
};

var ToolOverlay = function (_React$Component) {
    _inherits(ToolOverlay, _React$Component);

    function ToolOverlay(props) {
        _classCallCheck(this, ToolOverlay);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ToolOverlay).call(this, props));

        _this.state = {
            style: toolOverlayStyle
        };
        return _this;
    }

    _createClass(ToolOverlay, [{
        key: "render",
        value: function render() {
            return React.createElement("div", { style: this.state.style });
        }
    }]);

    return ToolOverlay;
}(React.Component);

exports.default = ToolOverlay;

},{"react":"react"}],17:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WeaveTool = undefined;
exports.registerToolImplementation = registerToolImplementation;
exports.getToolImplementation = getToolImplementation;

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactDom = require("react-dom");

var ReactDOM = _interopRequireWildcard(_reactDom);

var _ui = require("./react-ui/ui");

var _ui2 = _interopRequireDefault(_ui);

var _StandardLib = require("./utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../typings/react/react.d.ts"/>
///<reference path="../typings/react/react-dom.d.ts"/>
///<reference path="../typings/lodash/lodash.d.ts"/>
///<reference path="../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>
///<reference path="../typings/react-bootstrap/react-bootstrap.d.ts"/>

var toolRegistry = {};
var grabberStyle = {
    width: "16",
    height: "16",
    cursor: "move",
    background: "url(http://placehold.it/32x32)"
};
function registerToolImplementation(asClassName, jsClass) {
    toolRegistry[asClassName] = jsClass;
}
function getToolImplementation(asClassName) {
    return toolRegistry[asClassName];
}

var WeaveTool = exports.WeaveTool = function (_React$Component) {
    _inherits(WeaveTool, _React$Component);

    function WeaveTool(props) {
        _classCallCheck(this, WeaveTool);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveTool).call(this, props));

        _this.toolPath = _this.props.toolPath;
        _this.toolProps = _this.props.toolProps;
        _this.state = {
            showControls: false
        };
        var toolType = _this.toolPath ? _this.toolPath.getType() : _this.props.toolClass;
        if (toolType === "weave.visualization.tools::ExternalTool" && _this.toolPath.getType("toolClass")) {
            toolType = _this.toolPath.getState("toolClass");
        }
        if (toolType === "weavejs.core.LinkableHashMap" && _this.toolPath.getType("class")) toolType = _this.toolPath.getState("class");
        _this.ToolClass = getToolImplementation(toolType);
        return _this;
    }

    _createClass(WeaveTool, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.element = ReactDOM.findDOMNode(this.refs["toolDiv"]);
            if (React.Component.isPrototypeOf(this.ToolClass)) {
                this.tool = this.refs["tool"];
            } else {
                this.tool = new this.ToolClass(_.merge({ element: ReactDOM.findDOMNode(this.refs["toolDiv"]), toolPath: this.toolPath }, this.toolProps));
            }
            if (this.toolPath) {
                this.toolPath.addCallback(this, this.forceUpdate);
            }
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            if (this.tool.destroy) {
                this.tool.destroy();
            }
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (this.tool && this.tool.resize) {
                this.tool.resize();
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var windowBar = {
                width: "100%",
                height: 25,
                backgroundColor: this.state.showControls ? "#f8f8f8" : ""
            };
            var titleStyle = {
                cursor: "move",
                height: 25,
                textAlign: "center",
                overflow: "hidden",
                whiteSpace: "nowrap",
                flex: 1,
                textOverflow: "ellipsis"
            };
            var transitions = {
                visibility: this.state.showControls ? "visible" : "hidden",
                opacity: this.state.showControls ? 0.7 : 0,
                transition: this.state.showControls ? "visibiliy 0s 0.1s, opacity 0.1s linear" : "visibility 0s 0.1s, opacity 0.1s linear"
            };
            var leftControls = {
                marginLeft: 5,
                marginTop: 2,
                width: 20
            };
            var rightControls = {
                marginTop: 2,
                width: 38
            };
            _StandardLib2.default.merge(leftControls, transitions);
            _StandardLib2.default.merge(rightControls, transitions);
            var toolHeight = this.props.style ? this.props.style.height - 25 : 320;
            var toolWidth = this.props.style ? this.props.style.width : 320;
            var reactTool;
            if (React.Component.isPrototypeOf(this.ToolClass)) {
                reactTool = React.createElement(this.ToolClass, _.merge({ key: "tool", ref: "tool", toolPath: this.toolPath, style: { height: toolHeight, width: toolWidth } }, this.toolProps));
            }
            return React.createElement(
                _ui2.default.VBox,
                { style: this.props.style, onMouseEnter: function onMouseEnter() {
                        _this2.setState({ showControls: true });
                    }, onMouseLeave: function onMouseLeave() {
                        _this2.setState({ showControls: false });
                    }, onDragOver: this.props.onDragOver, onDragEnd: this.props.onDragEnd },
                React.createElement(
                    _ui2.default.HBox,
                    { ref: "header", style: windowBar, draggable: true, onDragStart: this.props.onDragStart },
                    React.createElement(
                        "p",
                        { style: titleStyle },
                        this.title
                    )
                ),
                reactTool ? reactTool : React.createElement("div", { ref: "toolDiv", style: { width: toolWidth, height: toolHeight } })
            );
        }
    }, {
        key: "title",
        get: function get() {
            if (this.toolPath) {
                return this.toolPath.getValue("this.hasOwnProperty('title') ? this.title : ''") || (this.toolPath.getType('title') ? this.toolPath.getState('title') : '') || this.toolPath.getPath().pop();
            } else {
                return this.tool ? this.tool.title : "";
            }
        }
    }]);

    return WeaveTool;
}(React.Component);

},{"./react-ui/ui":23,"./utils/StandardLib":31,"lodash":"lodash","react":"react","react-dom":"react-dom"}],18:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactDom = require("react-dom");

var ReactDOM = _interopRequireWildcard(_reactDom);

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _reactVendorPrefix = require("react-vendor-prefix");

var VendorPrefix = _interopRequireWildcard(_reactVendorPrefix);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _Resizer = require("./Resizer");

var _Resizer2 = _interopRequireDefault(_Resizer);

var _ResizerOverlay = require("./ResizerOverlay");

var _ResizerOverlay2 = _interopRequireDefault(_ResizerOverlay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts" />
/// <reference path="../../typings/react/react-dom.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>

var RESIZEROVERLAY = "resizer";
var HORIZONTAL = "horizontal";

var Layout = function (_React$Component) {
    _inherits(Layout, _React$Component);

    function Layout(props, state) {
        _classCallCheck(this, Layout);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Layout).call(this, props, state));

        _this.panelDragging = false;
        var ps = props.state || {};
        _this.state = { id: ps.id, direction: ps.direction, children: ps.children, flex: ps.flex };
        _this.minSize = 16;
        _this.dragging = false;
        return _this;
    }

    _createClass(Layout, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            document.addEventListener("mouseup", this.boundMouseUp = this.onMouseUp.bind(this));
            document.addEventListener("mousedown", this.boundMouseDown = this.onMouseDown.bind(this));
            document.addEventListener("mousemove", this.boundMouseMove = this.onMouseMove.bind(this));
        }
    }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
            this.setState(_StandardLib2.default.includeMissingPropertyPlaceholders(this.state, nextProps.state));
        }
    }, {
        key: "compoenentWillUnmount",
        value: function compoenentWillUnmount() {
            document.removeEventListener("mousedown", this.boundMouseDown);
            document.removeEventListener("mouseup", this.boundMouseUp);
            document.removeEventListener("mouseMove", this.boundMouseMove);
        }
    }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
            return !_.isEqual(this.state, nextState) || !_.isEqual(this.state, nextProps.state);
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (this.props.onStateChange && this.state) {
                this.props.onStateChange(this.state);
            }
        }
    }, {
        key: "getDOMNodeFromId",
        value: function getDOMNodeFromId(id) {
            var component = this.getComponentFromId(id);
            if (component) {
                return component.element;
            }
        }
    }, {
        key: "getComponentFromId",
        value: function getComponentFromId(id) {
            if (this.state.id && _.isEqual(this.state.id, id)) {
                return this;
            } else {
                for (var i = 0; i < this.childNames.length; i++) {
                    var component = this.refs[this.childNames[i]].getComponentFromId(id);
                    if (component) {
                        return component;
                    }
                }
            }
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown(event) {
            var _this2 = this;

            this.resizerNames.forEach(function (resizerName) {
                var resizer = _this2.refs[resizerName];
                if (resizer && resizer.state && resizer.state.active) {
                    var overlayRange = _this2.getResizerRange(resizer);
                    overlayRange[0] += _this2.minSize;
                    overlayRange[1] -= _this2.minSize;
                    _this2.refs[RESIZEROVERLAY].setState({
                        active: true,
                        range: overlayRange
                    });
                }
            });
        }
    }, {
        key: "onMouseMove",
        value: function onMouseMove(event) {}
    }, {
        key: "getResizerRange",
        value: function getResizerRange(resizer) {
            var direction = resizer.props.direction;
            var pane1 = this.refs[resizer.props.pane1];
            var pane2 = this.refs[resizer.props.pane2];
            var element1 = ReactDOM.findDOMNode(pane1);
            var element2 = ReactDOM.findDOMNode(pane2);
            var rect = this.element.getBoundingClientRect();
            var pageLeft = window.pageXOffset + rect.left;
            var pageTop = window.pageYOffset + rect.top;
            if (direction === HORIZONTAL) {
                return [element1.offsetLeft + pageLeft, element2.offsetLeft + element2.clientWidth + pageLeft];
            } else {
                return [element1.offsetTop + pageTop, element2.offsetTop + element2.clientHeight + pageTop];
            }
        }
    }, {
        key: "onMouseUp",
        value: function onMouseUp(event) {
            var _this3 = this;

            var newState = _.cloneDeep(this.state);
            this.resizerNames.forEach(function (resizerName) {
                var resizer = _this3.refs[resizerName];
                var resizerOverlay = _this3.refs[RESIZEROVERLAY];
                if (resizer && resizer.state && resizer.state.active) {
                    var range = _this3.getResizerRange(resizer);
                    var begin = range[0];
                    var end = range[1];
                    var mousePos = _this3.state.direction === HORIZONTAL ? event.pageX : event.pageY;
                    var size = _this3.state.direction === HORIZONTAL ? _this3.element.clientWidth : _this3.element.clientHeight;
                    mousePos = Math.max(begin + _this3.minSize, Math.min(mousePos, end - _this3.minSize));
                    var ref1 = resizer.props.pane1;
                    var ref2 = resizer.props.pane2;
                    var pane1 = _this3.refs[ref1];
                    var pane2 = _this3.refs[ref2];
                    var index1 = _this3.childNames.indexOf(ref1);
                    var index2 = _this3.childNames.indexOf(ref2);
                    var flex1 = (mousePos - begin) / size;
                    var flex2 = (end - mousePos) / size;
                    newState.children[index1].flex = flex1;
                    newState.children[index2].flex = flex2;
                    pane1.setState({
                        flex: flex1
                    });
                    pane2.setState({
                        flex: flex2
                    });
                    resizer.setState({
                        active: false
                    });
                    resizerOverlay.setState({
                        active: false
                    });
                    _this3.setState(newState);
                }
            });
            this.panelDragging = false;
        }
    }, {
        key: "handleStateChange",
        value: function handleStateChange(childRef, newState) {
            var stateCopy = _.cloneDeep(this.state);
            var index = this.childNames.indexOf(childRef);
            stateCopy.children[index] = newState;
            this.setState(stateCopy);
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            this.childNames = [];
            this.resizerNames = [];
            var style = {
                display: "flex",
                flex: this.state.flex,
                position: "relative",
                outline: "none",
                overflow: "hidden",
                userSelect: "none",
                flexDirection: this.state.direction === HORIZONTAL ? "row" : "column"
            };
            if (this.state.direction === HORIZONTAL) {
                style.height = "100%";
            } else {
                style.width = "100%";
            }
            if (this.state.children && this.state.children.length > 0) {
                var newChildren = new Array(this.state.children.length * 2 - 1);
                this.state.children.forEach(function (childState, i) {
                    var ref = "child" + i;
                    _this4.childNames[i] = ref;
                    newChildren[i * 2] = React.createElement(Layout, { onStateChange: _this4.handleStateChange.bind(_this4, ref), ref: ref, state: childState, key: i * 2 });
                });
                var i;
                for (i = 1; i < newChildren.length - 1; i += 2) {
                    var resizerName = "resizer" + i / 2;
                    this.resizerNames.push(resizerName);
                    var resizer = React.createElement(_Resizer2.default, { ref: resizerName, key: i, direction: this.state.direction, pane1: newChildren[i - 1].ref, pane2: newChildren[i + 1].ref });
                    newChildren[i] = resizer;
                }
            }
            var prefixed = VendorPrefix.prefix({ styles: style });
            return React.createElement(
                "div",
                { ref: function ref(elt) {
                        _this4.element = elt;
                    }, style: prefixed.styles },
                newChildren,
                React.createElement(_ResizerOverlay2.default, { ref: RESIZEROVERLAY, key: RESIZEROVERLAY, direction: this.state.direction })
            );
        }
    }]);

    return Layout;
}(React.Component);

exports.default = Layout;

},{"../utils/StandardLib":31,"./Resizer":19,"./ResizerOverlay":20,"lodash":"lodash","react":"react","react-dom":"react-dom","react-vendor-prefix":15}],19:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactVendorPrefix = require("react-vendor-prefix");

var VendorPrefix = _interopRequireWildcard(_reactVendorPrefix);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts" />
/// <reference path="../../typings/react/react-dom.d.ts"/>
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>

var HORIZONTAL = "horizontal";
var resizerStyle = {};
resizerStyle.basic = {
    background: "#000",
    opacity: .1,
    zIndex: 1,
    boxSizing: "border-box",
    backgroundClip: "padding"
};
resizerStyle.vertical = {
    height: "4px",
    cursor: "row-resize",
    width: "100%"
};
resizerStyle.horizontal = {
    width: "4px",
    cursor: "col-resize",
    height: "100%"
};

var Resizer = function (_React$Component) {
    _inherits(Resizer, _React$Component);

    function Resizer(props) {
        _classCallCheck(this, Resizer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Resizer).call(this, props));

        _this.state = {
            active: false
        };
        return _this;
    }

    _createClass(Resizer, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this.element.addEventListener("mousedown", this.boundMouseDown = this.onMouseDown.bind(this));
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            this.element.removeEventListener("mousedown", this.boundMouseDown);
        }
    }, {
        key: "onMouseDown",
        value: function onMouseDown() {
            this.setState({
                active: true
            });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var direction = this.props.direction;
            var style = resizerStyle.basic;
            _StandardLib2.default.merge(style, resizerStyle[direction]);
            var prefixed = VendorPrefix.prefix({ styles: style });
            return React.createElement("span", { ref: function ref(elt) {
                    _this2.element = elt;
                }, style: prefixed.styles });
        }
    }]);

    return Resizer;
}(React.Component);

exports.default = Resizer;

},{"../utils/StandardLib":31,"react":"react","react-vendor-prefix":15}],20:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactVendorPrefix = require("react-vendor-prefix");

var VendorPrefix = _interopRequireWildcard(_reactVendorPrefix);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts" />
/// <reference path="../../typings/react-vendor-prefix/react-vendor-prefix.d.ts"/>
/// <reference path="../../typings/react/react-dom.d.ts"/>

var HORIZONTAL = "horizontal";
var mouseevents = ["mouseover", "mouseout", "mouseleave"];
var resizerStyle = {};
resizerStyle.basic = {
    background: "#000",
    opacity: .3,
    zIndex: 1,
    boxSizing: "border-box",
    backgroundClip: "padding",
    position: "absolute"
};
resizerStyle.vertical = {
    height: "4px",
    cursor: "row-resize",
    width: "100%"
};
resizerStyle.horizontal = {
    width: "4px",
    cursor: "col-resize",
    height: "100%"
};
;

var ResizerOverlay = function (_React$Component) {
    _inherits(ResizerOverlay, _React$Component);

    function ResizerOverlay(props) {
        _classCallCheck(this, ResizerOverlay);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ResizerOverlay).call(this, props));

        _this.state = {
            active: false,
            range: [],
            x: NaN,
            y: NaN
        };
        return _this;
    }

    _createClass(ResizerOverlay, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            document.addEventListener("mousemove", this._onMouseMove = this.onMouseMove.bind(this), true);
            mouseevents.forEach(function (mouseevent) {
                return document.addEventListener(mouseevent, _this2._stopEventPropagation = _this2.stopEventPropagation.bind(_this2), true);
            });
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            var _this3 = this;

            document.removeEventListener("mousemove", this._onMouseMove);
            mouseevents.forEach(function (mouseevent) {
                return document.removeEventListener(mouseevent, _this3._stopEventPropagation);
            });
        }
    }, {
        key: "stopEventPropagation",
        value: function stopEventPropagation(event) {
            if (this.state.active) {
                event.stopImmediatePropagation();
            }
        }
    }, {
        key: "onMouseMove",
        value: function onMouseMove(event) {
            if (this.state.active) {
                event.stopImmediatePropagation();
                var container = this.element.parentNode;
                var rect = container.getBoundingClientRect();
                var left = window.pageXOffset + rect.left;
                var top = window.pageYOffset + rect.top;
                var mousePos = this.props.direction === HORIZONTAL ? event.pageX : event.pageY;
                mousePos = Math.max(this.state.range[0], Math.min(mousePos, this.state.range[1]));
                if (this.props.direction === HORIZONTAL) {
                    this.setState({
                        x: mousePos - left,
                        y: NaN
                    });
                } else {
                    this.setState({
                        x: NaN,
                        y: mousePos - top
                    });
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this4 = this;

            var direction = this.props.direction;
            var style = {};
            _StandardLib2.default.merge(style, resizerStyle.basic);
            _StandardLib2.default.merge(style, resizerStyle[direction]);
            if (this.state.active) {
                style.visibility = "visible";
                style.left = this.state.x;
                style.top = this.state.y;
            } else {
                style.visibility = "hidden";
            }
            var prefixed = VendorPrefix.prefix({ styles: style });
            return React.createElement("span", { ref: function ref(elt) {
                    _this4.element = elt;
                }, style: prefixed.styles });
        }
    }]);

    return ResizerOverlay;
}(React.Component);

exports.default = ResizerOverlay;

},{"../utils/StandardLib":31,"react":"react","react-vendor-prefix":15}],21:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>

var HBox = function (_React$Component) {
    _inherits(HBox, _React$Component);

    function HBox(props, state) {
        _classCallCheck(this, HBox);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(HBox).call(this, props));
    }

    _createClass(HBox, [{
        key: "render",
        value: function render() {
            var style = this.props.style || {};
            var otherProps = {};
            for (var key in this.props) {
                if (key !== "style") {
                    otherProps[key] = this.props[key];
                }
            }
            style = style || {};
            style.display = "flex";
            style.flexDirection = "row";
            return React.createElement(
                "div",
                _extends({ style: style }, otherProps),
                this.props.children
            );
        }
    }]);

    return HBox;
}(React.Component);

exports.default = HBox;

},{"react":"react"}],22:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/react/react.d.ts"/>

var VBox = function (_React$Component) {
    _inherits(VBox, _React$Component);

    function VBox(props, state) {
        _classCallCheck(this, VBox);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(VBox).call(this, props));
    }

    _createClass(VBox, [{
        key: "render",
        value: function render() {
            var style = this.props.style || {};
            var otherProps = {};
            for (var key in this.props) {
                if (key !== "style") {
                    otherProps[key] = this.props[key];
                }
            }
            style.display = "flex";
            style.flexDirection = "column";
            return React.createElement(
                "div",
                _extends({ style: style }, otherProps),
                this.props.children
            );
        }
    }]);

    return VBox;
}(React.Component);

exports.default = VBox;

},{"react":"react"}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _HBox = require("./HBox");

var _HBox2 = _interopRequireDefault(_HBox);

var _VBox = require("./VBox");

var _VBox2 = _interopRequireDefault(_VBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    HBox: _HBox2.default,
    VBox: _VBox2.default
};

},{"./HBox":21,"./VBox":22}],24:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/react/react-dom.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>

var AbstractWeaveTool = function (_React$Component) {
    _inherits(AbstractWeaveTool, _React$Component);

    function AbstractWeaveTool(props) {
        _classCallCheck(this, AbstractWeaveTool);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AbstractWeaveTool).call(this, props));

        _this.toolPath = props.toolPath;
        _this.paths = {};
        return _this;
    }

    _createClass(AbstractWeaveTool, [{
        key: "getElementSize",
        value: function getElementSize() {
            return {
                width: this.wrapper.clientWidth,
                height: this.wrapper.clientHeight
            };
        }
        // this function accepts an arry of path configurations
        // a path config is an object with a path object name, the weave path and an
        // optional callback or array of callbacks

    }, {
        key: "initializePaths",
        value: function initializePaths(properties) {
            var _this2 = this;

            properties.forEach(function (pathConf) {
                _this2.paths[pathConf.name] = pathConf.path;
                if (pathConf.callbacks) {
                    var callbacks = Array.isArray(pathConf.callbacks) ? pathConf.callbacks : [pathConf.callbacks];
                    callbacks.forEach(function (callback) {
                        _this2.paths[pathConf.name].addCallback(_this2, callback, true);
                    });
                }
            });
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {}
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {}
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {}
    }, {
        key: "handleClick",
        value: function handleClick(event) {}
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            return React.createElement(
                "div",
                { ref: function ref(elt) {
                        _this3.wrapper = elt;
                    }, style: this.props.style },
                React.createElement("div", { ref: function ref(elt) {
                        _this3.element = elt;
                    }, onClick: this.handleClick.bind(this), style: { width: "100%", height: "100%", maxHeight: "100%" } })
            );
        }
    }, {
        key: "customStyle",
        value: function customStyle(array, type, filter, style) {
            var _this4 = this;

            array.forEach(function (index) {
                d3.select(d3.select(_this4.element).selectAll(type).filter(filter)[0][index]).style(style);
            });
        }
    }]);

    return AbstractWeaveTool;
}(React.Component);

exports.default = AbstractWeaveTool;

},{"d3":"d3","react":"react"}],25:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractWeaveTool2 = require("./AbstractWeaveTool");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _c = require("c3");

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../utils/StandardLib.ts"/>

var WeaveC3Barchart = function (_AbstractWeaveTool) {
    _inherits(WeaveC3Barchart, _AbstractWeaveTool);

    function WeaveC3Barchart(props) {
        _classCallCheck(this, WeaveC3Barchart);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3Barchart).call(this, props));

        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.yAxisValueToLabel = {};
        _this.xAxisValueToLabel = {};
        _this.c3Config = {
            //size: this.getElementSize(),
            padding: {
                top: 20,
                bottom: 20,
                right: 30
            },
            data: {
                json: [],
                type: "bar",
                xSort: false,
                selection: {
                    enabled: true,
                    multiple: true,
                    draggable: true
                },
                labels: {
                    format: function format(v, id, i, j) {
                        if (_this.showValueLabels) {
                            return v;
                        } else {
                            return "";
                        }
                    }
                },
                order: null,
                color: function color(_color, d) {
                    if (_this.heightColumnNames.length === 1 && d.hasOwnProperty("index")) {
                        // find the corresponding index of numericRecords in stringRecords
                        var id = _this.indexToKey[d.index];
                        var index = _.pluck(_this.stringRecords, "id").indexOf(id);
                        return _this.stringRecords[index] ? _this.stringRecords[index]["color"] : "#C0CDD1";
                    } else {
                        return _color || "#C0CDD1";
                    }
                },
                onclick: function onclick(d) {
                    if (!_this.keyDown && d && d.hasOwnProperty("index")) {
                        _this.toolPath.selection_keyset.setKeys([_this.indexToKey[d.index]]);
                    }
                },
                onselected: function onselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.selection_keyset.addKeys([_this.indexToKey[d.index]]);
                    }
                },
                onunselected: function onunselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.selection_keyset.removeKeys([_this.indexToKey[d.index]]);
                    }
                },
                onmouseover: function onmouseover(d) {
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.probe_keyset.setKeys([_this.indexToKey[d.index]]);
                    }
                },
                onmouseout: function onmouseout(d) {
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.probe_keyset.setKeys([]);
                    }
                }
            },
            axis: {
                x: {
                    type: "category",
                    label: {
                        text: "",
                        position: "outer-center"
                    },
                    tick: {
                        fit: false,
                        multiline: true,
                        format: function format(num) {
                            if (_this.stringRecords && _this.stringRecords[num]) {
                                return _this.stringRecords[num]["xLabel"];
                            } else {
                                return "";
                            }
                        }
                    }
                },
                y: {
                    label: {
                        text: "",
                        position: "outer-middle"
                    },
                    tick: {
                        fit: false,
                        multiline: false,
                        format: function format(num) {
                            if (_this.yLabelColumnPath && _this.yLabelColumnDataType !== "number") {
                                return _this.yAxisValueToLabel[num] || "";
                            } else if (_this.groupingMode === "percentStack") {
                                return d3.format(".0%")(num);
                            } else {
                                return String(_FormatUtils2.default.defaultNumberFormatting(num));
                            }
                        }
                    }
                }
            },
            grid: {
                x: {
                    show: true
                },
                y: {
                    show: true
                }
            },
            bindto: null,
            bar: {
                width: {
                    ratio: 0.8
                }
            },
            legend: {
                show: false
            },
            onrendered: function onrendered() {
                _this.busy = false;
            }
        };
        return _this;
    }

    _createClass(WeaveC3Barchart, [{
        key: "selectionKeysChanged",
        value: function selectionKeysChanged() {
            var _this2 = this;

            if (!this.chart) return;
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            if (selectedIndices.length) {
                this.customStyle(unselectedIndices, "path", ".c3-shape", { opacity: 0.3 });
                this.customStyle(selectedIndices, "path", ".c3-shape", { opacity: 1.0 });
                this.chart.select(this.heightColumnNames, selectedIndices, true);
            } else {
                this.customStyle(indices, "path", ".c3-shape", { opacity: 1.0 });
                this.chart.select(this.heightColumnNames, [], true);
            }
        }
    }, {
        key: "probedKeysChanged",
        value: function probedKeysChanged() {
            var _this3 = this;

            var selectedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            if (selectedIndices.length) {
                this.customStyle(unselectedIndices, "path", ".c3-shape", { opacity: 0.3 });
                this.customStyle(selectedIndices, "path", ".c3-shape", { opacity: 1.0 });
            } else {
                this.selectionKeysChanged();
            }
        }
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "toggleKey",
        value: function toggleKey(event) {
            if (event.keyCode === 17 || event.keyCode === 91 || event.keyCode === 224) {
                this.keyDown = !this.keyDown;
            }
        }
    }, {
        key: "rotateAxes",
        value: function rotateAxes() {
            // this.c3Config.axis.rotated = this.paths.horizontalMode.getState();
            // setTimeout(() => {
            //   this.busy = true;
            //   c3.generate(this.c3Config);
            // }, 10);
        }
    }, {
        key: "_axisChanged",
        value: function _axisChanged() {
            if (!this.chart) return;
            if (this.busy) {
                setTimeout(this._axisChanged, 20);
                return;
            }
            var xLabel = this.paths.xAxis.push("overrideAxisName").getState() || "Sorted by " + this.paths.sortColumn.getObject().getMetadata('title');
            var yLabel = this.paths.yAxis.push("overrideAxisName").getState() || (this.heightColumnsLabels ? this.heightColumnsLabels.join(", ") : "");
            this.chart.axis.labels({
                x: xLabel,
                y: yLabel
            });
            this.c3Config.axis.x.label = { text: xLabel, position: "outer-center" };
            this.c3Config.axis.y.label = { text: yLabel, position: "outer-middle" };
        }
    }, {
        key: "handleShowValueLabels",
        value: function handleShowValueLabels() {
            this.showValueLabels = this.paths.showValueLabels.getState();
            this.chart.flush();
        }
    }, {
        key: "_updateColumns",
        value: function _updateColumns() {
            this.heightColumnNames = [];
            this.heightColumnsLabels = [];
            var heightColumns = this.paths.heightColumns.getChildren();
            for (var idx in heightColumns) {
                var column = heightColumns[idx];
                var title = column.getValue("this.getMetadata('title')");
                var name = column.getPath().pop();
                this.heightColumnsLabels.push(title);
                this.heightColumnNames.push(name);
            }
        }
    }, {
        key: "_dataChanged",
        value: function _dataChanged() {
            var _this4 = this;

            if (!this.chart) {
                return;
            }
            if (this.busy) {
                return;
            }
            this._updateColumns();
            var heightColumns = this.paths.heightColumns.getChildren();
            var numericMapping = {
                sort: this.paths.sortColumn,
                xLabel: this.paths.labelColumn
            };
            var stringMapping = {
                sort: this.paths.sortColumn,
                color: this.paths.colorColumn,
                xLabel: this.paths.labelColumn
            };
            heightColumns.forEach(function (column, idx) {
                var name = column.getPath().pop();
                numericMapping[name] = column; // all height columns as numeric value for the chart
                if (idx === 0) {
                    _this4.yLabelColumnPath = column;
                    stringMapping["yLabel"] = column; // only using the first column to label the y axis
                    numericMapping["yLabel"] = column;
                }
            });
            this.yLabelColumnDataType = this.yLabelColumnPath.getValue("this.getMetadata('dataType')");
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            if (!this.numericRecords.length) return;
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.records = _.zip(this.numericRecords, this.stringRecords);
            this.records = _.sortByAll(this.records, [[0, "sort"], [0, "id"]]);
            if (this.records.length) {
                ;

                var _$unzip = _.unzip(this.records);

                var _$unzip2 = _slicedToArray(_$unzip, 2);

                this.numericRecords = _$unzip2[0];
                this.stringRecords = _$unzip2[1];
            }this.yAxisValueToLabel = {};
            this.xAxisValueToLabel = {};
            this.keyToIndex = {};
            this.indexToKey = {};
            this.numericRecords.forEach(function (record, index) {
                if (record) {
                    _this4.keyToIndex[record["id"]] = index;
                    _this4.indexToKey[index] = record["id"];
                }
            });
            this.stringRecords.forEach(function (record, index) {
                var numericRecord = _this4.numericRecords[index];
                if (numericRecord) {
                    _this4.yAxisValueToLabel[numericRecord["yLabel"]] = record["yLabel"];
                    _this4.xAxisValueToLabel[numericRecord["xLabel"]] = record["xLabel"];
                }
            });
            this.groupingMode = this.paths.groupingMode.getState();
            //var horizontalMode = this.paths.plotter.push("horizontalMode").getState();
            // set axis rotation mode
            //this.chart.load({axes: { rotated: horizontalMode }});
            if (this.groupingMode === "stack") {
                this.chart.groups([this.heightColumnNames]);
            } else if (this.groupingMode === "group") {
                this.chart.groups([]);
            } else if (this.groupingMode === "percentStack") {
                this.chart.groups([this.heightColumnNames]);
            }
            if (this.groupingMode === "percentStack" && this.heightColumnNames.length > 1) {
                // normalize the height columns to be percentages.
                var newValues = this.numericRecords.map(function (record) {
                    var heights;
                    if (record) {
                        heights = _.pick(record, _this4.heightColumnNames);
                        var sum = 0;
                        _.keys(heights).forEach(function (key) {
                            sum += heights[key];
                        });
                        _.keys(heights).forEach(function (key) {
                            heights[key] = heights[key] / sum;
                        });
                    }
                    return heights;
                });
                this.numericRecords = newValues;
            }
            ;
            var keys = { x: "", value: [] };
            // if label column is specified
            if (this.paths.labelColumn.getState().length) {
                keys.x = "xLabel";
            }
            keys.value = this.heightColumnNames;
            var colors = {};
            if (this.heightColumnNames.length > 1) {
                this.colorRamp = this.paths.chartColors.getState();
                this.heightColumnNames.map(function (name, index) {
                    var color = _StandardLib2.default.interpolateColor(index / (_this4.heightColumnNames.length - 1), _this4.colorRamp);
                    colors[name] = "#" + _StandardLib2.default.decimalToHex(color);
                });
                colors = {};
            }
            var data = _.cloneDeep(this.c3Config.data);
            data.json = this.numericRecords;
            data.colors = colors;
            data.keys = keys;
            data.unload = true;
            data.done = function () {
                _this4.busy = false;
            };
            this.c3Config.data = data;
            this.busy = true;
            this.chart.load(data);
        }
    }, {
        key: "_updateStyle",
        value: function _updateStyle() {}
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            _get(Object.getPrototypeOf(WeaveC3Barchart.prototype), "componentDidUpdate", this).call(this);
            var newElementSize = this.getElementSize();
            if (!_.isEqual(newElementSize, this.elementSize)) {
                this.chart.resize(newElementSize);
                this.elementSize = newElementSize;
            }
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            this.chart.destroy();
            _get(Object.getPrototypeOf(WeaveC3Barchart.prototype), "componentWillUnmount", this).call(this);
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            _get(Object.getPrototypeOf(WeaveC3Barchart.prototype), "componentDidMount", this).call(this);
            document.addEventListener("keydown", this.toggleKey.bind(this));
            document.addEventListener("keyup", this.toggleKey.bind(this));
            var axisChanged = _.debounce(this._axisChanged.bind(this), 100);
            var dataChanged = _.debounce(this._dataChanged.bind(this), 100);
            var handleShowValueLabels = _.debounce(this.handleShowValueLabels.bind(this), 10);
            var selectionKeySetChanged = this.selectionKeysChanged.bind(this);
            var probeKeySetChanged = _.debounce(this.probedKeysChanged.bind(this), 100);
            var rotateAxes = _.debounce(this.rotateAxes.bind(this), 10);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "heightColumns", path: plotterPath.push("heightColumns"), callbacks: [dataChanged, axisChanged] }, { name: "labelColumn", path: plotterPath.push("labelColumn"), callbacks: [dataChanged, axisChanged] }, { name: "sortColumn", path: plotterPath.push("sortColumn"), callbacks: [dataChanged, axisChanged] }, { name: "colorColumn", path: plotterPath.push("colorColumn"), callbacks: dataChanged }, { name: "chartColors", path: plotterPath.push("chartColors"), callbacks: dataChanged }, { name: "groupingMode", path: plotterPath.push("groupingMode"), callbacks: dataChanged }, { name: "horizontalMode", path: plotterPath.push("horizontalMode"), callbacks: rotateAxes }, { name: "showValueLabels", path: plotterPath.push("showValueLabels"), callbacks: handleShowValueLabels }, { name: "xAxis", path: this.toolPath.pushPlotter("xAxis"), callbacks: axisChanged }, { name: "yAxis", path: this.toolPath.pushPlotter("yAxis"), callbacks: axisChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];
            this.initializePaths(mapping);
            this.c3Config.bindto = this.element;
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3Barchart;
}(_AbstractWeaveTool3.default);

exports.default = WeaveC3Barchart;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::CompoundBarChartTool", WeaveC3Barchart);

},{"../WeaveTool":17,"../utils/FormatUtils":30,"../utils/StandardLib":31,"./AbstractWeaveTool":24,"c3":"c3","d3":"d3","lodash":"lodash"}],26:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractWeaveTool2 = require("./AbstractWeaveTool");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _ui = require("../react-ui/ui");

var _ui2 = _interopRequireDefault(_ui);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _reactDom = require("react-dom");

var ReactDOM = _interopRequireWildcard(_reactDom);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/d3/d3.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/weave/WeavePath.d.ts"/>
///<reference path="../react-ui/ui.tsx"/>
///<reference path="../../typings/react/react-dom.d.ts"/>

var SHAPE_TYPE_CIRCLE = "circle";
var SHAPE_TYPE_SQUARE = "square";
var SHAPE_TYPE_LINE = "line";

var WeaveC3ColorLegend = function (_AbstractWeaveTool) {
    _inherits(WeaveC3ColorLegend, _AbstractWeaveTool);

    function WeaveC3ColorLegend(props) {
        _classCallCheck(this, WeaveC3ColorLegend);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3ColorLegend).call(this, props));
    }

    _createClass(WeaveC3ColorLegend, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            var elementSize = this.element ? this.getElementSize() : null;
            ReactDOM.render(React.createElement(ColorLegend, { toolPath: this.toolPath, width: elementSize.width, height: elementSize.height }), this.element);
        }
    }]);

    return WeaveC3ColorLegend;
}(_AbstractWeaveTool3.default);

var ColorLegend = function (_React$Component) {
    _inherits(ColorLegend, _React$Component);

    function ColorLegend(props) {
        _classCallCheck(this, ColorLegend);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(ColorLegend).call(this, props));

        console.log(React);
        _this2.toolPath = props.toolPath;
        _this2.plotterPath = _this2.toolPath.pushPlotter("plot");
        _this2.dynamicColorColumnPath = _this2.plotterPath.push("dynamicColorColumn", null);
        _this2.binningDefinition = _this2.dynamicColorColumnPath.push("internalDynamicColumn").push(null).push("binningDefinition").push(null);
        _this2.binnedColumnPath = _this2.dynamicColorColumnPath.push("internalDynamicColumn", null);
        return _this2;
    }

    _createClass(ColorLegend, [{
        key: "setupCallbacks",
        value: function setupCallbacks() {
            this.dynamicColorColumnPath.addCallback(this, this.forceUpdate);
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            this.setupCallbacks();
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {}
    }, {
        key: "drawContinuousPlot",
        value: function drawContinuousPlot() {}
        //drawBinnedPlot(numberOfBins:number) {
        //    // clear the svg and rerender everything
        //    this.svg.selectAll("*").remove();
        //
        //    var width:number = this.element.clientWidth;
        //    var height:number = this.element.clientHeight;
        //
        //    var shapeSize:number = this.plotterPath.getState("shapeSize");
        //    var shapeType:string = this.plotterPath.getState("shapeType");
        //
        //    var ramp:any[] = this.dynamicColorColumnPath.getState("ramp");
        //
        //    var yScale:Function = d3.scale.linear().domain([0, numberOfBins + 1]).range([0, height]);
        //
        //    var yMap:Function = (d:number):number => { return yScale(d); };
        //
        //    if(width && height && numberOfBins) {
        //        this.svg.attr("width", width).attr("height", height);
        //    }
        //
        //    this.svg.append("text")
        //            .attr("y", yMap(0.5))
        //            .attr("x", 10)
        //            .text(this.dynamicColorColumnPath.getValue("this.getMetadata('title')"))
        //             .attr("font-family", "sans-serif")
        //             .attr("font-size", "12px");
        //
        //    shapeSize = _.max([1, _.min([shapeSize, height / numberOfBins])]);
        //
        //    let r:number = (shapeSize / 100 * height / numberOfBins) / 2;
        //
        //    var textLabelFunction:Function = this.binnedColumnPath.getValue("this.deriveStringFromNumber.bind(this)            ");
        //
        //    for(var i = 0; i < numberOfBins; i++) {
        //        switch(shapeType) {
        //            case SHAPE_TYPE_CIRCLE :
        //                this.svg.append("circle")
        //                         .attr("cx", 25)
        //                         .attr("cy", yMap(i + 1))
        //                         .attr("r", r)
        //                         .style("fill", "#" + StandardLib.decimalToHex(StandardLib.interpolateColor(StandardLib.normalize(i, 0, numberOfBins - 1), ramp)))
        //                         .style("stroke", "black")
        //                         .style("stroke-opacity", 0.5);
        //                this.svg.append("text")
        //                         .attr("x", 50)
        //                         .attr("y", yMap(i + 1) + r / 2)
        //                         .text(textLabelFunction(i))
        //                         .attr("font-family", "sans-serif")
        //                         .attr("font-size", "12px");
        //                break;
        //            case SHAPE_TYPE_SQUARE :
        //                break;
        //
        //            case SHAPE_TYPE_LINE :
        //                break;
        //        }
        //    }
        //}

    }, {
        key: "selectionKeysChanged",
        value: function selectionKeysChanged() {}
    }, {
        key: "visualizationChanged",
        value: function visualizationChanged() {}
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {}
    }, {
        key: "render",
        value: function render() {
            this.numberOfBins = this.binnedColumnPath.getValue("this.numberOfBins");
            if (this.numberOfBins) {
                //Binned plot case
                var width = this.props.width;
                var height = this.props.height;
                var shapeSize = this.plotterPath.getState("shapeSize");
                var shapeType = this.plotterPath.getState("shapeType");
                var ramp = this.dynamicColorColumnPath.getState("ramp");
                var yScale = d3.scale.linear().domain([0, this.numberOfBins + 1]).range([0, height]);
                var yMap = function yMap(d) {
                    return yScale(d);
                };
                shapeSize = _.max([1, _.min([shapeSize, height / this.numberOfBins])]);
                var r = shapeSize / 100 * height / this.numberOfBins / 2;
                var textLabelFunction = this.binnedColumnPath.getValue("this.deriveStringFromNumber.bind(this)            ");
                var elements = [];
                for (var i = 0; i < this.numberOfBins; i++) {
                    switch (shapeType) {
                        case SHAPE_TYPE_CIRCLE:
                            {
                                elements.push(React.createElement(
                                    _ui2.default.HBox,
                                    { key: i, style: { width: "100%", flex: 1.0 } },
                                    React.createElement(
                                        _ui2.default.HBox,
                                        { style: { width: "100%", flex: 0.2, position: "relative", padding: "0px 0px 0px 0px", minWidth: "10px" } },
                                        React.createElement(
                                            "svg",
                                            { style: { position: "absolute" }, viewBox: "0 0 100 100", width: "100%", height: "100%" },
                                            React.createElement("circle", { cx: "50%", cy: "50%", r: "45%", style: { fill: "#" + _StandardLib2.default.decimalToHex(_StandardLib2.default.interpolateColor(_StandardLib2.default.normalize(i, 0, this.numberOfBins - 1), ramp)), stroke: "black", strokeOpacity: 0.5 } })
                                        )
                                    ),
                                    React.createElement(
                                        _ui2.default.HBox,
                                        { style: { width: "100%", flex: 0.8 } },
                                        React.createElement(
                                            "span",
                                            { style: { textAlign: "left", verticalAlign: "middle", overflow: "hidden", whiteSpace: "nowrap", textOverflow: "ellipsis" } },
                                            textLabelFunction(i)
                                        )
                                    )
                                ));
                            }
                            break;
                        case SHAPE_TYPE_SQUARE:
                            break;
                        case SHAPE_TYPE_LINE:
                            break;
                    }
                }
                return React.createElement(
                    "div",
                    { style: { width: "100%", height: "100%" } },
                    React.createElement(
                        _ui2.default.VBox,
                        { style: { height: "100%", flex: 1.0 } },
                        React.createElement(
                            _ui2.default.HBox,
                            { style: { width: "100%", flex: 0.1 } },
                            React.createElement(
                                "svg",
                                { width: "100%", height: "100%" },
                                React.createElement(
                                    "text",
                                    { y: yMap(0.5), x: 10, fontFamily: "sans-serif", fontSize: "12px" },
                                    this.dynamicColorColumnPath.getValue("this.getMetadata('title')")
                                )
                            )
                        ),
                        React.createElement(
                            _ui2.default.HBox,
                            { style: { width: "100%", flex: 0.9 } },
                            React.createElement(
                                _ui2.default.VBox,
                                { style: { flex: 1.0 } },
                                " ",
                                elements
                            )
                        )
                    )
                );
            } else {
                //Continuous plot case
                return React.createElement("svg", null);
            }
        }
    }]);

    return ColorLegend;
}(React.Component);

exports.default = WeaveC3ColorLegend;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::ColorBinLegendTool", WeaveC3ColorLegend);

},{"../WeaveTool":17,"../react-ui/ui":23,"../utils/StandardLib":31,"./AbstractWeaveTool":24,"d3":"d3","lodash":"lodash","react":"react","react-dom":"react-dom"}],27:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractWeaveTool2 = require("./AbstractWeaveTool");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _StandardLib = require("../utils/StandardLib");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _c = require("c3");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>

var WeaveC3Histogram = function (_AbstractWeaveTool) {
    _inherits(WeaveC3Histogram, _AbstractWeaveTool);

    function WeaveC3Histogram(props) {
        _classCallCheck(this, WeaveC3Histogram);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3Histogram).call(this, props));

        _this.busy = false;
        _this.idToRecord = {};
        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.c3Config = {
            //size: this.getElementSize(),
            padding: {
                top: 20,
                bottom: 20,
                right: 30
            },
            data: {
                columns: [],
                selection: {
                    enabled: true,
                    multiple: true,
                    draggable: true
                },
                type: "bar",
                color: function color(_color, d) {
                    if (d && d.hasOwnProperty("index")) {
                        var decColor = _this.paths.fillStyle.push("color").push("internalDynamicColumn", null).getValue("this.getColorFromDataValue.bind(this)")(d.index).toString(16);
                        return "#" + _StandardLib2.default.decimalToHex(decColor);
                    }
                    return "#C0CDD1";
                },
                onclick: function onclick(d) {
                    if (!_this.keyDown && d && d.hasOwnProperty("index")) {
                        var selectedIds = _this.paths.binnedColumn.getValue("this.getKeysFromBinIndex.bind(this)")(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.selection_keyset.setKeys(selectedIds);
                    }
                },
                onselected: function onselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        var selectedIds = _this.paths.binnedColumn.getValue("this.getKeysFromBinIndex.bind(this)")(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.selection_keyset.addKeys(selectedIds);
                    }
                },
                onunselected: function onunselected(d) {
                    _this.flag = true;
                    if (d && d.hasOwnProperty("index")) {
                        var unSelectedIds = _this.paths.binnedColumn.getValue("this.getKeysFromBinIndex.bind(this)")(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.selection_keyset.removeKeys(unSelectedIds);
                    }
                },
                onmouseover: function onmouseover(d) {
                    if (d && d.hasOwnProperty("index")) {
                        var selectedIds = _this.paths.binnedColumn.getValue("this.getKeysFromBinIndex.bind(this)")(d.index).map(function (qKey) {
                            return _this.toolPath.qkeyToString(qKey);
                        });
                        _this.toolPath.probe_keyset.setKeys(selectedIds);
                    }
                },
                onmouseout: function onmouseout(d) {
                    if (d && d.hasOwnProperty("index")) {
                        _this.toolPath.probe_keyset.setKeys([]);
                    }
                }
            },
            bindto: _this.element,
            legend: {
                show: false
            },
            axis: {
                x: {
                    type: "category",
                    label: {
                        text: "",
                        position: "outer-center"
                    },
                    tick: {
                        multiline: false,
                        format: function format(num) {
                            return _this.paths.binnedColumn.getValue("this.deriveStringFromNumber.bind(this)")(num);
                        }
                    }
                },
                y: {
                    label: {
                        text: "",
                        position: "outer-middle"
                    },
                    tick: {
                        fit: false,
                        format: function format(num) {
                            return String(_FormatUtils2.default.defaultNumberFormatting(num));
                        }
                    }
                },
                rotated: false
            },
            grid: {
                x: {
                    show: true
                },
                y: {
                    show: true
                }
            },
            bar: {
                width: {
                    ratio: 0.95
                }
            },
            onrendered: _this._updateStyle.bind(_this)
        };
        return _this;
    }

    _createClass(WeaveC3Histogram, [{
        key: "_selectionKeysChanged",
        value: function _selectionKeysChanged() {
            if (!this.chart) return;
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var selectedRecords = _.filter(this.numericRecords, function (record) {
                return _.includes(selectedKeys, record["id"]);
            });
            var selectedBinIndices = _.pluck(_.uniq(selectedRecords, 'binnedColumn'), 'binnedColumn');
            var binIndices = _.pluck(_.uniq(this.numericRecords, 'binnedColumn'), 'binnedColumn');
            var unselectedBinIndices = _.difference(binIndices, selectedBinIndices);
            if (selectedBinIndices.length) {
                this.customStyle(unselectedBinIndices, "path", ".c3-shape", { opacity: 0.3 });
                this.customStyle(selectedBinIndices, "path", ".c3-shape", { opacity: 1.0 });
            } else {
                this.customStyle(binIndices, "path", ".c3-shape", { opacity: 1.0 });
                this.chart.select(this.heightColumnNames, [], true);
            }
        }
    }, {
        key: "_probedKeysChanged",
        value: function _probedKeysChanged() {
            var selectedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedRecords = _.filter(this.numericRecords, function (record) {
                return _.includes(selectedKeys, record["id"]);
            });
            var selectedBinIndices = _.pluck(_.uniq(selectedRecords, 'binnedColumn'), 'binnedColumn');
            var binIndices = _.pluck(_.uniq(this.numericRecords, 'binnedColumn'), 'binnedColumn');
            var unselectedBinIndices = _.difference(binIndices, selectedBinIndices);
            if (selectedBinIndices.length) {
                this.customStyle(unselectedBinIndices, "path", ".c3-shape", { opacity: 0.3 });
                this.customStyle(selectedBinIndices, "path", ".c3-shape", { opacity: 1.0 });
            } else {
                this._selectionKeysChanged();
            }
        }
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "toggleKey",
        value: function toggleKey(event) {
            if (event.keyCode === 17 || event.keyCode === 91 || event.keyCode === 224) {
                this.keyDown = !this.keyDown;
            }
        }
    }, {
        key: "rotateAxes",
        value: function rotateAxes() {
            //this.c3Config.axis.rotated = true;
            //this.forceUpdate();
        }
    }, {
        key: "_axisChanged",
        value: function _axisChanged() {
            if (!this.chart) return;
            if (this.busy) return;
            this.chart.axis.labels({
                x: this.paths.xAxis.push("overrideAxisName").getState() || this.paths.binnedColumn.getValue("this.getMetadata('title')"),
                y: function () {
                    var overrideAxisName = this.paths.yAxis.push("overrideAxisName").getState();
                    if (overrideAxisName) {
                        return overrideAxisName;
                    } else {
                        if (this.paths.columnToAggregate.getState().length) {
                            switch (this.paths.aggregationMethod.getState()) {
                                case "count":
                                    return "Number of records";
                                case "sum":
                                    return "Sum of " + this.paths.columnToAggregate.getValue("this.getMetadata('title')");
                                case "mean":
                                    return "Mean of " + this.paths.columnToAggregate.getValue("this.getMetadata('title')");
                            }
                        } else {
                            return "Number of records";
                        }
                    }
                }.bind(this)()
            });
        }
    }, {
        key: "_updateStyle",
        value: function _updateStyle() {}
    }, {
        key: "_dataChanged",
        value: function _dataChanged() {
            var _this2 = this;

            if (!this.chart) return;
            if (this.busy) {
                return;
            }
            var numericMapping = {
                binnedColumn: this.paths.binnedColumn,
                columnToAggregate: this.paths.columnToAggregate
            };
            var stringMapping = {
                binnedColumn: this.paths.binnedColumn
            };
            this.binnedColumnDataType = this.paths.binnedColumn.getValue("this.getMetadata('dataType')");
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.idToRecord = {};
            this.keyToIndex = {};
            this.indexToKey = {};
            this.numericRecords.forEach(function (record, index) {
                _this2.idToRecord[record["id"]] = record;
                _this2.keyToIndex[record["id"]] = index;
                _this2.indexToKey[index] = record["id"];
            });
            this.numberOfBins = this.paths.binnedColumn.getValue("this.numberOfBins");
            this.histData = [];
            // this._columnToAggregatePath.getValue("this.getInternalColumn()");
            var columnToAggregateNameIsDefined = this.paths.columnToAggregate.getState().length > 0;
            for (var iBin = 0; iBin < this.numberOfBins; iBin++) {
                var recordsInBin = _.filter(this.numericRecords, { binnedColumn: iBin });
                if (recordsInBin) {
                    var obj = { height: 0 };
                    if (columnToAggregateNameIsDefined) {
                        obj.height = this.getAggregateValue(recordsInBin, "columnToAggregate", this.paths.aggregationMethod.getState());
                        this.histData.push(obj);
                    } else {
                        obj.height = this.getAggregateValue(recordsInBin, "binnedColumn", "count");
                        this.histData.push(obj);
                    }
                }
            }
            var keys = { value: ["height"] };
            this._axisChanged();
            this.busy = true;
            this.chart.load({ json: this.histData, keys: keys, unload: true, done: function done() {
                    _this2.busy = false;
                } });
        }
    }, {
        key: "getAggregateValue",
        value: function getAggregateValue(records, columnToAggregateName, aggregationMethod) {
            var count = 0;
            var sum = 0;
            if (!Array.isArray(records)) {
                return 0;
            }
            records.forEach(function (record) {
                count++;
                sum += record[columnToAggregateName];
            });
            if (aggregationMethod === "mean") {
                return sum / count; // convert sum to mean
            }
            if (aggregationMethod === "count") {
                return count; // use count of finite values
            }
            // sum
            return sum;
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            _get(Object.getPrototypeOf(WeaveC3Histogram.prototype), "componentDidUpdate", this).call(this);
            //console.log("component did update");
            //var start = Date.now();
            var newElementSize = this.getElementSize();
            if (!_.isEqual(newElementSize, this.elementSize)) {
                this.chart.resize(newElementSize);
                this.elementSize = newElementSize;
            }
            //var end = Date.now();
            //console.log(end - start);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            _get(Object.getPrototypeOf(WeaveC3Histogram.prototype), "componentWillUnmount", this).call(this);
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            _get(Object.getPrototypeOf(WeaveC3Histogram.prototype), "componentDidMount", this).call(this);
            document.addEventListener("keydown", this.toggleKey.bind(this));
            document.addEventListener("keyup", this.toggleKey.bind(this));
            var axisChanged = _.debounce(this._axisChanged.bind(this), 100);
            var dataChanged = _.debounce(this._dataChanged.bind(this), 100);
            var selectionKeySetChanged = this._selectionKeysChanged.bind(this);
            var probeKeySetChanged = _.debounce(this._probedKeysChanged.bind(this), 100);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "binnedColumn", path: plotterPath.push("binnedColumn"), callbacks: [dataChanged, axisChanged] }, { name: "columnToAggregate", path: plotterPath.push("columnToAggregate"), callbacks: dataChanged }, { name: "aggregationMethod", path: plotterPath.push("aggregationMethod"), callbacks: [dataChanged, axisChanged] }, { name: "fillStyle", path: plotterPath.push("fillStyle"), callbacks: dataChanged }, { name: "lineStyle", path: plotterPath.push("lineStyle"), callbacks: dataChanged }, { name: "xAxis", path: this.toolPath.pushPlotter("xAxis"), callbacks: axisChanged }, { name: "yAxis", path: this.toolPath.pushPlotter("yAxis"), callbacks: axisChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];
            this.initializePaths(mapping);
            this.c3Config.bindto = this.element;
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3Histogram;
}(_AbstractWeaveTool3.default);

exports.default = WeaveC3Histogram;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::HistogramTool", WeaveC3Histogram);

},{"../WeaveTool":17,"../utils/FormatUtils":30,"../utils/StandardLib":31,"./AbstractWeaveTool":24,"c3":"c3","lodash":"lodash"}],28:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _c = require("c3");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _AbstractWeaveTool2 = require("./AbstractWeaveTool");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _WeaveTool = require("../WeaveTool");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /// <reference path="../../typings/c3/c3.d.ts"/>
/// <reference path="../../typings/lodash/lodash.d.ts"/>
/// <reference path="../../typings/d3/d3.d.ts"/>
/// <reference path="../../typings/react/react.d.ts"/>
/// <reference path="../../typings/weave/WeavePath.d.ts"/>

;

var WeaveC3PieChart = function (_AbstractWeaveTool) {
    _inherits(WeaveC3PieChart, _AbstractWeaveTool);

    function WeaveC3PieChart(props) {
        _classCallCheck(this, WeaveC3PieChart);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3PieChart).call(this, props));
    }

    _createClass(WeaveC3PieChart, [{
        key: "selectionKeysChanged",
        value: function selectionKeysChanged() {
            if (!this.chart) return;
            var keys = this.toolPath.selection_keyset.getKeys();
            if (keys.length) {
                this.chart.focus(keys);
            } else {
                this.chart.focus();
            }
        }
    }, {
        key: "probedKeysChanged",
        value: function probedKeysChanged() {
            var keys = this.toolPath.probe_keyset.getKeys();
            if (keys.length) {
                this.chart.focus(keys);
            } else {
                this.selectionKeysChanged();
            }
        }
    }, {
        key: "updateStyle",
        value: function updateStyle() {}
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "toggleKey",
        value: function toggleKey(event) {
            if (event.keyCode === 17 || event.keyCode === 91 || event.keyCode === 224) {
                this.keyDown = !this.keyDown;
            }
        }
    }, {
        key: "dataChanged",
        value: function dataChanged() {
            var _this2 = this;

            if (!this.chart) return;
            var numericMapping = {
                data: this.paths.data
            };
            var stringMapping = {
                fill: {
                    color: this.paths.fillStyle.push("color")
                },
                line: {},
                label: this.paths.label
            };
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.keyToIndex = {};
            this.indexToKey = {};
            this.numericRecords.forEach(function (record, index) {
                _this2.indexToKey[index] = record["id"];
                _this2.keyToIndex[record["id"]] = index;
            });
            var columns = [];
            columns = this.numericRecords.map(function (record) {
                var tempArr = [record["id"], record["data"]];
                return tempArr;
            });
            var chartType = "pie";
            if (this.paths.plotter.getState("innerRadius") > 0) {
                chartType = "donut";
            }
            this.colors = {};
            this.stringRecords.forEach(function (record) {
                _this2.colors[record["id"]] = record["fill"]["color"] || "#C0CDD1";
            });
            this.chart.load({
                columns: columns,
                type: chartType,
                colors: this.colors,
                unload: true
            });
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            _get(Object.getPrototypeOf(WeaveC3PieChart.prototype), "componentDidUpdate", this).call(this);
            var newElementSize = this.getElementSize();
            if (!_.isEqual(newElementSize, this.elementSize)) {
                this.chart.resize(newElementSize);
                this.elementSize = newElementSize;
            }
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            _get(Object.getPrototypeOf(WeaveC3PieChart.prototype), "componentWillUnmount", this).call(this);
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this3 = this;

            _get(Object.getPrototypeOf(WeaveC3PieChart.prototype), "componentDidMount", this).call(this);
            document.addEventListener("keydown", this.toggleKey.bind(this));
            document.addEventListener("keyup", this.toggleKey.bind(this));
            var dataChanged = _.debounce(this.dataChanged.bind(this), 100);
            var selectionKeySetChanged = this.selectionKeysChanged.bind(this);
            var probeKeySetChanged = _.debounce(this.probedKeysChanged.bind(this), 100);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var manifest = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "data", path: plotterPath.push("data"), callbacks: dataChanged }, { name: "label", path: plotterPath.push("label"), callbacks: dataChanged }, { name: "fillStyle", path: plotterPath.push("fill"), callbacks: dataChanged }, { name: "lineStyle", path: plotterPath.push("line"), callbacks: dataChanged }, { name: "innerRadius", path: plotterPath.push("innerRadius"), callbacks: dataChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];
            this.initializePaths(manifest);
            this.c3Config = {
                //size: this.getElementSize(),
                bindto: this.element,
                padding: {
                    top: 20,
                    bottom: 20,
                    right: 30
                },
                data: {
                    columns: [],
                    selection: {
                        enabled: true,
                        multiple: true,
                        draggable: true
                    },
                    type: "pie",
                    onclick: function onclick(d) {
                        if (!_this3.keyDown && d && d.hasOwnProperty("index")) {
                            _this3.toolPath.selection_keyset.setKeys([_this3.indexToKey[d.index]]);
                        }
                    },
                    onselected: function onselected(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this3.toolPath.selection_keyset.addKeys([_this3.indexToKey[d.index]]);
                        }
                    },
                    onunselected: function onunselected(d) {
                        if (d && d.hasOwnProperty("data")) {
                            // d has a different structure than "onselected" argument
                            _this3.toolPath.selection_keyset.setKeys([]);
                        }
                    },
                    onmouseover: function onmouseover(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this3.toolPath.probe_keyset.setKeys([_this3.indexToKey[d.index]]);
                        }
                    },
                    onmouseout: function onmouseout(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this3.toolPath.probe_keyset.setKeys([]);
                        }
                    }
                },
                pie: {
                    label: {
                        show: true,
                        format: function format(value, ratio, id) {
                            if (_this3.stringRecords && _this3.stringRecords.length) {
                                var record = _this3.stringRecords[_this3.keyToIndex[id]];
                                if (record && record["label"]) {
                                    return record["label"];
                                }
                                return String(value);
                            }
                        }
                    }
                },
                donut: {
                    label: {
                        show: true,
                        format: function format(value, ratio, id) {
                            if (_this3.stringRecords && _this3.stringRecords.length) {
                                var record = _this3.stringRecords[_this3.keyToIndex[id]];
                                if (record && record["label"]) {
                                    return record["label"];
                                }
                                return String(value);
                            }
                        }
                    }
                },
                legend: {
                    show: false
                },
                onrendered: this.updateStyle.bind(this)
            };
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3PieChart;
}(_AbstractWeaveTool3.default);

exports.default = WeaveC3PieChart;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::PieChartTool", WeaveC3PieChart);

},{"../WeaveTool":17,"./AbstractWeaveTool":24,"c3":"c3","lodash":"lodash"}],29:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractWeaveTool2 = require("./AbstractWeaveTool");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _WeaveTool = require("../WeaveTool");

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

var _FormatUtils = require("../utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _c = require("c3");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="../../typings/c3/c3.d.ts"/>
///<reference path="../../typings/d3/d3.d.ts"/>
///<reference path="../../typings/lodash/lodash.d.ts"/>
///<reference path="../../typings/react/react.d.ts"/>
///<reference path="../../typings/weave/WeavePath.d.ts"/>

/* private
 * @param records array or records
 * @param attributes array of attributes to be normalized
 */

var WeaveC3ScatterPlot = function (_AbstractWeaveTool) {
    _inherits(WeaveC3ScatterPlot, _AbstractWeaveTool);

    function WeaveC3ScatterPlot(props) {
        _classCallCheck(this, WeaveC3ScatterPlot);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3ScatterPlot).call(this, props));

        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.yAxisValueToLabel = {};
        _this.xAxisValueToLabel = {};
        return _this;
    }

    _createClass(WeaveC3ScatterPlot, [{
        key: "normalizeRecords",
        value: function normalizeRecords(records, attributes) {
            // to avoid computing the stats at each iteration.
            var columnStatsCache = {};
            attributes.forEach(function (attr) {
                columnStatsCache[attr] = {
                    min: _.min(_.pluck(records, attr)),
                    max: _.max(_.pluck(records, attr))
                };
            });
            return records.map(function (record) {
                var obj = {};
                attributes.forEach(function (attr) {
                    var min = columnStatsCache[attr].min;
                    var max = columnStatsCache[attr].max;
                    if (!min) min = 0;
                    if (max - min === 0) {
                        return 0;
                    }
                    if (record[attr]) {
                        // console.log( (record[attr] - min) / (max - min));
                        obj[attr] = (record[attr] - min) / (max - min);
                    } else {
                        // if any of the value above is null then
                        // we can't normalize
                        obj[attr] = null;
                    }
                });
                return obj;
            });
        }
    }, {
        key: "axisChanged",
        value: function axisChanged() {
            if (this.busy) {
                this.busy++;
                return;
            }
            this.chart.axis.labels({
                x: this.paths.xAxis.getState("overrideAxisName") || this.paths.dataX.getValue("this.getMetadata('title')"),
                y: this.paths.yAxis.getState("overrideAxisName") || this.paths.dataY.getValue("this.getMetadata('title')")
            });
        }
    }, {
        key: "dataChanged",
        value: function dataChanged() {
            var _this2 = this;

            if (this.busy) {
                this.busy++;
                return;
            }
            var numericMapping = {
                point: {
                    x: this.paths.dataX,
                    y: this.paths.dataY
                },
                size: this.paths.sizeBy
            };
            var stringMapping = {
                point: {
                    x: this.paths.dataX,
                    y: this.paths.dataY
                },
                fill: {
                    //alpha: this._fillStylePath.push("alpha"),
                    color: this.paths.fill.push("color")
                },
                line: {
                    //alpha: this._lineStylePath.push("alpha"),
                    color: this.paths.line.push("color")
                }
            };
            this.dataXType = this.paths.dataX.getValue("this.getMetadata('dataType')");
            this.dataYType = this.paths.dataY.getValue("this.getMetadata('dataType')");
            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });
            this.records = _.zip(this.numericRecords, this.stringRecords);
            this.records = _.sortByOrder(this.records, ["size", "id"], ["desc", "asc"]);
            if (this.records.length) {
                ;

                var _$unzip = _.unzip(this.records);

                var _$unzip2 = _slicedToArray(_$unzip, 2);

                this.numericRecords = _$unzip2[0];
                this.stringRecords = _$unzip2[1];
            }this.keyToIndex = {};
            this.indexToKey = {};
            this.yAxisValueToLabel = {};
            this.xAxisValueToLabel = {};
            this.numericRecords.forEach(function (record, index) {
                _this2.keyToIndex[record["id"]] = index;
                _this2.indexToKey[index] = record["id"];
            });
            this.stringRecords.forEach(function (record, index) {
                _this2.xAxisValueToLabel[_this2.numericRecords[index]["point"]["x"]] = record["point"]["x"];
                _this2.yAxisValueToLabel[_this2.numericRecords[index]["point"]["y"]] = record["point"]["y"];
            });
            this.normalizedRecords = this.normalizeRecords(this.numericRecords, ["size"]);
            this.plotterState = this.paths.plotter.getUntypedState ? this.paths.plotter.getUntypedState() : this.paths.plotter.getState();
            this.normalizedPointSizes = this.normalizedRecords.map(function (normalizedRecord) {
                if (_this2.plotterState && _this2.plotterState.sizeBy.length) {
                    var minScreenRadius = _this2.plotterState.minScreenRadius;
                    var maxScreenRadius = _this2.plotterState.maxScreenRadius;
                    return (normalizedRecord && normalizedRecord["size"] ? minScreenRadius + normalizedRecord["size"] * (maxScreenRadius - minScreenRadius) : _this2.plotterState.defaultScreenRadius) || 3;
                } else {
                    return _this2.plotterState.defaultScreenRadius || 3;
                }
            });
            this.axisChanged();
            this.busy = 1;
            this.chart.load({ data: _.pluck(this.numericRecords, "point"), unload: true, done: function done() {
                    if (_this2.busy > 1) {
                        _this2.busy = 0;
                        _this2.dataChanged();
                    } else {
                        _this2.busy = 0;
                    }
                } });
        }
    }, {
        key: "_selectionKeysChanged",
        value: function _selectionKeysChanged() {
            var _this3 = this;

            if (!this.chart) return;
            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            if (selectedIndices.length) {
                this.customStyle(unselectedIndices, "circle", ".c3-shape", { opacity: 0.3, "stroke-opacity": 0.0 });
                this.customStyle(selectedIndices, "circle", ".c3-shape", { opacity: 1.0, "stroke-opacity": 1.0 });
                this.chart.select(["y"], selectedIndices, true);
            } else {
                this.customStyle(indices, "circle", ".c3-shape", { opacity: 1.0, "stroke-opacity": 0.0 });
                this.chart.select(["y"], [], true);
            }
        }
    }, {
        key: "_probedKeysChanged",
        value: function _probedKeysChanged() {
            var _this4 = this;

            var selectedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this4.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this4.keyToIndex[key]);
            });
            var unselectedIndices = _.difference(indices, selectedIndices);
            if (selectedIndices.length) {
                this.customStyle(unselectedIndices, "circle", ".c3-shape", { opacity: 0.3, "stroke-opacity": 0.0 });
                this.customStyle(selectedIndices, "circle", ".c3-shape", { opacity: 1.0, "stroke-opacity": 0.0 });
            } else {
                this._selectionKeysChanged();
            }
        }
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "toggleKey",
        value: function toggleKey(event) {
            if (event.keyCode === 17 || event.keyCode === 91 || event.keyCode === 224) {
                this.keyDown = !this.keyDown;
            }
        }
    }, {
        key: "_updateStyle",
        value: function _updateStyle() {
            d3.select(this.element).selectAll("circle").style("opacity", 1).style("stroke", "black").style("stroke-opacity", 0.0);
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            _get(Object.getPrototypeOf(WeaveC3ScatterPlot.prototype), "componentDidUpdate", this).call(this);
            //console.log("resizing");
            //var start = Date.now();
            var newElementSize = this.getElementSize();
            if (!_.isEqual(newElementSize, this.elementSize)) {
                this.chart.resize(newElementSize);
                this.elementSize = newElementSize;
            }
            //var end = Date.now();
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            this.chart.destroy();
            _get(Object.getPrototypeOf(WeaveC3ScatterPlot.prototype), "componentWillUnmount", this).call(this);
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this5 = this;

            _get(Object.getPrototypeOf(WeaveC3ScatterPlot.prototype), "componentDidMount", this).call(this);
            document.addEventListener("keydown", this.toggleKey.bind(this));
            document.addEventListener("keyup", this.toggleKey.bind(this));
            var axisChanged = this.axisChanged.bind(this);
            var dataChanged = this.dataChanged.bind(this);
            var selectionKeySetChanged = this._selectionKeysChanged.bind(this);
            var probeKeySetChanged = this._probedKeysChanged.bind(this);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: dataChanged }, { name: "dataX", path: plotterPath.push("dataX"), callbacks: [dataChanged, axisChanged] }, { name: "dataY", path: plotterPath.push("dataY"), callbacks: [dataChanged, axisChanged] }, { name: "sizeBy", path: plotterPath.push("sizeBy"), callbacks: dataChanged }, { name: "fill", path: plotterPath.push("fill"), callbacks: [dataChanged] }, { name: "line", path: plotterPath.push("line"), callbacks: dataChanged }, { name: "xAxis", path: this.toolPath.pushPlotter("xAxis"), callbacks: axisChanged }, { name: "yAxis", path: this.toolPath.pushPlotter("yAxis"), callbacks: axisChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];
            this.initializePaths(mapping);
            this.c3Config = {
                bindto: this.element,
                padding: {
                    top: 20,
                    bottom: 20,
                    right: 30
                },
                data: {
                    rows: [],
                    x: "x",
                    xSort: false,
                    type: "scatter",
                    selection: {
                        enabled: true,
                        multiple: true,
                        draggable: true
                    },
                    color: function color(_color, d) {
                        if (_this5.stringRecords && d.hasOwnProperty("index")) {
                            // find the corresponding index of numericRecords in stringRecords
                            var id = _this5.indexToKey[d.index];
                            var index = _.pluck(_this5.stringRecords, "id").indexOf(id);
                            var record = _this5.stringRecords[index];
                            return record && record["fill"] && record["fill"]["color"] ? record["fill"]["color"] : "#000000";
                        }
                        return "#000000";
                    },
                    onclick: function onclick(d) {
                        if (!_this5.keyDown && d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.setKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onselected: function onselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.addKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onunselected: function onunselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.removeKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onmouseover: function onmouseover(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([_this5.indexToKey[d.index]]);
                        }
                    },
                    onmouseout: function onmouseout(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([]);
                        }
                    }
                },
                legend: {
                    show: false
                },
                axis: {
                    x: {
                        label: {
                            text: "",
                            position: "outer-center"
                        },
                        tick: {
                            fit: false,
                            rotate: 0,
                            format: function format(num) {
                                if (_this5.paths.dataX && _this5.xAxisValueToLabel && _this5.dataXType !== "number") {
                                    return _this5.xAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            }
                        }
                    },
                    y: {
                        label: {
                            text: "",
                            position: "outer-middle"
                        },
                        tick: {
                            format: function format(num) {
                                if (_this5.paths.dataY && _this5.yAxisValueToLabel && _this5.dataYType !== "number") {
                                    return _this5.yAxisValueToLabel[num] || "";
                                } else {
                                    return String(_FormatUtils2.default.defaultNumberFormatting(num));
                                }
                            }
                        }
                    }
                },
                grid: {
                    x: {
                        show: true
                    },
                    y: {
                        show: true
                    }
                },
                point: {
                    r: function r(d) {
                        if (d.hasOwnProperty("index")) {
                            return _this5.normalizedPointSizes[d.index];
                        }
                    }
                },
                onrendered: this._updateStyle.bind(this)
            };
            this.chart = (0, _c.generate)(this.c3Config);
        }
    }]);

    return WeaveC3ScatterPlot;
}(_AbstractWeaveTool3.default);

exports.default = WeaveC3ScatterPlot;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::ScatterPlotTool", WeaveC3ScatterPlot);

},{"../WeaveTool":17,"../utils/FormatUtils":30,"./AbstractWeaveTool":24,"c3":"c3","d3":"d3","lodash":"lodash"}],30:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /// <reference path="../../typings/d3/d3.d.ts"/>

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _d = require("d3");

var d3 = _interopRequireWildcard(_d);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormatUtils = function () {
    function FormatUtils() {
        _classCallCheck(this, FormatUtils);
    }

    _createClass(FormatUtils, null, [{
        key: "defaultNumberFormatting",

        // this function returns the default number formating.
        // for number values, we round them to at most 4 decimal places
        // unless the number is very small, in which case we just return it
        value: function defaultNumberFormatting(x) {
            if (x < 0.0001) {
                return x;
            } else {
                return d3.round(x, 4);
            }
        }
    }]);

    return FormatUtils;
}();

exports.default = FormatUtils;

},{"d3":"d3"}],31:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /// <reference path="../../typings/lodash/lodash.d.ts"/>

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StandardLib = function () {
    function StandardLib() {
        _classCallCheck(this, StandardLib);
    }

    _createClass(StandardLib, null, [{
        key: "findDeep",

        /**
           * Searches for the first nested object with matching properties
           * @param roo The root Object.
           * @param match Either an Object with properties to match, or a Function that checks for a match.
         *
         * @returns returns an object with the matching properties
           */
        value: function findDeep(root, match) {
            if (typeof match !== "function") {
                match = _.matches(match);
            }
            if (match(root)) {
                return root;
            }
            if ((typeof root === "undefined" ? "undefined" : _typeof(root)) == "object") {
                var key;
                for (key in root) {
                    var found = this.findDeep(root[key], match);
                    if (found) return found;
                }
            }
        }
        /**
          * Adds undefined values to new state for properties in
          * current state not found in new state.
          */

    }, {
        key: "includeMissingPropertyPlaceholders",
        value: function includeMissingPropertyPlaceholders(currentState, newState) {
            var key;
            for (key in currentState) {
                if (!newState.hasOwnProperty(key)) {
                    newState[key] = undefined;
                }
            }
            return newState;
        }
        /**
          * Calculates an interpolated color for a normalized value.
          * @param normValue A Number between 0 and 1.
          * @param colors An Array or list of colors to interpolate between.  Normalized values of 0 and 1 will be mapped to the first and last colors.
          * @return An interpolated color associated with the given normValue based on the list of color values.
          */

    }, {
        key: "interpolateColor",
        value: function interpolateColor(normValue) {
            for (var _len = arguments.length, colors = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                colors[_key - 1] = arguments[_key];
            }

            // handle an array of colors as the second parameter
            if (colors.length === 1 && Array.isArray(colors[0])) {
                colors = colors[0];
            }
            // handle invalid parameters
            if (normValue < 0 || normValue > 1 || colors.length === 0) {
                return NaN;
            }
            // find the min and max colors we want to interpolate between
            var maxIndex = Math.floor(colors.length - 1);
            var leftIndex = Math.floor(maxIndex * normValue);
            var rightIndex = Math.floor(leftIndex + 1);
            // handle boundary condition
            if (rightIndex === colors.length) {
                return parseInt(colors[leftIndex], 16);
            }
            var minColor = colors[leftIndex];
            var maxColor = colors[rightIndex];
            // normalize the norm value between the two norm values associated with the surrounding colors
            normValue = normValue * maxIndex - leftIndex;
            var percentLeft = 1 - normValue; // relevance of minColor
            var percentRight = normValue; // relevance of maxColor
            var R = 0xFF0000;
            var G = 0x00FF00;
            var B = 0x0000FF;
            return percentLeft * (minColor & R) + percentRight * (maxColor & R) & R | percentLeft * (minColor & G) + percentRight * (maxColor & G) & G | percentLeft * (minColor & B) + percentRight * (maxColor & B) & B;
        }
        /**
        * This function converts a decimal number to a 6 digit hexadecimal string
        * @param dec A decimal number
        * @return the hexadecimal value of the decimal number
        */

    }, {
        key: "decimalToHex",
        value: function decimalToHex(dec) {
            return _.padLeft(dec.toString(16), 6, "0");
        }
        /**
         * This function return the normalized value between a range
         * if no range is provided, the default range will be 0 and 1
         *
         * @param value The value to be normalized
         * @param min the range min value
         * @param max the range max value
         */

    }, {
        key: "normalize",
        value: function normalize(value, min, max) {
            if (!min) {
                min = 0;
            }
            if (!max) {
                max = 1;
            }
            return (value - min) / (max - min);
        }
        /**
         *  This function takes merges an object into another
         *
         * @param into {object} the object to merge into
         * @param obj {obj} the object to merge from
         */

    }, {
        key: "merge",
        value: function merge(into, obj) {
            var attr;
            for (attr in obj) {
                into[attr] = obj[attr];
            }
        }
        /**
         * Temporary polyfill workaround for String.startsWith
         * for projects that are targetting es5
         *
         *  determines whether a string begins with the characters of another string, returning true or false as appropriate.
         *
         * @param str {string} the str string in which to search for in str.startsWith
         * @param searchString {string} The characters to be searched for at the start of this string.
         * @param position {number?} Optional. The position in this string at which to begin searching for searchString; defaults to 0.
         *
         * @returns true or false
         *
         */

    }, {
        key: "startsWith",
        value: function startsWith(str, searchString, position) {
            position = position || 0;
            return str.indexOf(searchString, position) === position;
        }
    }, {
        key: "resolveRelative",
        value: function resolveRelative(path, base) {
            // Upper directory
            if (StandardLib.startsWith(path, "../")) {
                return StandardLib.resolveRelative(path.slice(3), base.replace(/\/[^\/]*$/, ""));
            }
            // Relative to the root
            if (StandardLib.startsWith(path, "/")) {
                var match = base.match(/(\w*:\/\/)?[^\/]*\//) || [base];
                return match[0] + path.slice(1);
            }
            //relative to the current directory
            return base.replace(/\/[^\/]*$/, "") + "/" + path;
        }
    }, {
        key: "getDataBounds",
        value: function getDataBounds(column) {
            return {
                min: _.min(column),
                max: _.max(column)
            };
        }
        /**
         *
         *   This function return and object whose keys are url
         *   parameters and value
         */

    }, {
        key: "getUrlParams",
        value: function getUrlParams() {
            var queryParams = {};
            var query = window.location.search.substring(1);
            if (!query) {
                return {};
            }
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (typeof queryParams[pair[0]] === "undefined") {
                    queryParams[pair[0]] = decodeURIComponent(pair[1]);
                } else if (typeof queryParams[pair[0]] === "string") {
                    var arr = [queryParams[pair[0]], decodeURIComponent(pair[1])];
                    queryParams[pair[0]] = arr;
                } else {
                    queryParams[pair[0]].push(decodeURIComponent(pair[1]));
                }
            }
            return queryParams;
        }
    }]);

    return StandardLib;
}();

exports.default = StandardLib;

},{"lodash":"lodash"}],32:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require("react-bootstrap");

var bs = _interopRequireWildcard(_reactBootstrap);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _WeaveTool = require("../outts/WeaveTool.jsx");

var _reactDatePicker = require("react-date-picker");

var _reactDatePicker2 = _interopRequireDefault(_reactDatePicker);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var customSearchStyle = {
    display: "flex",
    flexDirection: "row",
    height: 30,
    width: "100%"
};

var inputStyle = {
    flex: 1,
    paddingLeft: 4,
    paddingRight: 4
};

var searchButtonStyle = {
    flex: 1
};

var glyphStyle = {
    fontSize: "12px"
};

var CustomSearchTool = function (_React$Component) {
    _inherits(CustomSearchTool, _React$Component);

    function CustomSearchTool(props) {
        _classCallCheck(this, CustomSearchTool);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomSearchTool).call(this, props));

        _this.props.toolPath.request("ExternalTool");

        _this.state = {
            searchObject: _this.props.toolPath.push("searchValues").request("LinkableVariable").getState() || {}
        };
        _this.searchFields = _this.props.toolPath.push("searchFields").request("LinkableVariable").getState() || [];

        _this.updateStateFuncs = {};
        _this.searchFields.forEach(function (field) {
            this.updateStateFuncs[field.label] = this.updateState.bind(this, field.label);
        }, _this);

        _this.debouncedComponentDidUpdate = _lodash2.default.debounce(function () {
            _this.props.toolPath.state("searchValues", _this.state.searchObject);
        }, 2000);
        return _this;
    }

    _createClass(CustomSearchTool, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            this.props.toolPath.addCallback(this, this.handleWeaveState, true, false);
            this.props.toolPath.push("searchFields").addCallback(this, function () {
                _this2.searchFields = _this2.props.toolPath.getState("searchFields") || [];
                _this2.updateStateFuncs = {};
                _this2.searchFields.forEach(function (field) {
                    _this2.updateStateFuncs[field.label] = _this2.updateState.bind(_this2, field.label);
                }, _this2);
            }, true);
        }
    }, {
        key: "handleWeaveState",
        value: function handleWeaveState() {
            this.setState({
                searchObject: this.props.toolPath.getState("searchValues") || {}
            });
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            // this.debouncedComponentDidUpdate();
        }
    }, {
        key: "submitSearch",
        value: function submitSearch(event) {
            this.props.toolPath.state("searchValues", this.state.searchObject);
            if (event) {
                event.preventDefault();
            }
        }
    }, {
        key: "updateState",
        value: function updateState(label, event, callback) {
            var components = _lodash2.default.clone(this.state.searchObject);
            components[label] = event.target.value;
            this.setState({
                searchObject: components
            }, callback);
        }
    }, {
        key: "updateDateField",
        value: function updateDateField(label, value, moment) {
            // TODO use moment object to manipulate format
            var components = _lodash2.default.clone(this.state.searchObject);
            components[label] = value;
            this.setState({
                searchObject: components
            });
        }
    }, {
        key: "updateStateDateField",
        value: function updateStateDateField(label, event) {
            var datePicker = this.refs["datePicker" + label];

            // set the datepicker date so that it moves to that view
            if (datePicker) {
                if (isNaN(Date.parse(event.target.value)) === false) {
                    datePicker.gotoDate(new Date(event.target.value));
                }
            }
            this.updateStateFuncs[label](event);
        }
    }, {
        key: "removeSearchOption",
        value: function removeSearchOption(key) {
            var _this3 = this;

            var components = _lodash2.default.clone(this.state.searchObject);
            delete components[key];
            this.setState({
                searchObject: components
            }, function () {
                if (!Object.keys(_this3.state.searchObject).length) {
                    _this3.submitSearch();
                }
            });
        }
    }, {
        key: "handleDropdownSelect",
        value: function handleDropdownSelect(event, eventKey) {
            var components = _lodash2.default.clone(this.state.searchObject);
            components[eventKey] = this.state.searchObject[eventKey] || "";
            this.setState({
                searchObject: components
            });
        }
    }, {
        key: "render",
        value: function render() {
            var menuItems = this.searchFields.map(function (searchField, index) {
                return _react2.default.createElement(
                    bs.MenuItem,
                    { key: index, eventKey: searchField.label },
                    " ",
                    searchField.label,
                    " "
                );
            });

            var inputs = [];

            for (var i in this.searchFields) {
                var label = this.searchFields[i].label;
                var type = this.searchFields[i].type;

                if (this.state.searchObject.hasOwnProperty(label)) {

                    var closeButton = _react2.default.createElement(
                        bs.Button,
                        { className: "close-button", key: "close" + i, tabIndex: -1, onClick: this.removeSearchOption.bind(this, label), bsSize: this.props.bsSize },
                        _react2.default.createElement(bs.Glyphicon, { glyph: "remove", style: glyphStyle })
                    );

                    var searchInput = "";

                    if (type === "date") {
                        var dateFormat = this.searchFields[i].dateFormat || "MM/DD/YYYY";
                        var datePicker = _react2.default.createElement(
                            bs.Popover,
                            { id: "date picker" },
                            _react2.default.createElement(_reactDatePicker2.default, { ref: "datePicker" + label, dateFormat: dateFormat, date: this.state.searchObject[label], onChange: this.updateDateField.bind(this, label) })
                        );

                        searchInput = _react2.default.createElement(
                            "div",
                            { style: inputStyle, key: "searchInput" + i },
                            _react2.default.createElement(
                                bs.OverlayTrigger,
                                { trigger: "click", rootClose: true, placement: "bottom", overlay: datePicker },
                                _react2.default.createElement(bs.Input, {
                                    bsSize: this.props.bsSize,
                                    value: this.state.searchObject[label],
                                    ref: label,
                                    type: "text",
                                    addonBefore: label,
                                    buttonAfter: closeButton,
                                    hasFeedback: true,
                                    placeholder: dateFormat,
                                    onChange: this.updateStateDateField.bind(this, label) })
                            )
                        );
                    } else if (type === "text") {
                        searchInput = _react2.default.createElement(
                            "div",
                            { style: inputStyle, key: "searchInput" + i },
                            _react2.default.createElement(bs.Input, {
                                bsSize: this.props.bsSize,
                                value: this.state.searchObject[label],
                                ref: label,
                                type: "text",
                                addonBefore: label,
                                buttonAfter: closeButton,
                                hasFeedback: true,
                                placeholder: "Enter " + label,
                                onChange: this.updateStateFuncs[label] })
                        );
                    }
                    inputs.push(searchInput);
                }
            }
            return _react2.default.createElement(
                "div",
                { style: customSearchStyle },
                _react2.default.createElement(
                    bs.Dropdown,
                    { id: "dropdown", title: "Dropdown", bsSize: this.props.bsSize, bsStyle: "primary", onSelect: this.handleDropdownSelect.bind(this) },
                    _react2.default.createElement(
                        bs.Dropdown.Toggle,
                        { bsStyle: "primary" },
                        _react2.default.createElement(bs.Glyphicon, { glyph: "search" })
                    ),
                    _react2.default.createElement(
                        bs.Dropdown.Menu,
                        null,
                        menuItems
                    )
                ),
                _react2.default.createElement(
                    "form",
                    { onsubmit: this.submitSearch.bind(this), style: customSearchStyle },
                    inputs,
                    Object.keys(this.state.searchObject).length ? _react2.default.createElement(
                        "div",
                        { style: { float: "right" } },
                        _react2.default.createElement(
                            bs.ButtonInput,
                            { type: "submit", bsStyle: "primary", onClick: this.submitSearch.bind(this) },
                            " Search "
                        )
                    ) : null
                )
            );
        }
    }]);

    return CustomSearchTool;
}(_react2.default.Component);

exports.default = CustomSearchTool;

(0, _WeaveTool.registerToolImplementation)("CustomSearchTool", CustomSearchTool);

},{"../outts/WeaveTool.jsx":17,"lodash":"lodash","react":"react","react-bootstrap":"react-bootstrap","react-date-picker":7}],33:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Layout = require("../outts/react-flexible-layout/Layout.jsx");

var _Layout2 = _interopRequireDefault(_Layout);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _WeavePanel = require("./WeavePanel.js");

var _WeavePanel2 = _interopRequireDefault(_WeavePanel);

var _WeavePanelManager = require("./WeavePanelManager.js");

var WeavePanelManager = _interopRequireWildcard(_WeavePanelManager);

var _weaveC3Barchart = require("../outts/tools/weave-c3-barchart.jsx");

var _weaveC3Barchart2 = _interopRequireDefault(_weaveC3Barchart);

var _weaveC3Scatterplot = require("../outts/tools/weave-c3-scatterplot.jsx");

var _weaveC3Scatterplot2 = _interopRequireDefault(_weaveC3Scatterplot);

var _weaveC3Colorlegend = require("../outts/tools/weave-c3-colorlegend.jsx");

var _weaveC3Colorlegend2 = _interopRequireDefault(_weaveC3Colorlegend);

var _weaveC3Linechart = require("./tools/weave-c3-linechart.jsx");

var _weaveC3Linechart2 = _interopRequireDefault(_weaveC3Linechart);

var _weaveC3Piechart = require("../outts/tools/weave-c3-piechart.jsx");

var _weaveC3Piechart2 = _interopRequireDefault(_weaveC3Piechart);

var _weaveC3Histogram = require("../outts/tools/weave-c3-histogram.jsx");

var _weaveC3Histogram2 = _interopRequireDefault(_weaveC3Histogram);

var _weaveBarchart = require("./tools/weave-barchart.jsx");

var _weaveBarchart2 = _interopRequireDefault(_weaveBarchart);

var _map = require("./tools/map.js");

var _map2 = _interopRequireDefault(_map);

var _weaveReactTable = require("./tools/weave-react-table.jsx");

var _weaveReactTable2 = _interopRequireDefault(_weaveReactTable);

var _weaveSessionStateMenu = require("./tools/weave-session-state-menu.jsx");

var _weaveSessionStateMenu2 = _interopRequireDefault(_weaveSessionStateMenu);

var _CustomSearchTool = require("./CustomSearchTool.jsx");

var _CustomSearchTool2 = _interopRequireDefault(_CustomSearchTool);

var _WeaveTool = require("../outts/WeaveTool.jsx");

var _ToolOverlay = require("../outts/ToolOverlay.jsx");

var _ToolOverlay2 = _interopRequireDefault(_ToolOverlay);

var _StandardLib = require("../outts/utils/StandardLib.js");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* global Weave, weavejs */

var LAYOUT = "Layout";

var LEFT = "left";
var RIGHT = "right";
var TOP = "top";
var BOTTOM = "bottom";
var VERTICAL = "vertical";
var HORIZONTAL = "horizontal";

var TOOLOVERLAY = "tooloverlay";

var WeaveLayoutManager = function (_React$Component) {
    _inherits(WeaveLayoutManager, _React$Component);

    function WeaveLayoutManager(props) {
        _classCallCheck(this, WeaveLayoutManager);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveLayoutManager).call(this, props));

        _this.weave = _this.props.weave || new Weave();
        _this.weave.path(LAYOUT).request("FlexibleLayout");
        _this.margin = 8;
        return _this;
    }

    _createClass(WeaveLayoutManager, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this2 = this;

            window.addEventListener("resize", this._forceUpdate = _lodash2.default.throttle(function () {
                _this2.dirty = true;_this2.forceUpdate();
            }, 30));
            this.weave.root.childListCallbacks.addGroupedCallback(this, _lodash2.default.debounce(this.forceUpdate.bind(this), 0), true);
            this.weave.root.childListCallbacks.addGroupedCallback(this, function () {
                console.log("test child list callback");
            });
            this.weave.path(LAYOUT).addCallback(this, _lodash2.default.debounce(this.forceUpdate.bind(this), 0), true);
            this.weave.path(LAYOUT).state(this.simplifyState(this.weave.path(LAYOUT).getState()));
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            window.removeEventListener("resize", this._forceUpdate);
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            if (Weave.detectChange(this, this.weave.getObject(LAYOUT)) || this.dirty) {
                // dirty flag to trigger render on window resize
                this.dirty = false;
                //_.debounce(this.forceUpdate.bind(this), 0)();
                this.forceUpdate();
            }
        }
    }, {
        key: "saveState",
        value: function saveState(newState) {
            newState = this.simplifyState(newState);
            newState.flex = 1;
            this.weave.path(LAYOUT).state(newState);
            // temporary hack because weave
            // doesn't properly callback forceUpdate
            //this.forceUpdate();
        }
    }, {
        key: "onDragStart",
        value: function onDragStart(id, event) {
            this.toolDragged = id;
            var toolRef = id[0]; // toolName as used in the ref for the weave tool.
            var element = _reactDom2.default.findDOMNode(this.refs[toolRef]);
            event.dataTransfer.setDragImage(element, 0, 0);
            event.dataTransfer.setData('text/html', null);
        }
    }, {
        key: "hideOverlay",
        value: function hideOverlay() {
            var toolOverlayStyle = _lodash2.default.clone(this.refs[TOOLOVERLAY].state.style);
            toolOverlayStyle.visibility = "hidden";
            toolOverlayStyle.left = toolOverlayStyle.top = toolOverlayStyle.width = toolOverlayStyle.height = 0;
            this.refs[TOOLOVERLAY].setState({
                style: toolOverlayStyle
            });
        }
    }, {
        key: "onDragEnd",
        value: function onDragEnd() {
            if (this.toolDragged && this.toolOver) {
                this.updateLayout(this.toolDragged, this.toolOver, this.dropZone);
                this.toolDragged = null;
                this.dropZone = null;
                this.hideOverlay();
            }
        }
    }, {
        key: "onDragOver",
        value: function onDragOver(toolOver, event) {
            if (!this.toolDragged) {
                return;
            }
            if (_lodash2.default.isEqual(this.toolDragged, toolOver)) {
                // hide the overlay if hovering over the tool being dragged
                this.toolOver = null;
                this.hideOverlay();
                return;
            }

            var toolNode = this.refs[LAYOUT].getDOMNodeFromId(toolOver);
            var toolNodePosition = toolNode.getBoundingClientRect();

            var toolOverlayStyle = _lodash2.default.clone(this.refs[TOOLOVERLAY].state.style);
            var dropZone = this.getDropZone(toolOver, event);
            toolOverlayStyle.left = toolNodePosition.left;
            toolOverlayStyle.top = toolNodePosition.top;
            toolOverlayStyle.width = toolNodePosition.width;
            toolOverlayStyle.height = toolNodePosition.height;
            toolOverlayStyle.visibility = "visible";

            if (dropZone === LEFT) {
                toolOverlayStyle.width = toolNodePosition.width / 2;
            } else if (dropZone === RIGHT) {
                toolOverlayStyle.left = toolNodePosition.left + toolNodePosition.width / 2;
                toolOverlayStyle.width = toolNodePosition.width / 2;
            } else if (dropZone === BOTTOM) {
                toolOverlayStyle.top = toolNodePosition.top + toolNodePosition.height / 2;
                toolOverlayStyle.height = toolNodePosition.height / 2;
            } else if (dropZone === TOP) {
                toolOverlayStyle.height = toolNodePosition.height / 2;
            }

            if (dropZone !== this.dropZone || !_lodash2.default.isEqual(toolOver, this.toolOver)) {
                this.refs[TOOLOVERLAY].setState({
                    style: toolOverlayStyle
                });
            }

            this.dropZone = dropZone;
            this.toolOver = toolOver;
        }
    }, {
        key: "getDropZone",
        value: function getDropZone(id, event) {
            if (this.toolDragged) {
                if (!_lodash2.default.isEqual(this.toolDragged, id)) {
                    var toolNode = this.refs[LAYOUT].getDOMNodeFromId(id);
                    var toolNodePosition = toolNode.getBoundingClientRect();

                    var center = {
                        x: (toolNodePosition.right - toolNodePosition.left) / 2,
                        y: (toolNodePosition.bottom - toolNodePosition.top) / 2
                    };

                    var mousePosRelativeToCenter = {
                        x: event.clientX - (toolNodePosition.left + center.x),
                        y: event.clientY - (toolNodePosition.top + center.y)
                    };

                    var mouseNorm = {
                        x: mousePosRelativeToCenter.x / (toolNodePosition.width / 2),
                        y: mousePosRelativeToCenter.y / (toolNodePosition.height / 2)
                    };

                    var mousePolarCoord = {
                        r: Math.sqrt(mouseNorm.x * mouseNorm.x + mouseNorm.y * mouseNorm.y),
                        theta: Math.atan2(mouseNorm.y, mouseNorm.x)
                    };

                    var zones = [RIGHT, BOTTOM, LEFT, TOP];

                    var zoneIndex = Math.round(mousePolarCoord.theta / (2 * Math.PI) * 4 + 4) % 4;

                    if (mousePolarCoord.r < 0.34) {
                        return "center";
                    } else {
                        return zones[zoneIndex];
                    }
                }
            }
        }
    }, {
        key: "simplifyState",
        value: function simplifyState(state) {
            if (!state) return {};
            var children = state.children;

            if (!children) {
                return state;
            }

            if (children.length === 1) {
                return this.simplifyState(children[0]);
            }

            var simpleChildren = [];

            for (var i = 0; i < children.length; i++) {
                var child = this.simplifyState(children[i]);
                if (child.children && child.direction === state.direction) {
                    var childChildren = child.children;
                    for (var ii = 0; ii < childChildren.length; ii++) {
                        var childChild = childChildren[ii];
                        childChild.flex *= child.flex;
                        simpleChildren.push(childChild);
                    }
                } else {
                    simpleChildren.push(child);
                }
            }
            state.children = simpleChildren;
            var totalSizeChildren = _lodash2.default.sum(_lodash2.default.map(children, "flex"));

            //Scale flex values between 0 and 1 so they sum to 1, avoiding an apparent
            //flex bug where space is lost if sum of flex values is less than 1.
            for (var i = 0; i < state.children.length; i++) {
                state.children[i].flex = _StandardLib2.default.normalize(state.children[i].flex, 0, totalSizeChildren);
            }

            return state;
        }
    }, {
        key: "updateLayout",
        value: function updateLayout(toolDragged, toolDroppedOn, dropZone) {

            if (!this.toolDragged || !this.toolOver || !this.dropZone) {
                return;
            }

            var newState = _lodash2.default.cloneDeep(this.weave.path(LAYOUT).getState());
            var src = _StandardLib2.default.findDeep(newState, { id: toolDragged });
            var dest = _StandardLib2.default.findDeep(newState, { id: toolDroppedOn });
            if (_lodash2.default.isEqual(src.id, dest.id)) {
                return;
            }

            if (dropZone === "center") {
                var srcId = src.id;
                src.id = dest.id;
                dest.id = srcId;
            } else {
                var srcParentArray = _StandardLib2.default.findDeep(newState, function (obj) {
                    return Array.isArray(obj) && obj.indexOf(src) >= 0;
                });

                srcParentArray.splice(srcParentArray.indexOf(src), 1);

                delete dest.id;
                dest.direction = dropZone === TOP || dropZone === BOTTOM ? VERTICAL : HORIZONTAL;

                dest.children = [{
                    id: toolDragged,
                    flex: 0.5
                }, {
                    id: toolDroppedOn,
                    flex: 0.5
                }];
                if (dropZone === BOTTOM || dropZone === RIGHT) {
                    dest.children.reverse();
                }
            }
            this.saveState(newState);
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var children = [];
            var newState = this.weave.path(LAYOUT).getState();

            var paths = this.weave.path().getChildren();
            var rect;
            if (this.element) {
                rect = this.element.getBoundingClientRect();
            }

            for (var i = 0; i < paths.length; i++) {
                var path = paths[i];
                var impl = path.getType();
                if (impl === "weave.visualization.tools::ExternalTool" && path.getType("toolClass")) {
                    impl = path.getState("toolClass");
                }
                if (impl === "weavejs.core.LinkableHashMap" && path.getType("class")) impl = path.getState("class");
                impl = (0, _WeaveTool.getToolImplementation)(impl);
                var toolName = path.getPath()[0];
                var node;
                var toolRect;
                var toolPosition;
                if (impl) {
                    if (this.refs[LAYOUT] && rect) {
                        node = this.refs[LAYOUT].getDOMNodeFromId(path.getPath());
                        if (node) {
                            toolRect = node.getBoundingClientRect();
                            toolPosition = {
                                top: toolRect.top - rect.top,
                                left: toolRect.left - rect.left,
                                width: toolRect.right - toolRect.left,
                                height: toolRect.bottom - toolRect.top,
                                position: "absolute"
                            };
                        }
                    }
                    children.push(_react2.default.createElement(_WeaveTool.WeaveTool, { ref: toolName, key: toolName, toolPath: path, style: toolPosition,
                        onDragOver: this.onDragOver.bind(this, path.getPath()), onDragStart: this.onDragStart.bind(this, path.getPath()), onDragEnd: this.onDragEnd.bind(this)
                    }));
                }
            }

            return _react2.default.createElement(
                "div",
                { ref: function ref(elt) {
                        _this3.element = elt;
                    }, style: { width: "100%", height: "100%", display: "flex", position: "relative" } },
                _react2.default.createElement(_Layout2.default, { key: LAYOUT, ref: LAYOUT, state: _lodash2.default.cloneDeep(newState), onStateChange: this.saveState.bind(this) }),
                children,
                _react2.default.createElement(_ToolOverlay2.default, { ref: TOOLOVERLAY })
            );
        }
    }]);

    return WeaveLayoutManager;
}(_react2.default.Component);

exports.default = WeaveLayoutManager;

},{"../outts/ToolOverlay.jsx":16,"../outts/WeaveTool.jsx":17,"../outts/react-flexible-layout/Layout.jsx":18,"../outts/tools/weave-c3-barchart.jsx":25,"../outts/tools/weave-c3-colorlegend.jsx":26,"../outts/tools/weave-c3-histogram.jsx":27,"../outts/tools/weave-c3-piechart.jsx":28,"../outts/tools/weave-c3-scatterplot.jsx":29,"../outts/utils/StandardLib.js":31,"./CustomSearchTool.jsx":32,"./WeavePanel.js":34,"./WeavePanelManager.js":35,"./tools/map.js":37,"./tools/weave-barchart.jsx":49,"./tools/weave-c3-linechart.jsx":50,"./tools/weave-react-table.jsx":51,"./tools/weave-session-state-menu.jsx":52,"lodash":"lodash","react":"react","react-dom":"react-dom"}],34:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function percentToNumber(percentString) {
    if (percentString.endsWith("%")) {
        var percentValue = Number(percentString.substring(0, percentString.length - 1));
        return percentValue / 100.0;
    } else {
        return Number(percentString);
    }
}

var WeavePanel = function () {
    function WeavePanel(parent, toolPath, ToolClass) {
        var _this = this;

        _classCallCheck(this, WeavePanel);

        this.toolPath = toolPath;
        this.parent = parent;

        this.plotManagerPath = toolPath.push("children", "visualization", "plotManager");
        this.toolName = toolPath.getPath().pop();
        this.element = (0, _jquery2.default)("<div></div>").appendTo(parent).attr("id", this.toolName).css("borderStyle", "solid").css("borderColor", "4D5258").css("borderWidth", "2px").css("background", "rgba(255, 255, 255, 1.0)").css("position", "absolute");

        this.tool = new ToolClass(this.element, toolPath);
        var boundFunc = _lodash2.default.debounce(this._panelChanged.bind(this), 100);

        (0, _jquery2.default)(window).resize(boundFunc);

        ["panelY", "panelX", "panelHeight", "panelWidth", "maximized", "zOrder", "panelBorderColor"].forEach(function (item) {
            _this.toolPath.push(item).addCallback(boundFunc, true, false);
        }, this);
    }

    _createClass(WeavePanel, [{
        key: "_panelChanged",
        value: function _panelChanged() {
            var top, left, height, width;
            var toolPath = this.toolPath;
            var parent = this.parent;

            if (toolPath.getState("maximized")) {
                top = 0;
                left = 0;
                height = (0, _jquery2.default)(parent).height();
                width = (0, _jquery2.default)(parent).width();
            } else {
                top = percentToNumber(toolPath.getState("panelY")) * (0, _jquery2.default)(parent).height();
                left = percentToNumber(toolPath.getState("panelX")) * (0, _jquery2.default)(parent).width();
                height = percentToNumber(toolPath.getState("panelHeight")) * (0, _jquery2.default)(parent).height();
                width = percentToNumber(toolPath.getState("panelWidth")) * (0, _jquery2.default)(parent).width();
            }

            this.element.css("borderColor", toolPath.getState("panelBorderColor"));

            this.element.css("position", "absolute").css({ top: top, left: left, height: height, width: width, "max-height": height, "max-width": width }).css({ "-webkit-transform": "translateZ(0)" }); /* In Webkit, forces the div to be a compositing layer. */
            this._updateContents();
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.element.remove();
            this.tool.destroy();
        }
    }]);

    return WeavePanel;
}();

exports.default = WeavePanel;

},{"jquery":"jquery","lodash":"lodash"}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.registerToolImplementation = registerToolImplementation;
exports.init = init;

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _WeavePanel = require("./WeavePanel.js");

var _WeavePanel2 = _interopRequireDefault(_WeavePanel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Weave panel manager "singleton" module
 */

var toolRegistry = null;
var tools = {};
var weaveRootElmt = null;
var weaveRootPath = null;

function _createTool(parent, path) {
    var ToolClass = toolRegistry[path.getType()];
    var panel;

    if (ToolClass) {
        panel = new _WeavePanel2.default(parent, path, ToolClass);
    }
    return panel;
}

function _toolsChanged() {
    var toolNames = _lodash2.default.keys(tools);
    var newNames = weaveRootPath.getNames();

    var removedToolNames = _lodash2.default.difference(toolNames, newNames);
    var addedToolNames = _lodash2.default.difference(newNames, toolNames);

    removedToolNames.forEach(function (name) {
        tools[name].destroy();
        delete tools[name];
    });

    addedToolNames.forEach(function (name) {
        var tool = _createTool(weaveRootElmt, weaveRootPath.push(name));
        if (tool) {
            tools[name] = tool;
        }
    });

    var zIndex = 0;
    for (var idx in newNames) {
        var tool = tools[newNames[idx]];

        if (!tool) {
            continue;
        }

        var modifier = 9000 * tool.toolPath.push("zOrder").getState();
        tool.element.css("z-index", zIndex + modifier);

        zIndex++;
    }
}

// publicly exposed function
function registerToolImplementation(asClassName, jsClass) {
    if (!toolRegistry) {
        toolRegistry = {};
    }
    toolRegistry[asClassName] = jsClass;
}

// publicly exposed function
// initialize the weave panel manager
// by setting up the callback.
function init(root, weave) {
    weaveRootElmt = (0, _jquery2.default)(root);
    weaveRootPath = weave.path();
    weaveRootPath.getValue("childListCallbacks.addGroupedCallback")(null, _toolsChanged, true);
}

},{"./WeavePanel.js":34,"jquery":"jquery","lodash":"lodash"}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadLayout = exports.getUrlParams = exports.MenuTool = exports.DataTable = exports.Map = exports.Histogram = exports.PieChart = exports.LineChart = exports.ColorLegend = exports.ScatterPlot = exports.Barchart = exports.Layout = undefined;

var _WeaveLayoutManager = require("./WeaveLayoutManager");

var _WeaveLayoutManager2 = _interopRequireDefault(_WeaveLayoutManager);

var _weaveC3Barchart = require("../outts/tools/weave-c3-barchart.jsx");

var _weaveC3Barchart2 = _interopRequireDefault(_weaveC3Barchart);

var _weaveC3Scatterplot = require("../outts/tools/weave-c3-scatterplot.jsx");

var _weaveC3Scatterplot2 = _interopRequireDefault(_weaveC3Scatterplot);

var _weaveC3Colorlegend = require("../outts/tools/weave-c3-colorlegend.jsx");

var _weaveC3Colorlegend2 = _interopRequireDefault(_weaveC3Colorlegend);

var _weaveC3Linechart = require("./tools/weave-c3-linechart.jsx");

var _weaveC3Linechart2 = _interopRequireDefault(_weaveC3Linechart);

var _weaveC3Piechart = require("../outts/tools/weave-c3-piechart.jsx");

var _weaveC3Piechart2 = _interopRequireDefault(_weaveC3Piechart);

var _weaveC3Histogram = require("../outts/tools/weave-c3-histogram.jsx");

var _weaveC3Histogram2 = _interopRequireDefault(_weaveC3Histogram);

var _map = require("./tools/map.js");

var _map2 = _interopRequireDefault(_map);

var _weaveReactTable = require("./tools/weave-react-table.jsx");

var _weaveReactTable2 = _interopRequireDefault(_weaveReactTable);

var _weaveSessionStateMenu = require("./tools/weave-session-state-menu.jsx");

var _weaveSessionStateMenu2 = _interopRequireDefault(_weaveSessionStateMenu);

var _StandardLib = require("../outts/utils/StandardLib.js");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _jszip = require("jszip");

var _jszip2 = _interopRequireDefault(_jszip);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*global Weave, weavejs*/

weavejs.util.JS.JSZip = _jszip2.default;

// var WeaveUI = {
//     Layout: WeaveLayoutManager,
//     Barchart: WeaveC3Barchart,
//     ScatterPlot: WeaveC3ScatterPlot,
//     ColorLegend: WeaveC3ColorLegend,
//     LineChart: WeaveC3LineChart,
//     PieChart: WeaveC3PieChart,
//     Histogram: WeaveC3Histogram,
//     Map: WeaveOpenLayersMap,
//     DataTable: WeaveReactTable,
//     MenuTool: SessionStateMenuTool,
//     getUrlParams: StandardLib.getUrlParams,
//     loadLayout: function(weave, fileName, targetEltId, callback) {
//
//         function render() {
//             ReactDOM.render(
//                 <WeaveUI.Layout weave={weave}/>,
//                 document.getElementById(targetEltId),
//                 callback
//             );
//         }
//
//         weavejs.core.WeaveArchive.loadUrl(weave, fileName).then(render, e => {
//             console.error(e)
//         });
//
//     }
// };
//
// // namespace WeaveUI
// export default WeaveUI;

var Layout = exports.Layout = _WeaveLayoutManager2.default;
var Barchart = exports.Barchart = _weaveC3Barchart2.default;
var ScatterPlot = exports.ScatterPlot = _weaveC3Scatterplot2.default;
var ColorLegend = exports.ColorLegend = _weaveC3Colorlegend2.default;
var LineChart = exports.LineChart = _weaveC3Linechart2.default;
var PieChart = exports.PieChart = _weaveC3Piechart2.default;
var Histogram = exports.Histogram = _weaveC3Histogram2.default;
var Map = exports.Map = _map2.default;
var DataTable = exports.DataTable = _weaveReactTable2.default;
var MenuTool = exports.MenuTool = _weaveSessionStateMenu2.default;
var getUrlParams = exports.getUrlParams = _StandardLib2.default.getUrlParams;

var loadLayout = exports.loadLayout = function loadLayout(weave, fileName, targetEltId, callback) {

    function render() {
        _reactDom2.default.render(_react2.default.createElement(WeaveUI.Layout, { weave: weave }), document.getElementById(targetEltId), callback);
    }

    if (!fileName && weave) {
        render();
    }

    weavejs.core.WeaveArchive.loadUrl(weave, fileName).then(render, function (e) {
        console.error(e);
    });
};

},{"../outts/tools/weave-c3-barchart.jsx":25,"../outts/tools/weave-c3-colorlegend.jsx":26,"../outts/tools/weave-c3-histogram.jsx":27,"../outts/tools/weave-c3-piechart.jsx":28,"../outts/tools/weave-c3-scatterplot.jsx":29,"../outts/utils/StandardLib.js":31,"./WeaveLayoutManager":33,"./tools/map.js":37,"./tools/weave-c3-linechart.jsx":50,"./tools/weave-react-table.jsx":51,"./tools/weave-session-state-menu.jsx":52,"jszip":"jszip","react":"react","react-dom":"react-dom"}],37:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _WeaveTool = require("../../outts/WeaveTool.jsx");

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _AbstractWeaveTool2 = require("../../outts/tools/AbstractWeaveTool.jsx");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _Layer = require("./map/layers/Layer.js");

var _Layer2 = _interopRequireDefault(_Layer);

var _FeatureLayer = require("./map/layers/FeatureLayer.js");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

var _GeometryLayer = require("./map/layers/GeometryLayer.js");

var _GeometryLayer2 = _interopRequireDefault(_GeometryLayer);

var _TileLayer = require("./map/layers/TileLayer.js");

var _TileLayer2 = _interopRequireDefault(_TileLayer);

var _ImageGlyphLayer = require("./map/layers/ImageGlyphLayer.js");

var _ImageGlyphLayer2 = _interopRequireDefault(_ImageGlyphLayer);

var _ScatterPlotLayer = require("./map/layers/ScatterPlotLayer.js");

var _ScatterPlotLayer2 = _interopRequireDefault(_ScatterPlotLayer);

var _controls = require("./map/controls.js");

var _interactions = require("./map/interactions.js");

var _interactions2 = _interopRequireDefault(_interactions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable */

/* eslint-enable */

/*global weavejs*/

var WeaveOpenLayersMap = function (_AbstractWeaveTool) {
	_inherits(WeaveOpenLayersMap, _AbstractWeaveTool);

	function WeaveOpenLayersMap(props) {
		_classCallCheck(this, WeaveOpenLayersMap);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveOpenLayersMap).call(this, props));

		_this.layers = {};
		return _this;
	}

	_createClass(WeaveOpenLayersMap, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			_get(Object.getPrototypeOf(WeaveOpenLayersMap.prototype), "componentDidMount", this).call(this);

			this.interactionModePath = this.toolPath.weave.path("WeaveProperties", "toolInteractions", "defaultDragMode");

			this.map = new _openlayers2.default.Map({
				interactions: (0, _interactions2.default)(this),
				controls: [],
				target: this.element
			});

			this.zoomButtons = new _openlayers2.default.control.Zoom();
			this.slider = new _openlayers2.default.control.ZoomSlider();
			this.pan = new _controls.PanCluster();

			this.toolPath.push("projectionSRS").addCallback(this, this.onProjectionChanged, true);
			this.toolPath.push("showZoomControls").addCallback(this, this.onZoomControlToggle, true);
			this.toolPath.push("showMouseModeControls").addCallback(this, this.onMouseModeControlToggle, true);

			this.mouseModeButtons = new _controls.InteractionModeCluster({ interactionModePath: this.interactionModePath });

			this.plottersPath = this.toolPath.push("children", "visualization", "plotManager", "plotters");
			this.layerSettingsPath = this.toolPath.push("children", "visualization", "plotManager", "layerSettings");
			this.zoomBoundsPath = this.toolPath.push("children", "visualization", "plotManager", "zoomBounds");

			this.plottersPath.getObject().childListCallbacks.addGroupedCallback(this, this.plottersChanged, true);

			this.zoomBoundsPath.addCallback(this, this.getSessionCenter, true);
		}
	}, {
		key: "onProjectionChanged",
		value: function onProjectionChanged() {
			var projectionSRS = this.toolPath.push("projectionSRS").getState() || "EPSG:3857";
			var view = new _openlayers2.default.View({ projection: projectionSRS });

			this.centerCallbackHandle = view.on("change:center", this.setSessionCenter, this);
			this.resolutionCallbackHandle = view.on("change:resolution", this.setSessionZoom, this);
			this.map.setView(view);

			this.getSessionCenter();
		}
	}, {
		key: "resize",
		value: function resize() {
			this.map.updateSize();
			var viewport = this.map.getViewport();
			var screenBounds = new weavejs.geom.Bounds2D(0, 0, viewport.clientWidth, viewport.clientHeight);
			this.zoomBoundsPath.getObject().setScreenBounds(screenBounds, true);
		}
	}, {
		key: "updateControlPositions",
		value: function updateControlPositions() {
			if (this.toolPath.push("showZoomControls").getState()) {
				(0, _jquery2.default)(this.element).find(".ol-control.panCluster").css({ top: "0.5em", left: "0.5em" });
				(0, _jquery2.default)(this.element).find(".ol-control.ol-zoom").css({ top: "5.5em", left: "2.075em" });
				(0, _jquery2.default)(this.element).find(".ol-control.ol-zoomslider").css({ top: "9.25em", left: "2.075em" });
				(0, _jquery2.default)(this.element).find(".ol-control.iModeCluster").css({ top: "20.75em", left: "0.6em" });
			} else {
				(0, _jquery2.default)(this.element).find(".ol-control");
			}
		}
	}, {
		key: "onMouseModeControlToggle",
		value: function onMouseModeControlToggle() {
			var showMouseModeControls = this.toolPath.push("showMouseModeControls").getState();
			if (showMouseModeControls) {
				this.map.addControl(this.mouseModeButtons);
			} else {
				this.map.removeControl(this.mouseModeButtons);
			}
			this.updateControlPositions();
		}
	}, {
		key: "onZoomControlToggle",
		value: function onZoomControlToggle() {
			var showZoomControls = this.toolPath.push("showZoomControls").getState();
			if (showZoomControls) {
				this.map.addControl(this.slider);
				this.map.addControl(this.pan);
				this.map.addControl(this.zoomButtons);
			} else {
				this.map.removeControl(this.slider);
				this.map.removeControl(this.pan);
				this.map.removeControl(this.zoomButtons);
			}
			this.updateControlPositions();
		}
	}, {
		key: "setSessionCenter",
		value: function setSessionCenter() {
			var _map$getView$getCente = this.map.getView().getCenter();

			var _map$getView$getCente2 = _slicedToArray(_map$getView$getCente, 2);

			var xCenter = _map$getView$getCente2[0];
			var yCenter = _map$getView$getCente2[1];

			var zoomBounds = this.zoomBoundsPath.getObject();
			// remove callback temporarily to avoid triggering due to rounding error?
			// TODO - avoid rounding error
			this.zoomBoundsPath.removeCallback(this, this.getSessionCenter);

			var dataBounds = new weavejs.geom.Bounds2D();
			zoomBounds.getDataBounds(dataBounds);
			dataBounds.setXCenter(xCenter);
			dataBounds.setYCenter(yCenter);
			zoomBounds.setDataBounds(dataBounds);

			this.zoomBoundsPath.addCallback(this, this.getSessionCenter);
		}
	}, {
		key: "setSessionZoom",
		value: function setSessionZoom() {
			var resolution = this.map.getView().getResolution();

			var zoomBounds = this.zoomBoundsPath.getObject();
			// remove callback temporarily to avoid triggering due to rounding error?
			// TODO - avoid rounding error
			this.zoomBoundsPath.removeCallback(this, this.getSessionCenter);

			var dataBounds = new weavejs.geom.Bounds2D();
			var screenBounds = new weavejs.geom.Bounds2D();
			zoomBounds.getDataBounds(dataBounds);
			zoomBounds.getScreenBounds(screenBounds);
			dataBounds.setWidth(screenBounds.getWidth() * resolution);
			dataBounds.setHeight(screenBounds.getHeight() * resolution);
			dataBounds.makeSizePositive();
			zoomBounds.setDataBounds(dataBounds);

			this.zoomBoundsPath.addCallback(this, this.getSessionCenter);
		}
	}, {
		key: "getSessionCenter",
		value: function getSessionCenter() {
			var _this2 = this;

			var zoomBounds = this.zoomBoundsPath.getObject();
			var dataBounds = new weavejs.geom.Bounds2D();
			zoomBounds.getDataBounds(dataBounds);
			var center = [dataBounds.getXCenter(), dataBounds.getYCenter()];
			var scale = zoomBounds.getXScale();

			this.map.getView().un("change:center", this.setSessionCenter, this);
			this.map.getView().un("change:resolution", this.setSessionZoom, this);

			this.map.getView().setCenter(center);
			this.map.getView().setResolution(1 / scale);

			_lodash2.default.defer(function () {
				_this2.map.getView().on("change:center", _this2.setSessionCenter, _this2);
				_this2.map.getView().on("change:resolution", _this2.setSessionZoom, _this2);
			});
		}
	}, {
		key: "plottersChanged",
		value: function plottersChanged() {
			var oldNames = _lodash2.default.keys(this.layers);
			var newNames = this.plottersPath.getNames();

			var removedNames = _lodash2.default.difference(oldNames, newNames);
			var addedNames = _lodash2.default.difference(newNames, oldNames);

			removedNames.forEach(function (name) {
				if (this.layers[name]) {
					this.layers[name].destroy();
				}
				delete this.layers[name];
			}, this);

			addedNames.forEach(function (name) {
				this.layers[name] = _Layer2.default.newLayer(this, name);
			}, this);
			/* */
			for (var idx in newNames) {
				var layer = this.layers[newNames[idx]];

				if (!layer || !layer.layer) {
					continue;
				}

				layer.layer.setZIndex(idx + 2);
			}
		}
	}, {
		key: "destroy",
		value: function destroy() {}
	}]);

	return WeaveOpenLayersMap;
}(_AbstractWeaveTool3.default);

exports.default = WeaveOpenLayersMap;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::MapTool", WeaveOpenLayersMap);

},{"../../outts/WeaveTool.jsx":17,"../../outts/tools/AbstractWeaveTool.jsx":24,"./map/controls.js":39,"./map/interactions.js":40,"./map/layers/FeatureLayer.js":41,"./map/layers/GeometryLayer.js":42,"./map/layers/ImageGlyphLayer.js":45,"./map/layers/Layer.js":46,"./map/layers/ScatterPlotLayer.js":47,"./map/layers/TileLayer.js":48,"jquery":"jquery","lodash":"lodash","openlayers":"openlayers"}],38:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// var inherits = function(childCtor, parentCtor) {
//   /** @constructor */
//   function tempCtor() {}
//   tempCtor.prototype = parentCtor.prototype;
//   childCtor.superClass_ = parentCtor.prototype;
//   childCtor.prototype = new tempCtor();
//   /** @override */
//   childCtor.prototype.constructor = childCtor;
// };

// var CustomDragBoxEvent = function (type, innerEvent) {
// 	ol.MapEvent.call(this, type, innerEvent.map, innerEvent.frameState)
// 	this.innerEvent = innerEvent;
// };

// console.log(ol.MapBrowserEvent);
// inherits(CustomDragBoxEvent, ol.MapBrowserEvent);
//

var BoxControl = function (_ol$control$Control) {
	_inherits(BoxControl, _ol$control$Control);

	function BoxControl(opt_options) {
		_classCallCheck(this, BoxControl);

		var options = opt_options ? opt_options : {};

		var element = (0, _jquery2.default)("<div>").css({
			position: "absolute"
		}).addClass('ol-box');

		return _possibleConstructorReturn(this, Object.getPrototypeOf(BoxControl).call(this, { element: element[0], target: options.target }));
	}

	_createClass(BoxControl, [{
		key: "setPixels",
		value: function setPixels(startPixel, endPixel) {
			this.startPixel = startPixel;
			this.endPixel = endPixel;

			var _startPixel = _slicedToArray(startPixel, 2);

			var left = _startPixel[0];
			var top = _startPixel[1];

			var _endPixel = _slicedToArray(endPixel, 2);

			var right = _endPixel[0];
			var bottom = _endPixel[1];

			var _lodash$sortBy = _lodash2.default.sortBy([top, bottom]);

			var _lodash$sortBy2 = _slicedToArray(_lodash$sortBy, 2);

			top = _lodash$sortBy2[0];
			bottom = _lodash$sortBy2[1];

			var _lodash$sortBy3 = _lodash2.default.sortBy([left, right]);

			var _lodash$sortBy4 = _slicedToArray(_lodash$sortBy3, 2);

			left = _lodash$sortBy4[0];
			right = _lodash$sortBy4[1];

			var height = bottom - top;
			var width = right - left;

			(0, _jquery2.default)(this.element).css({ top: top, left: left, width: width, height: height });

			this.updateGeometry();
		}
	}, {
		key: "updateGeometry",
		value: function updateGeometry() {
			var startPixel = this.startPixel;
			var endPixel = this.endPixel;
			var pixels = [startPixel, [startPixel[0], endPixel[1]], endPixel, [endPixel[0], startPixel[1]]];
			var map = this.getMap();

			var coordinates = pixels.map(map.getCoordinateFromPixel, map);
			// close the polygon
			coordinates[4] = coordinates[0].slice();

			if (!this.geometry_) {
				this.geometry_ = new _openlayers2.default.geom.Polygon([coordinates]);
			} else {
				this.geometry_.setCoordinates([coordinates]);
			}
		}
	}, {
		key: "getGeometry",
		value: function getGeometry() {
			return this.geometry_;
		}
	}]);

	return BoxControl;
}(_openlayers2.default.control.Control);

var CustomDragBox = function CustomDragBox(opt_options) {
	_openlayers2.default.interaction.Pointer.call(this, {
		handleDownEvent: CustomDragBox.handleDownEvent,
		handleDragEvent: CustomDragBox.handleDragEvent,
		handleUpEvent: CustomDragBox.handleUpEvent
	});

	var options = opt_options ? opt_options : {};

	this.boxControl = new BoxControl();

	this.startPixel_ = null;

	this.condition_ = options.condition ? options.condition : _openlayers2.default.events.condition.always;
};

_openlayers2.default.inherits(CustomDragBox, _openlayers2.default.interaction.Pointer);

CustomDragBox.prototype.getGeometry = function () {
	return this.boxControl.getGeometry();
};

CustomDragBox.handleDragEvent = function (mapBrowserEvent) {
	if (!_openlayers2.default.events.condition.mouseOnly(mapBrowserEvent)) {
		return;
	}
	this.boxControl.setPixels(this.startPixel_, mapBrowserEvent.pixel);
	this.dispatchEvent({ type: 'boxdrag', innerEvent: mapBrowserEvent });
};

CustomDragBox.handleDownEvent = function (mapBrowserEvent) {
	if (!_openlayers2.default.events.condition.mouseOnly(mapBrowserEvent)) {
		return false;
	}

	if (this.condition_(mapBrowserEvent)) {
		this.startPixel_ = mapBrowserEvent.pixel;
		this.boxControl.setMap(mapBrowserEvent.map);
		this.boxControl.setPixels(this.startPixel_, this.startPixel_);
		this.dispatchEvent({ type: 'boxstart', innerEvent: mapBrowserEvent });
		return true;
	} else {
		return false;
	}
};

CustomDragBox.handleUpEvent = function (mapBrowserEvent) {
	if (!_openlayers2.default.events.condition.mouseOnly(mapBrowserEvent)) {
		return true;
	}

	this.boxControl.setMap(null);

	this.dispatchEvent({ type: 'boxend', innerEvent: mapBrowserEvent });
};

exports.default = CustomDragBox;

},{"jquery":"jquery","lodash":"lodash","openlayers":"openlayers"}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.InteractionModeCluster = exports.PanCluster = undefined;

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PanCluster = exports.PanCluster = function PanCluster(optOptions) {
	_classCallCheck(this, PanCluster);

	var options = optOptions || {};
	var parent = (0, _jquery2.default)("\n\t\t<div style=\"background-color: rgba(0,0,0,0)\" class=\"ol-unselectable ol-control panCluster\">\n\t\t\t<table style=\"font-size:75%\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td></td><td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster N\">N</button></td><td></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster W\">W</button></td>\n\t\t\t\t\t<td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster X fa fa-arrows-alt\"></button></td>\n\t\t\t\t\t<td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster E\">E</button></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td></td><td class=\"ol-control\" style=\"position:relative\"><button class=\"panCluster S\">S</button></td><td></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>");

	var directions = {
		N: [0, 1],
		E: [1, 0],
		S: [0, -1],
		W: [-1, 0],
		X: [null, null]
	};

	var self = this;

	var pan = function pan(xSign, ySign) {
		var panPercent = 0.3;
		var map = self.getMap();
		var view = map.getView();
		var extent = view.calculateExtent(map.getSize());

		var extentWidth = Math.abs(extent[0] - extent[2]);
		var extentHeight = Math.abs(extent[1] - extent[3]);

		var center = view.getCenter();

		center[0] += extentWidth * xSign * panPercent;
		center[1] += extentHeight * ySign * panPercent;

		view.setCenter(center);
	};

	var zoomExtent = function zoomExtent() {
		var map = self.getMap();
		var view = map.getView();
		var extent = view.getProjection().getExtent();
		var size = map.getSize();
		view.fit(extent, size);
	};

	for (var direction in directions) {
		var xSign = directions[direction][0];
		var ySign = directions[direction][1];

		var button = parent.find(".panCluster." + direction);

		if (xSign !== null) {
			button.click(pan.bind(this, xSign, ySign));
		} else {
			button.click(zoomExtent.bind(this));
		}
	}

	_openlayers2.default.control.Control.call(this, { element: parent[0], target: options.target });
};

_openlayers2.default.inherits(PanCluster, _openlayers2.default.control.Control);

var InteractionModeCluster = exports.InteractionModeCluster = function InteractionModeCluster(optOptions) {
	_classCallCheck(this, InteractionModeCluster);

	var interactionModePath = optOptions.interactionModePath;
	var options = optOptions || {};
	var buttonTable = (0, _jquery2.default)("\n\t\t\t<table class=\"ol-unselectable ol-control iModeCluster\">\n\t\t\t\t<tr style=\"font-size: 80%\">\n\t\t\t\t\t<td><button class=\"iModeCluster pan fa fa-hand-grab-o\"></button></td>\n\t\t\t\t\t<td><button class=\"iModeCluster select fa fa-mouse-pointer\"></button></td>\n\t\t\t\t\t<td><button class=\"iModeCluster zoom fa fa-search-plus\"></button></td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t");

	buttonTable.find("button.iModeCluster.pan").click(function () {
		return interactionModePath.state("pan");
	});
	buttonTable.find("button.iModeCluster.select").click(function () {
		return interactionModePath.state("select");
	});
	buttonTable.find("button.iModeCluster.zoom").click(function () {
		return interactionModePath.state("zoom");
	});

	interactionModePath.addCallback(this, function () {
		buttonTable.find("button.iModeCluster").removeClass("active");
		buttonTable.find("button.iModeCluster." + interactionModePath.getState()).addClass("active");
	}, true);

	_openlayers2.default.control.Control.call(this, { element: buttonTable[0], target: options.target });
};

_openlayers2.default.inherits(InteractionModeCluster, _openlayers2.default.control.Control);

},{"jquery":"jquery","openlayers":"openlayers"}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _FeatureLayer = require("./layers/FeatureLayer.js");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

var _CustomDragBox = require("./CustomDragBox.js");

var _CustomDragBox2 = _interopRequireDefault(_CustomDragBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*global Weave*/

function getProbeInteraction(mapTool) {
	return new _openlayers2.default.interaction.Pointer({
		handleMoveEvent: function handleMoveEvent(event) {
			// weavepath -> keystring -> zindex
			var d2d_keySet_keyString_zIndex = new Map();
			/* We need to have sets for all the layers so that probing over an empty area correctly empties the keyset */
			mapTool.map.getLayers().forEach(function (layer) {
				var weaveLayerObject = layer.get("layerObject");

				if (weaveLayerObject.probeKeySet && !d2d_keySet_keyString_zIndex.get(weaveLayerObject.probeKeySet)) {
					d2d_keySet_keyString_zIndex.set(weaveLayerObject.probeKeySet.getObject(), new Map());
				}
			}, mapTool);
			mapTool.map.forEachFeatureAtPixel(event.pixel, function (feature, layer) {
				var weaveLayerObject = layer.get("layerObject");

				var map_keyString_zIndex = d2d_keySet_keyString_zIndex.get(weaveLayerObject.probeKeySet.getObject());

				/* No need to check here, we created one for every probeKeySet in the prior forEach */

				map_keyString_zIndex.set(feature.getId(), layer.getZIndex());
			}, function (layer) {
				return layer.getSelectable() && layer instanceof _FeatureLayer2.default;
			});

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = d2d_keySet_keyString_zIndex.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var weaveKeySet = _step.value;

					var map_keyString_zIndex = d2d_keySet_keyString_zIndex.get(weaveKeySet);

					var top = { key: null, index: -Infinity };

					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;

					try {
						for (var _iterator2 = map_keyString_zIndex.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var key = _step2.value;

							var index = map_keyString_zIndex.get(key);
							if (index > top.index) {
								top.index = index;
								top.key = key;
							}
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}

					if (top.key) {
						Weave.getPath(weaveKeySet).setKeys([top.key]);
					} else {
						Weave.getPath(weaveKeySet).setKeys([]);
					}
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	});
}

function getDragSelect(mapTool, probeInteraction) {
	var ADD = "+";
	var SUBTRACT = "-";
	var SET = "=";
	var dragSelect = new _CustomDragBox2.default();
	var mode = SET;

	function updateSelection(extent) {
		var selectedFeatures = new Set();
		var selectFeature = function selectFeature(feature) {
			selectedFeatures.add(feature.getId());
		};

		var _iteratorNormalCompletion3 = true;
		var _didIteratorError3 = false;
		var _iteratorError3 = undefined;

		try {
			for (var _iterator3 = _lodash2.default.keys(mapTool.layers)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
				var weaveLayerName = _step3.value;

				var weaveLayer = mapTool.layers[weaveLayerName];
				var olLayer = weaveLayer.layer;
				var selectable = olLayer.get("selectable");

				if (weaveLayer instanceof _FeatureLayer2.default && selectable) {
					var keySet = weaveLayer.selectionKeySet;
					var source = olLayer.getSource();

					source.forEachFeatureIntersectingExtent(extent, selectFeature);

					var keys = Array.from(selectedFeatures);

					switch (mode) {
						case SET:
							keySet.setKeys(keys);
							break;
						case ADD:
							keySet.addKeys(keys);
							break;
						case SUBTRACT:
							keySet.removeKeys(keys);
							break;
					}
				}
			}
		} catch (err) {
			_didIteratorError3 = true;
			_iteratorError3 = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion3 && _iterator3.return) {
					_iterator3.return();
				}
			} finally {
				if (_didIteratorError3) {
					throw _iteratorError3;
				}
			}
		}
	}

	dragSelect.on('boxstart', function (dragBoxEvent) {
		probeInteraction.setActive(false);

		var event = dragBoxEvent.innerEvent.originalEvent;
		if (event.ctrlKey) {
			mode = ADD;
			if (event.shiftKey) {
				mode = SUBTRACT;
			}
		} else {
			mode = SET;
		}
	});

	dragSelect.on('boxend', function () {
		var extent = dragSelect.getGeometry().getExtent();

		updateSelection(extent);
		probeInteraction.setActive(true);
		mode = SET;
	});

	dragSelect.on('boxdrag', _lodash2.default.debounce(function () {
		var extent = dragSelect.getGeometry().getExtent();

		updateSelection(extent);
	}));

	return dragSelect;
}

function weaveMapInteractions(mapTool) {

	var probeInteraction = getProbeInteraction(mapTool);
	var dragSelect = getDragSelect(mapTool, probeInteraction);
	var dragPan = new _openlayers2.default.interaction.DragPan({});
	var dragZoom = new _openlayers2.default.interaction.DragZoom({ condition: _openlayers2.default.events.condition.always });

	mapTool.interactionModePath.addCallback(mapTool, function () {
		var interactionMode = mapTool.interactionModePath.getState();
		dragPan.setActive(interactionMode === "pan");
		dragSelect.setActive(interactionMode === "select");
		dragZoom.setActive(interactionMode === "zoom");
	}, true);

	var interactionCollection = _openlayers2.default.interaction.defaults({ dragPan: false });
	var _arr = [dragPan, dragZoom, dragSelect, probeInteraction];
	for (var _i = 0; _i < _arr.length; _i++) {
		var interaction = _arr[_i];
		interactionCollection.push(interaction);
	}return interactionCollection;
}

exports.default = weaveMapInteractions;

},{"./CustomDragBox.js":38,"./layers/FeatureLayer.js":41,"lodash":"lodash","openlayers":"openlayers"}],41:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Layer2 = require("./Layer.js");

var _Layer3 = _interopRequireDefault(_Layer2);

var _StandardLib = require("../../../../outts/utils/StandardLib.js");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FeatureLayer = function (_Layer) {
	_inherits(FeatureLayer, _Layer);

	/* A FeatureLayer assumes that each feature will have multiple custom style properties on each feature, which are managed based on selection. */

	function FeatureLayer(parent, layerName) {
		_classCallCheck(this, FeatureLayer);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FeatureLayer).call(this, parent, layerName));

		_this.updateMetaStyle = _this.updateMetaStyle.bind(_this);
		_this.debounced_updateMetaStyles = _lodash2.default.debounce(_this.updateMetaStyles.bind(_this), 0);

		_this.layer = new _openlayers2.default.layer.Vector();
		_this.source = new _openlayers2.default.source.Vector({ wrapX: false });

		/* Every feature that is added should register a handler to automatically recompute the metastyles when the styles change. */
		_this.source.on("addfeature", _this.onFeatureAdd, _this);

		_this.changedItems = new Set();
		_this.probedSet = new Set();
		_this.selectedSet = new Set();
		_this.filteredSet = new Set();

		_this.selectionKeySet = _this.layerPath.selection_keyset;
		_this.probeKeySet = _this.layerPath.probe_keyset;
		_this.subsetFilter = _this.layerPath.subset_filter; //push("filteredKeySet");

		var selectionKeyHandler = _this.updateSetFromKeySet.bind(_this, _this.selectionKeySet, _this.selectedSet);
		var probeKeyHandler = _this.updateSetFromKeySet.bind(_this, _this.probeKeySet, _this.probedSet);

		_this.selectionKeySet.addKeySetCallback(selectionKeyHandler);
		_this.probeKeySet.addKeySetCallback(probeKeyHandler);

		_this.subsetFilter.addCallback(_this, _this.updateFilteredKeySet, true);
		_this.settingsPath.push("selectable").addCallback(_this, _this.updateMetaStyles);
		return _this;
	}

	_createClass(FeatureLayer, [{
		key: "onFeatureAdd",
		value: function onFeatureAdd(vectorEvent) {
			vectorEvent.feature.on("propertychange", this.onFeaturePropertyChange, this);
		}
	}, {
		key: "onFeaturePropertyChange",
		value: function onFeaturePropertyChange(objectEvent) {
			var propertyName = objectEvent.key;
			var feature = objectEvent.target;

			if (!_lodash2.default.contains(FeatureLayer.Styles, propertyName)) {
				/* The property that changed isn't one of our metaStyle properties, so we don't care. */
				return;
			} else {
				/* The property that changed was a metastyle, and as such the style should be recomputed */
				//lodash.defer(this.updateMetaStyle, feature);
				this.debounced_updateMetaStyles();
			}
		}
	}, {
		key: "updateSetFromKeySet",
		value: function updateSetFromKeySet(keySet, set, diff) {
			if (!this.source) return; //HACK

			var wasEmpty = set.size === 0;

			this.changedItems.clear();

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = diff.added[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var key = _step.value;

					set.add(key);
					this.changedItems.add(key);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = diff.removed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var key = _step2.value;

					set.delete(key);
					this.changedItems.add(key);
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			var isEmpty = set.size === 0;

			/* If a set becomes empty or nonempty, we should recompute all the styles. Otherwise, only recompute the styles of the features which changed. */
			if (isEmpty !== wasEmpty) {
				this.updateMetaStyles();
			} else {
				this.changedItems.forEach(function (featureId) {
					var feature = this.source.getFeatureById(featureId);
					if (feature) {
						this.updateMetaStyle(feature);
					}
				}, this);
			}
		}
	}, {
		key: "updateFilteredKeySet",
		value: function updateFilteredKeySet() {
			if (!this.source) return; //HACK

			var sourceKeys = this.source.getFeatures().map(function (feature) {
				return feature.getId();
			});

			this.filteredSet.clear();

			var filteredKeys = this.subsetFilter.filterKeys(sourceKeys);
			var _iteratorNormalCompletion3 = true;
			var _didIteratorError3 = false;
			var _iteratorError3 = undefined;

			try {
				for (var _iterator3 = filteredKeys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
					var key = _step3.value;

					this.filteredSet.add(key);
				}
			} catch (err) {
				_didIteratorError3 = true;
				_iteratorError3 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion3 && _iterator3.return) {
						_iterator3.return();
					}
				} finally {
					if (_didIteratorError3) {
						throw _iteratorError3;
					}
				}
			}

			this.updateMetaStyles();
		}
	}, {
		key: "updateMetaStyles",
		value: function updateMetaStyles() {
			if (!this.source) return; //HACK

			this.tempSelectable = this.settingsPath.push("selectable").getState();

			this.source.forEachFeature(this.updateMetaStyle, this);
		}
	}, {
		key: "updateMetaStyle",
		value: function updateMetaStyle(feature) {
			var id = feature.getId();
			var nullStyle = new _openlayers2.default.style.Style({});
			var unselectedStyle = feature.get("unselectedStyle") || nullStyle;
			var normalStyle = feature.get("normalStyle") || nullStyle;
			var selectedStyle = feature.get("selectedStyle") || nullStyle;
			var probedStyle = feature.get("probedStyle") || nullStyle;
			var zOrder = feature.get("zOrder") || 0;
			var replace = feature.get("replace");
			var newStyle = undefined;

			if (!this.filteredSet.has(id)) {
				feature.setStyle(nullStyle);
				return;
			}

			if (!this.tempSelectable) {
				feature.setStyle(normalStyle);
				return;
			}

			if (!this.selectedSet.has(id) && !this.probedSet.has(id) && this.selectedSet.size > 0) {
				if (replace) {
					newStyle = unselectedStyle;
					newStyle.setZIndex(zOrder);
				} else {
					newStyle = [].concat(unselectedStyle);
					newStyle[0].setZIndex(zOrder);
				}
			} else {
				newStyle = [].concat(normalStyle);
				newStyle[0].setZIndex(zOrder);
			}

			if (this.selectedSet.has(id)) {
				if (replace) {
					newStyle = selectedStyle;
					newStyle.setZIndex(Number.MAX_SAFE_INTEGER - 3);
				} else {
					newStyle = newStyle.concat(selectedStyle);
					newStyle[0].setZIndex(Number.MAX_SAFE_INTEGER - 3);
				}
			}

			if (this.probedSet.has(id)) {
				if (replace) {
					newStyle = probedStyle;
					newStyle.setZIndex(Number.MAX_SAFE_INTEGER);
				} else {
					newStyle = newStyle.concat(probedStyle);
					newStyle[0].setZIndex(Number.MAX_SAFE_INTEGER);
				}
			}

			feature.setStyle(newStyle);
		}
	}], [{
		key: "toColorArray",
		value: function toColorArray(colorString, alpha) {
			var colorArray;
			if (colorString[0] === "#") {
				colorArray = _openlayers2.default.color.asArray(colorString);
			} else {
				colorArray = _openlayers2.default.color.asArray("#" + _StandardLib2.default.decimalToHex(Number(colorString)));
			}

			colorArray = [].concat(colorArray); /* Should not be modified since it is cached in ol.color.asArray */

			if (!colorArray) {
				return null;
			}

			colorArray[3] = Number(alpha);
			return colorArray;
		}
	}, {
		key: "toColorRGBA",
		value: function toColorRGBA(colorString, alpha) {
			var colorArray = FeatureLayer.toColorArray(colorString, alpha);
			return _openlayers2.default.color.asString(colorArray);
		}
	}, {
		key: "olFillFromWeaveFill",
		value: function olFillFromWeaveFill(fill, fade) {
			if (fade === undefined) fade = 1;

			var color = fill.color && FeatureLayer.toColorArray(fill.color, fill.alpha * fade) || [0, 0, 0, 0];
			return new _openlayers2.default.style.Fill({ color: color });
		}
	}, {
		key: "olStrokeFromWeaveStroke",
		value: function olStrokeFromWeaveStroke(stroke, fade) {
			if (fade === undefined) fade = 1;

			var color = stroke.color && FeatureLayer.toColorArray(stroke.color, stroke.alpha * fade) || [0, 0, 0, 1];

			var lineCap = stroke.lineCap === "none" ? "butt" : stroke.lineCap || "round";
			var lineJoin = stroke.lineJoin === null ? "round" : stroke.lineJoin || "round";
			var miterLimit = Number(stroke.miterLimit);
			var width = Number(stroke.weight);

			return new _openlayers2.default.style.Stroke({ color: color, lineCap: lineCap, lineJoin: lineJoin, miterLimit: miterLimit, width: width });
		}
	}, {
		key: "getOlProbedStyle",
		value: function getOlProbedStyle(baseStrokeStyle) {
			var width = baseStrokeStyle.getWidth();

			return [new _openlayers2.default.style.Style({
				stroke: new _openlayers2.default.style.Stroke({
					color: [0, 0, 0, 1],
					width: width + FeatureLayer.PROBE_HALO_WIDTH + FeatureLayer.PROBE_LINE_WIDTH
				}),
				zIndex: Number.MAX_SAFE_INTEGER - 2
			}), new _openlayers2.default.style.Style({
				stroke: new _openlayers2.default.style.Stroke({
					color: [255, 255, 255, 1],
					width: width + FeatureLayer.PROBE_HALO_WIDTH
				}),
				zIndex: Number.MAX_SAFE_INTEGER - 1
			})];
		}
	}, {
		key: "getOlSelectionStyle",
		value: function getOlSelectionStyle(baseStrokeStyle) {
			var width = baseStrokeStyle.getWidth();
			var lineCap = baseStrokeStyle.getLineCap();
			var lineJoin = baseStrokeStyle.getLineJoin();
			var miterLimit = baseStrokeStyle.getMiterLimit();

			return [new _openlayers2.default.style.Style({
				stroke: new _openlayers2.default.style.Stroke({
					color: [0, 0, 0, 0.5],
					width: width + FeatureLayer.SELECT_WIDTH,
					lineCap: lineCap, lineJoin: lineJoin, miterLimit: miterLimit }),
				zIndex: Number.MAX_SAFE_INTEGER - 4
			})];
		}
	}]);

	return FeatureLayer;
}(_Layer3.default);

exports.default = FeatureLayer;

FeatureLayer.SELECT_WIDTH = 5;
FeatureLayer.PROBE_HALO_WIDTH = 4;
FeatureLayer.PROBE_LINE_WIDTH = 1;

FeatureLayer.Styles = {
	NORMAL: "normalStyle",
	UNSELECTED: "unselectedStyle", /* For the case where a selection has been made in the layer but the element is not one of them. */
	SELECTED: "selectedStyle",
	PROBED: "probedStyle"
};

exports.default = FeatureLayer;

},{"../../../../outts/utils/StandardLib.js":31,"./Layer.js":46,"lodash":"lodash","openlayers":"openlayers"}],42:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _Layer = require("./Layer.js");

var _FeatureLayer2 = require("./FeatureLayer.js");

var _FeatureLayer3 = _interopRequireDefault(_FeatureLayer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*global weavejs*/

var GeometryLayer = function (_FeatureLayer) {
	_inherits(GeometryLayer, _FeatureLayer);

	function GeometryLayer(parent, layerName) {
		_classCallCheck(this, GeometryLayer);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GeometryLayer).call(this, parent, layerName));

		_this.geoJsonParser = new _openlayers2.default.format.GeoJSON();

		_this.geoColumnPath = _this.layerPath.push("geometryColumn");
		_this.fillStylePath = _this.layerPath.push("fill");
		_this.lineStylePath = _this.layerPath.push("line");

		_this.geoColumnPath.addCallback(_this, _this.updateGeometryData, true);
		_this.projectionPath.addCallback(_this, _this.updateGeometryData, true);

		_this.fillStylePath.addCallback(_this, _this.updateStyleData);
		_this.lineStylePath.addCallback(_this, _this.updateStyleData, true);
		return _this;
	}

	_createClass(GeometryLayer, [{
		key: "updateGeometryData",
		value: function updateGeometryData() {
			var projectionSpec = this.geoColumnPath.getObject("internalDynamicColumn", null).getMetadata('projection');

			var outputProjection = this.projectionPath.getState() || "EPSG:3857";
			var inputProjection = projectionSpec || outputProjection;

			this.source.clear();

			var keys = this.geoColumnPath.push('internalDynamicColumn').getKeys();
			var idc = this.geoColumnPath.getObject("internalDynamicColumn");
			var rawGeometries = weavejs.data.ColumnUtils.getGeoJsonGeometries(idc, idc.keys);

			for (var idx = 0; idx < keys.length; idx++) {
				var id = keys[idx];

				var geometry = this.geoJsonParser.readGeometry(rawGeometries[idx], { dataProjection: inputProjection, featureProjection: outputProjection });

				var feature = new _openlayers2.default.Feature({ geometry: geometry });
				feature.setId(id);

				this.source.addFeature(feature);
			}

			this.updateStyleData();
			this.updateFilteredKeySet();
		}
	}, {
		key: "updateStyleData",
		value: function updateStyleData() {
			var styleRecords = this.layerPath.retrieveRecords({
				fill: {
					color: this.fillStylePath.push("color"),
					alpha: this.fillStylePath.push("alpha"),
					imageURL: this.fillStylePath.push("imageURL")
				},
				stroke: {
					color: this.lineStylePath.push("color"),
					alpha: this.lineStylePath.push("alpha"),
					weight: this.lineStylePath.push("weight"),
					lineCap: this.lineStylePath.push("caps"),
					lineJoin: this.lineStylePath.push("joints"),
					miterLimit: this.lineStylePath.push("miterLimit")
				}
			}, this.geoColumnPath);

			this.rawStyles = styleRecords;

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = styleRecords[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var record = _step.value;

					var olStroke = _FeatureLayer3.default.olStrokeFromWeaveStroke(record.stroke);
					var olFill = _FeatureLayer3.default.olFillFromWeaveFill(record.fill);

					var olStrokeFaded = _FeatureLayer3.default.olStrokeFromWeaveStroke(record.stroke, 0.5);
					var olFillFaded = _FeatureLayer3.default.olFillFromWeaveFill(record.fill, 0.5);

					var normalStyle = [new _openlayers2.default.style.Style({
						fill: olFill,
						stroke: olStroke,
						zIndex: 0
					})];

					var unselectedStyle = [new _openlayers2.default.style.Style({
						fill: olFillFaded,
						stroke: olStrokeFaded,
						zIndex: 0
					})];

					var selectedStyle = _FeatureLayer3.default.getOlSelectionStyle(olStroke);
					var probedStyle = _FeatureLayer3.default.getOlProbedStyle(olStroke);

					var feature = this.source.getFeatureById(record.id);

					if (feature) {
						feature.setProperties({ normalStyle: normalStyle, unselectedStyle: unselectedStyle, selectedStyle: selectedStyle, probedStyle: probedStyle });
					}
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	}]);

	return GeometryLayer;
}(_FeatureLayer3.default);

exports.default = GeometryLayer;

(0, _Layer.registerLayerImplementation)("weave.visualization.plotters::GeometryPlotter", GeometryLayer);

},{"./FeatureLayer.js":41,"./Layer.js":46,"openlayers":"openlayers"}],43:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _FeatureLayer2 = require("./FeatureLayer.js");

var _FeatureLayer3 = _interopRequireDefault(_FeatureLayer2);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GlyphLayer = function (_FeatureLayer) {
	_inherits(GlyphLayer, _FeatureLayer);

	function GlyphLayer(parent, layerName) {
		_classCallCheck(this, GlyphLayer);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GlyphLayer).call(this, parent, layerName));

		_this.projectionPath.addCallback(_this, _this.updateLocations);
		_this.layerPath.push("sourceProjection").addCallback(_this, _this.updateLocations);

		_this.layerPath.push("dataX").addCallback(_this, _this.updateLocations);
		_this.layerPath.push("dataY").addCallback(_this, _this.updateLocations, true);
		return _this;
	}

	_createClass(GlyphLayer, [{
		key: "_getFeatureIds",
		value: function _getFeatureIds() {
			return _lodash2.default.map(this.source.getFeatures(), function (item) {
				return item.getId();
			});
		}
	}, {
		key: "updateLocations",
		value: function updateLocations() {
			/* Update feature locations */
			var records = this.layerPath.retrieveRecords(["dataX", "dataY"], this.layerPath.push("dataX"));

			var recordIds = _lodash2.default.pluck(records, "id");

			var removedIds = _lodash2.default.difference(this._getFeatureIds(), recordIds);

			var rawProj = this.layerPath.getState("sourceProjection") || "EPSG:4326";
			var mapProj = this.projectionPath.getState() || "EPSG:3857";

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = removedIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var id = _step.value;

					var feature = this.source.getFeatureById(id);
					this.source.removeFeature(feature);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = records[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var record = _step2.value;

					var feature = this.source.getFeatureById(record.id);

					if (!feature) {
						feature = new _openlayers2.default.Feature({});
						feature.setId(record.id);
						this.source.addFeature(feature);
					}

					var dataX = undefined,
					    dataY = undefined;

					dataX = GlyphLayer._toPoint(record.dataX, "xMin", "xMax");
					dataY = GlyphLayer._toPoint(record.dataY, "yMin", "yMax");

					var point = new _openlayers2.default.geom.Point([dataX, dataY]);
					point.transform(rawProj, mapProj);
					feature.setGeometry(point);
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			this.updateFilteredKeySet();
			this.updateStyleData();
		}
	}], [{
		key: "_toPoint",
		value: function _toPoint(datum, field1, field2) {
			if ((typeof datum === "undefined" ? "undefined" : _typeof(datum)) === "object") {
				var firstPoly = datum[0];
				return (firstPoly.bounds[field1] + firstPoly.bounds[field2]) / 2;
			} else {
				return datum;
			}
		}
	}]);

	return GlyphLayer;
}(_FeatureLayer3.default);

exports.default = GlyphLayer;

},{"./FeatureLayer.js":41,"lodash":"lodash","openlayers":"openlayers"}],44:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Map2D = function () {
	function Map2D() {
		_classCallCheck(this, Map2D);

		this._map = new Map();
	}

	_createClass(Map2D, [{
		key: "get",
		value: function get(firstKey, secondKey) {
			var secondMap = this._map.get(firstKey);
			return secondMap && secondMap.get(secondKey);
		}
	}, {
		key: "set",
		value: function set(firstKey, secondKey, value) {
			var secondMap = this._map.get(firstKey);
			if (!secondMap) {
				secondMap = new Map();
				this._map.set(firstKey, secondMap);
			}

			secondMap.set(secondKey, value);
		}
	}]);

	return Map2D;
}();

var ImageGlyphCache = function () {
	function ImageGlyphCache() {
		_classCallCheck(this, ImageGlyphCache);

		this.baseImageElements = new Map();
		this.canvasMap = new Map2D();
		this.imageMap = new Map2D();
	}

	_createClass(ImageGlyphCache, [{
		key: "requestBaseImageElement",
		value: function requestBaseImageElement(url, callback) {
			var imageElement = this.baseImageElements.get(url);

			if (!imageElement) {
				imageElement = new Image();
				imageElement.src = url;
				this.baseImageElements.set(url, imageElement);
			}

			if (imageElement.complete) {
				callback(imageElement);
			} else {
				(0, _jquery2.default)(imageElement).one("load", function () {
					return callback(imageElement);
				});
			}
		}
	}, {
		key: "getCachedCanvas",
		value: function getCachedCanvas(url, color) {
			var canvas = this.canvasMap.get(url, color);
			var freshCanvas = false;

			if (!canvas) {
				freshCanvas = true;
				canvas = document.createElement("canvas");
				this.canvasMap.set(url, color, canvas);
			}

			return { canvas: canvas, freshCanvas: freshCanvas };
		}
	}, {
		key: "requestDataUrl",
		value: function requestDataUrl(url, color, callback) {
			var _getCachedCanvas = this.getCachedCanvas(url, color);

			var canvas = _getCachedCanvas.canvas;
			var freshCanvas = _getCachedCanvas.freshCanvas;
			/* If freshCanvas is true, this means that we just created the canvas and haven't rendered to it. Time to do that. */

			if (freshCanvas) {
				this.requestBaseImageElement(url, function (imageElement) {
					var _ref = [imageElement.naturalHeight, imageElement.naturalWidth];
					canvas.height = _ref[0];
					canvas.width = _ref[1];

					var ctx = canvas.getContext("2d");
					ctx.fillStyle = color;
					ctx.fillRect(0, 0, canvas.width, canvas.height);

					ctx.globalCompositeOperation = "destination-atop";
					ctx.drawImage(imageElement, 0, 0);

					ctx.globalCompositeOperation = "multiply";
					ctx.drawImage(imageElement, 0, 0);

					callback(canvas.toDataURL());
				});
			} else {
				callback(canvas.toDataURL());
			}
		}
	}, {
		key: "getImage",
		value: function getImage(url, color) {
			var image = this.imageMap.get(url, color);

			if (!image) {
				image = new Image();
				this.requestDataUrl(url, color, function (dataUrl) {
					image.src = dataUrl;
				});
			}

			return image;
		}
	}]);

	return ImageGlyphCache;
}();

exports.default = ImageGlyphCache;

},{"jquery":"jquery"}],45:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _GlyphLayer2 = require("./GlyphLayer.js");

var _GlyphLayer3 = _interopRequireDefault(_GlyphLayer2);

var _FeatureLayer = require("./FeatureLayer.js");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

var _ImageGlyphCache = require("./ImageGlyphCache.js");

var _ImageGlyphCache2 = _interopRequireDefault(_ImageGlyphCache);

var _Layer = require("./Layer.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ImageGlyphLayer = function (_GlyphLayer) {
	_inherits(ImageGlyphLayer, _GlyphLayer);

	function ImageGlyphLayer(parent, layerName) {
		_classCallCheck(this, ImageGlyphLayer);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ImageGlyphLayer).call(this, parent, layerName));

		_this.imageGlyphCache = new _ImageGlyphCache2.default();

		_this.layerPath.push("imageSize").addCallback(_this, _this.updateStyleData);
		_this.layerPath.push("imageURL").addCallback(_this, _this.updateStyleData, true);
		return _this;
	}

	_createClass(ImageGlyphLayer, [{
		key: "setIconStyle",
		value: function setIconStyle(feature, img, iconSize) {
			var styles = {};

			if (!img.complete || !img.src) {
				(0, _jquery2.default)(img).one("load", this.setIconStyle.bind(this, feature, img, iconSize));
				return;
			}

			var maxDim = Math.max(img.naturalHeight, img.naturalWidth);

			var scale = iconSize / maxDim;

			var imgSize = [img.naturalWidth, img.naturalHeight];

			var _arr = ["normal", "selected", "probed", "unselected"];
			for (var _i = 0; _i < _arr.length; _i++) {
				var stylePrefix = _arr[_i];
				var icon = undefined;
				if (stylePrefix === "probed") {
					icon = new _openlayers2.default.style.Icon({ img: img, imgSize: imgSize, scale: scale * 2.0 });
				} else {
					icon = new _openlayers2.default.style.Icon({ img: img, imgSize: imgSize, scale: scale });
				}

				if (stylePrefix === "unselected") {
					icon.setOpacity(1 / 3);
				}

				styles[stylePrefix + "Style"] = new _openlayers2.default.style.Style({ image: icon });
			}

			styles.replace = true;

			feature.setProperties(styles);
		}
	}, {
		key: "updateStyleData",
		value: function updateStyleData() {
			/* Update feature styles */

			var records = this.layerPath.retrieveRecords(["alpha", "color", "imageURL", "imageSize"], this.layerPath.push("dataX"));

			this.rawStyleRecords = records;

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = records[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var record = _step.value;

					var feature = this.source.getFeatureById(record.id);

					if (!feature) {
						continue;
					}

					var imageSize = Number(record.imageSize);
					var color = _FeatureLayer2.default.toColorRGBA(record.color, record.alpha);

					if (!record.imageURL) {
						feature.setStyle(null);
						continue;
					}

					var img = this.imageGlyphCache.getImage(record.imageURL, color);

					this.setIconStyle(feature, img, imageSize);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	}]);

	return ImageGlyphLayer;
}(_GlyphLayer3.default);

exports.default = ImageGlyphLayer;

(0, _Layer.registerLayerImplementation)("weave.visualization.plotters::ImageGlyphPlotter", ImageGlyphLayer);

},{"./FeatureLayer.js":41,"./GlyphLayer.js":43,"./ImageGlyphCache.js":44,"./Layer.js":46,"jquery":"jquery","openlayers":"openlayers"}],46:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.newLayer = exports.layerRegistry = undefined;
exports.registerLayerImplementation = registerLayerImplementation;

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var layerRegistry = exports.layerRegistry = {};

function registerLayerImplementation(asClassName, jsClass) {
	if (!layerRegistry) {
		exports.layerRegistry = layerRegistry = {};
	}
	layerRegistry[asClassName] = jsClass;
}

function _newLayer(parent, layerName) {
	var path = parent.plottersPath.push(layerName);
	var layerType = path.getType();
	var LayerClass = layerRegistry[layerType];
	if (!LayerClass) {
		return null;
	} else {
		return new LayerClass(parent, layerName);
	}
}

exports.newLayer = _newLayer;

var Layer = function () {
	_createClass(Layer, null, [{
		key: "newLayer",
		value: function newLayer(parent, layerName) {
			return _newLayer(parent, layerName);
		}
	}]);

	function Layer(parent, layerName) {
		_classCallCheck(this, Layer);

		this.layerPath = parent.plottersPath.push(layerName);
		this.settingsPath = parent.layerSettingsPath.push(layerName);
		this.projectionPath = parent.toolPath.push("projectionSRS");
		this.parent = parent;
		this.layerName = layerName;
		this.layer = null;
		this._layerReadyCallbacks = {};

		this.linkProperty(this.settingsPath.push("alpha"), "opacity");
		this.linkProperty(this.settingsPath.push("visible"), "visible");
		this.linkProperty(this.settingsPath.push("selectable"), "selectable");
		/* TODO max and minvisiblescale, map to min/max resolution. */
	}

	_createClass(Layer, [{
		key: "linkProperty",
		value: function linkProperty(propertyPath, propertyName, inTransform) {
			var _this = this;

			/* change in path modifying propertyName */
			inTransform = inTransform || _lodash2.default.identity;

			var callback = function callback() {
				if (_this.layer) {
					_this.layer.set(propertyName, inTransform(propertyPath.getState()));
				}
			};

			this._layerReadyCallbacks[propertyName] = callback;

			propertyPath.addCallback(this, callback, false, false);
		}
	}, {
		key: "destroy",
		value: function destroy() {
			this.layer = undefined;
		}
	}, {
		key: "source",
		get: function get() {
			return this.layer && this.layer.getSource();
		},
		set: function set(value) {
			this.layer.setSource(value);
		}

		/* Handles initial apply of linked properties, adding/removing from map */

	}, {
		key: "layer",
		set: function set(value) {
			if (this._layer != null) {
				this.parent.map.removeLayer(this._layer);
			}

			this._layer = value;

			if (value) {
				this.parent.map.addLayer(value);

				value.set("layerObject", this); /* Need to store this backref */

				if (value) {
					for (var name in this._layerReadyCallbacks) {
						this._layerReadyCallbacks[name]();
					}
				}
			}
		},
		get: function get() {
			return this._layer;
		}
	}]);

	return Layer;
}();

exports.default = Layer;

},{"lodash":"lodash"}],47:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

var _StandardLib = require("../../../../outts/utils/StandardLib.js");

var _StandardLib2 = _interopRequireDefault(_StandardLib);

var _FeatureLayer = require("./FeatureLayer.js");

var _FeatureLayer2 = _interopRequireDefault(_FeatureLayer);

var _Layer = require("./Layer.js");

var _GlyphLayer2 = require("./GlyphLayer.js");

var _GlyphLayer3 = _interopRequireDefault(_GlyphLayer2);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScatterPlotLayer = function (_GlyphLayer) {
	_inherits(ScatterPlotLayer, _GlyphLayer);

	function ScatterPlotLayer(parent, layerName) {
		_classCallCheck(this, ScatterPlotLayer);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ScatterPlotLayer).call(this, parent, layerName));

		_this.sizeBy = _this.layerPath.push("sizeBy").addCallback(_this, _this.updateStyleData, true);

		_this.fillStylePath = _this.layerPath.push("fill").addCallback(_this, _this.updateStyleData);
		_this.lineStylePath = _this.layerPath.push("line").addCallback(_this, _this.updateStyleData);
		_this.maxRadiusPath = _this.layerPath.push("maxScreenRadius").addCallback(_this, _this.updateStyleData);
		_this.minRadiusPath = _this.layerPath.push("minScreenRadius").addCallback(_this, _this.updateStyleData);

		_this.defaultRadiusPath = _this.layerPath.push("defaultScreenRadius").addCallback(_this, _this.updateStyleData, true);
		return _this;
	}

	_createClass(ScatterPlotLayer, [{
		key: "updateStyleData",
		value: function updateStyleData() {
			var styleRecords = this.layerPath.retrieveRecords({
				fill: {
					color: this.fillStylePath.push("color"),
					alpha: this.fillStylePath.push("alpha"),
					imageURL: this.fillStylePath.push("imageURL")
				},
				stroke: {
					color: this.lineStylePath.push("color"),
					alpha: this.lineStylePath.push("alpha"),
					weight: this.lineStylePath.push("weight"),
					lineCap: this.lineStylePath.push("caps"),
					lineJoin: this.lineStylePath.push("joints"),
					miterLimit: this.lineStylePath.push("miterLimit")
				}
			});

			var styleRecordsIndex = _lodash2.default.indexBy(styleRecords, "id");

			var sizeByNumeric = this.layerPath.retrieveRecords({ sizeBy: this.sizeBy }, { dataType: "number" });

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = sizeByNumeric[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var record = _step.value;

					var id = record.id;
					var fullRecord = styleRecordsIndex[id];
					if (fullRecord) {
						fullRecord.sizeBy = record.sizeBy;
					}
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			this.rawStyles = styleRecords;

			var sizeBy = _lodash2.default.pluck(styleRecords, "sizeBy");
			var sizeByMax = _lodash2.default.max(sizeBy);
			var sizeByMin = _lodash2.default.min(sizeBy);
			var absMax = Math.max(sizeByMax, sizeByMin);
			var minScreenRadius = this.minRadiusPath.getState();
			var maxScreenRadius = this.maxRadiusPath.getState();
			var defaultScreenRadius = this.defaultRadiusPath.getState();

			styleRecords = _lodash2.default.sortByOrder(styleRecords, ["sizeBy", "id"], ["desc"], ["asc"]);

			var zOrder = 0;

			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = styleRecords[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var record = _step2.value;

					var screenRadius = undefined;

					var normSize = _StandardLib2.default.normalize(Math.abs(record.sizeBy), 0, absMax);

					if (isNaN(normSize) || record.sizeBy === null) {
						screenRadius = defaultScreenRadius;
					} else {
						screenRadius = minScreenRadius + normSize * (maxScreenRadius - minScreenRadius);
					}

					var olStroke = _FeatureLayer2.default.olStrokeFromWeaveStroke(record.stroke);
					var olFill = _FeatureLayer2.default.olFillFromWeaveFill(record.fill);

					var olStrokeFaded = _FeatureLayer2.default.olStrokeFromWeaveStroke(record.stroke, 0.5);
					var olFillFaded = _FeatureLayer2.default.olFillFromWeaveFill(record.fill, 0.5);

					var olSelectionStyle = _FeatureLayer2.default.getOlSelectionStyle(olStroke);
					var olProbedStyle = _FeatureLayer2.default.getOlProbedStyle(olStroke);

					var normalStyle = [new _openlayers2.default.style.Style({
						image: new _openlayers2.default.style.Circle({
							fill: olFill, stroke: olStroke,
							radius: screenRadius
						})
					})];

					var unselectedStyle = [new _openlayers2.default.style.Style({
						image: new _openlayers2.default.style.Circle({
							fill: olFillFaded, stroke: olStrokeFaded,
							radius: screenRadius
						})
					})];

					var selectedStyle = [new _openlayers2.default.style.Style({
						image: new _openlayers2.default.style.Circle({
							stroke: olSelectionStyle[0].getStroke(),
							radius: screenRadius
						}),
						zIndex: olSelectionStyle[0].getZIndex()
					})];

					var probedStyle = [new _openlayers2.default.style.Style({
						image: new _openlayers2.default.style.Circle({
							stroke: olProbedStyle[0].getStroke(),
							radius: screenRadius
						}),
						zIndex: olProbedStyle[0].getZIndex()
					}), new _openlayers2.default.style.Style({
						image: new _openlayers2.default.style.Circle({
							stroke: olProbedStyle[1].getStroke(),
							radius: screenRadius
						}),
						zIndex: olProbedStyle[1].getZIndex()
					})];

					var feature = this.source.getFeatureById(record.id);

					if (feature) {
						feature.setProperties({ normalStyle: normalStyle, unselectedStyle: unselectedStyle, selectedStyle: selectedStyle, probedStyle: probedStyle, zOrder: zOrder });
					}

					zOrder++;
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}
		}
	}]);

	return ScatterPlotLayer;
}(_GlyphLayer3.default);

exports.default = ScatterPlotLayer;

(0, _Layer.registerLayerImplementation)("weave.visualization.plotters::ScatterPlotPlotter", ScatterPlotLayer);

},{"../../../../outts/utils/StandardLib.js":31,"./FeatureLayer.js":41,"./GlyphLayer.js":43,"./Layer.js":46,"lodash":"lodash","openlayers":"openlayers"}],48:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Layer2 = require("./Layer.js");

var _Layer3 = _interopRequireDefault(_Layer2);

var _openlayers = require("openlayers");

var _openlayers2 = _interopRequireDefault(_openlayers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TileLayer = function (_Layer) {
	_inherits(TileLayer, _Layer);

	function TileLayer(parent, layerName) {
		_classCallCheck(this, TileLayer);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TileLayer).call(this, parent, layerName));

		_this.layer = new _openlayers2.default.layer.Tile();
		_this.servicePath = _this.layerPath.push("service", null);
		_this.oldProviderName = null;

		_this.servicePath.addCallback(_this, _this.updateTileSource, true);
		_this.projectionPath.addCallback(_this, _this.updateValidExtents, true);
		return _this;
	}

	_createClass(TileLayer, [{
		key: "updateValidExtents",
		value: function updateValidExtents() {
			var proj = _openlayers2.default.proj.get(this.projectionPath.getState() || "EPSG:3857");
			if (proj) this.layer.setExtent(proj.getExtent());else console.log('invalid proj -> no extent');
		}
	}, {
		key: "getCustomWMSSource",
		value: function getCustomWMSSource() {
			var customWMSPath = this.servicePath;

			if (customWMSPath.push("wmsURL").getType()) {
				var url = customWMSPath.getState("wmsURL");
				var attributions = customWMSPath.getState("creditInfo");
				var projection = customWMSPath.getState("tileProjectionSRS");

				return new _openlayers2.default.source.XYZ({
					url: url, attributions: attributions, projection: projection
				});
			}
		}
	}, {
		key: "getModestMapsSource",
		value: function getModestMapsSource() {
			var providerNamePath = this.servicePath.push("providerName");

			if (providerNamePath.getType()) {
				var providerName = providerNamePath.getState();

				if (providerName === this.oldProviderName) {
					return undefined;
				}

				switch (providerName) {
					case "Stamen WaterColor":
						return new _openlayers2.default.source.Stamen({ layer: "watercolor", wrapX: false });
					case "Stamen Toner":
						return new _openlayers2.default.source.Stamen({ layer: "toner", wrapX: false });
					case "Open MapQuest Aerial":
						return new _openlayers2.default.source.MapQuest({ layer: "sat", wrapX: false });
					case "Open MapQuest":
						return new _openlayers2.default.source.MapQuest({ layer: "osm", wrapX: false });
					case "Open Street Map":
						return new _openlayers2.default.source.OSM({ wrapX: false });
					case "Blue Marble Map":
						return new _openlayers2.default.source.TileWMS({ url: "http://neowms.sci.gsfc.nasa.gov/wms/wms", wrapX: false });
					default:
						return null;
				}
			}
		}
	}, {
		key: "updateTileSource",
		value: function updateTileSource() {
			var serviceDriverName = this.servicePath.getType();
			var newLayer = null;
			switch (serviceDriverName) {
				case "weave.services.wms::ModestMapsWMS":
					newLayer = this.getModestMapsSource();
					break;
				case "weave.services.wms::CustomWMS":
					newLayer = this.getCustomWMSSource();
					break;
				default:
					newLayer = null;
			}

			if (newLayer !== undefined) {
				this.source = newLayer;
			}
		}
	}]);

	return TileLayer;
}(_Layer3.default);

exports.default = TileLayer;

(0, _Layer2.registerLayerImplementation)("weave.visualization.plotters::WMSPlotter", TileLayer);

},{"./Layer.js":46,"openlayers":"openlayers"}],49:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//
/* global Weave, weavejs */

var Barchart = function (_React$Component) {
  _inherits(Barchart, _React$Component);

  function Barchart(props) {
    _classCallCheck(this, Barchart);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Barchart).call(this, props));
  }

  _createClass(Barchart, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', null);
    }
  }]);

  return Barchart;
}(_react2.default.Component);

/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */

exports.default = Barchart;
Barchart.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Barchart', qName: 'weavejs.tools.Barchart' }], interfaces: [weavejs.api.core.ILinkableObject] };
Weave.registerClass('weavejs.tools.Barchart', Barchart);

},{"react":"react"}],50:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _AbstractWeaveTool2 = require("../../outts/tools/AbstractWeaveTool.jsx");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _c = require("c3");

var _c2 = _interopRequireDefault(_c);

var _d = require("d3");

var _d2 = _interopRequireDefault(_d);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _WeaveTool = require("../../outts/WeaveTool.jsx");

var _FormatUtils = require("../../outts/utils/FormatUtils");

var _FormatUtils2 = _interopRequireDefault(_FormatUtils);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WeaveC3LineChart = function (_AbstractWeaveTool) {
    _inherits(WeaveC3LineChart, _AbstractWeaveTool);

    function WeaveC3LineChart(props) {
        _classCallCheck(this, WeaveC3LineChart);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveC3LineChart).call(this, props));

        _this.keyToIndex = {};
        _this.indexToKey = {};
        _this.yAxisValueToLabel = {};
        return _this;
    }

    _createClass(WeaveC3LineChart, [{
        key: "_selectionKeysChanged",
        value: function _selectionKeysChanged() {
            var _this2 = this;

            if (!this.chart) return;

            var selectedKeys = this.toolPath.selection_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this2.keyToIndex[key]);
            });

            var unselectedIndices = _lodash2.default.difference(indices, selectedIndices);
            if (selectedIndices.length) {
                //unfocus all circles
                _d2.default.select(this.element).selectAll("circle").filter(".c3-shape").style("opacity", "0.1");

                selectedIndices.forEach(function (index) {
                    //custom style for circles on selected lines
                    var circleCount = _d2.default.select(_d2.default.select(_this2.element).selectAll("g").filter(".c3-chart-line").selectAll("circle").filter(".c3-shape")[index])[0][0].length;
                    var selectedCircles = _lodash2.default.range(0, circleCount);
                    selectedCircles.forEach(function (i) {
                        _d2.default.select(_d2.default.select(_d2.default.select(_this2.element).selectAll("g").filter(".c3-chart-line").selectAll("circle").filter(".c3-shape")[index])[0][0][i]).style({ opacity: 1.0, "stroke-opacity": 1.0 });
                    });
                });

                this.customStyle(unselectedIndices, "path", ".c3-shape.c3-line", { opacity: 0.1 });
                this.customStyle(selectedIndices, "path", ".c3-shape.c3-line", { opacity: 1.0 });
                this.chart.select(["y"], selectedIndices, true);
            } else {
                //focus all circles
                _d2.default.select(this.element).selectAll("circle").filter(".c3-shape").style({ opacity: 1.0, "stroke-opacity": 0.0 });
                this.customStyle(indices, "path", ".c3-shape.c3-line", { opacity: 1.0 });
                this.chart.select(["y"], [], true);
            }
        }
    }, {
        key: "_probedKeysChanged",
        value: function _probedKeysChanged() {
            var _this3 = this;

            var selectedKeys = this.toolPath.probe_keyset.getKeys();
            var selectedIndices = selectedKeys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var keys = Object.keys(this.keyToIndex);
            var indices = keys.map(function (key) {
                return Number(_this3.keyToIndex[key]);
            });
            var unselectedIndices = _lodash2.default.difference(indices, selectedIndices);

            if (selectedIndices.length) {
                //unfocus all circles
                _d2.default.select(this.element).selectAll("circle").filter(".c3-shape").style({ opacity: 0.1, "stroke-opacity": 0.0 });

                selectedIndices.forEach(function (index) {
                    //custom style for circles on probed lines
                    var circleCount = _d2.default.select(_d2.default.select(_this3.element).selectAll("g").filter(".c3-chart-line").selectAll("circle").filter(".c3-shape")[index])[0][0].length;
                    var selectedCircles = _lodash2.default.range(0, circleCount);
                    selectedCircles.forEach(function (i) {
                        _d2.default.select(_d2.default.select(_d2.default.select(_this3.element).selectAll("g").filter(".c3-chart-line").selectAll("circle").filter(".c3-shape")[index])[0][0][i]).style({ opacity: 1.0, "stroke-opacity": 0.0 });
                    });
                });

                this.customStyle(unselectedIndices, "path", ".c3-shape.c3-line", { opacity: 0.1 });
                this.customStyle(selectedIndices, "path", ".c3-shape.c3-line", { opacity: 1.0 });
            } else {
                this._selectionKeysChanged();
            }
        }
    }, {
        key: "_updateStyle",
        value: function _updateStyle() {
            _d2.default.select(this.element).selectAll("circle").style("opacity", 1).style("stroke", "black").style("stroke-opacity", 0.0);
        }
    }, {
        key: "_dataChanged",
        value: function _dataChanged() {
            var _this4 = this;

            this.columnLabels = [];
            this.columnNames = [];

            var children = this.paths.columns.getChildren();

            this.yLabelColumnPath = children[0];

            var numericMapping = {
                columns: children,
                yLabel: this.yLabelColumnPath
            };

            var stringMapping = {
                columns: children,
                line: {
                    //alpha: this._lineStylePath.push("alpha"),
                    color: this.paths.lineStyle.push("color")
                    //caps: this._lineStylePath.push("caps")
                },
                yLabel: this.yLabelColumnPath
            };

            for (var idx in children) {
                var child = children[idx];
                var title = child.getValue("this.getMetadata('title')");
                var name = child.getPath().pop();
                this.columnLabels.push(title);
                this.columnNames.push(name);
            }

            this.numericRecords = this.paths.plotter.retrieveRecords(numericMapping, { keySet: this.paths.filteredKeySet, dataType: "number" });
            this.stringRecords = this.paths.plotter.retrieveRecords(stringMapping, { keySet: this.paths.filteredKeySet, dataType: "string" });

            this.records = _lodash2.default.zip(this.numericRecords, this.stringRecords);
            this.records = _lodash2.default.sortBy(this.records, [0, "id"]);

            if (this.records.length) {
                ;

                var _$unzip = _lodash2.default.unzip(this.records);

                var _$unzip2 = _slicedToArray(_$unzip, 2);

                this.numericRecords = _$unzip2[0];
                this.stringRecords = _$unzip2[1];
            }this.keyToIndex = {};
            this.indexToKey = {};
            this.yAxisValueToLabel = {};

            this.numericRecords.forEach(function (record, index) {
                _this4.keyToIndex[record.id] = index;
                _this4.indexToKey[index] = record.id;
            });

            this.stringRecords.forEach(function (record, index) {
                var numericRecord = _this4.numericRecords[index];
                _this4.yAxisValueToLabel[numericRecord.yLabel] = record.yLabel;
            });

            var columns = [];

            columns = this.numericRecords.map(function (record) {
                var tempArr = [];
                tempArr.push(record.id);
                _lodash2.default.keys(record.columns).forEach(function (key) {
                    tempArr.push(record.columns[key]);
                });
                return tempArr;
            });

            this.colors = {};
            this.stringRecords.forEach(function (record) {
                _this4.colors[record.id] = record.line.color || "#C0CDD1";
            });

            var chartType = "line";
            if (this.paths.plotter.push("curveType").getState() === "double") {
                chartType = "spline";
            }

            this.chart.load({ columns: columns, colors: this.colors, type: chartType, unload: true });
        }
    }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            _get(Object.getPrototypeOf(WeaveC3LineChart.prototype), "componentDidUpdate", this).call(this);
            //console.log("resizing");
            //var start = Date.now();
            var newElementSize = this.getElementSize();
            if (!_lodash2.default.isEqual(newElementSize, this.elementSize)) {
                this.chart.resize(newElementSize);
                this.elementSize = newElementSize;
            }
            //var end = Date.now();
            //console.log(end - start);
        }
    }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
            /* Cleanup callbacks */
            //this.teardownCallbacks();
            _get(Object.getPrototypeOf(WeaveC3LineChart.prototype), "componentWillUnmount", this).call(this);
            this.chart.destroy();
        }
    }, {
        key: "componentDidMount",
        value: function componentDidMount() {
            var _this5 = this;

            _get(Object.getPrototypeOf(WeaveC3LineChart.prototype), "componentDidMount", this).call(this);
            document.addEventListener("keydown", this.toggleKey.bind(this));
            document.addEventListener("keyup", this.toggleKey.bind(this));
            var dataChanged = _lodash2.default.debounce(this._dataChanged.bind(this), 100);
            var selectionKeySetChanged = this._selectionKeysChanged.bind(this);
            var probeKeySetChanged = _lodash2.default.debounce(this._probedKeysChanged.bind(this), 100);
            var plotterPath = this.toolPath.pushPlotter("plot");
            var mapping = [{ name: "plotter", path: plotterPath, callbacks: null }, { name: "columns", path: plotterPath.push("columns"), callbacks: dataChanged }, { name: "lineStyle", path: plotterPath.push("lineStyle"), callbacks: dataChanged }, { name: "curveType", path: plotterPath.push("curveType"), callbacks: dataChanged }, { name: "filteredKeySet", path: plotterPath.push("filteredKeySet"), callbacks: dataChanged }, { name: "selectionKeySet", path: this.toolPath.selection_keyset, callbacks: selectionKeySetChanged }, { name: "probeKeySet", path: this.toolPath.probe_keyset, callbacks: probeKeySetChanged }];

            this.initializePaths(mapping);

            this.c3Config = {
                //size: this.getElementSize(),
                padding: {
                    top: 20,
                    bottom: 20,
                    right: 30
                },
                data: {
                    columns: [],
                    xSort: false,
                    selection: {
                        enabled: true,
                        multiple: true,
                        draggable: true
                    },
                    onclick: function onclick(d) {
                        if (!_this5.keyDown && d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.setKeys([d.id]);
                        }
                    },
                    onselected: function onselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.addKeys([d.id]);
                        }
                    },
                    onunselected: function onunselected(d) {
                        _this5.flag = true;
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.selection_keyset.removeKeys([d.id]);
                        }
                    },
                    onmouseover: function onmouseover(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([d.id]);
                        }
                    },
                    onmouseout: function onmouseout(d) {
                        if (d && d.hasOwnProperty("index")) {
                            _this5.toolPath.probe_keyset.setKeys([]);
                        }
                    }
                },
                tooltip: {
                    show: false
                },
                grid: {
                    x: {
                        show: true
                    },
                    y: {
                        show: true
                    }
                },
                axis: {
                    x: {
                        tick: {
                            multiline: false,
                            rotate: 0,
                            format: function format(d) {
                                return _this5.columnLabels[d];
                            }
                        }
                    },
                    y: {
                        tick: {
                            multiline: true,
                            format: function format(num) {
                                if (_this5.yLabelColumnPath && _this5.yLabelColumnPath.getValue("this.getMetadata('dataType')") !== "number") {
                                    return _this5.yAxisValueToLabel[num] || "";
                                } else {
                                    return _FormatUtils2.default.defaultNumberFormatting(num);
                                }
                            }
                        }
                    }
                },
                bindto: this.element,
                legend: {
                    show: false
                },
                onrendered: this._updateStyle.bind(this)
            };

            this.chart = _c2.default.generate(this.c3Config);
        }
    }, {
        key: "handleClick",
        value: function handleClick(event) {
            if (!this.flag) {
                this.toolPath.selection_keyset.setKeys([]);
            }
            this.flag = false;
        }
    }, {
        key: "toggleKey",
        value: function toggleKey(event) {
            if (event.keyCode === 17 || event.keyCode === 91 || event.keyCode === 224) {
                this.keyDown = !this.keyDown;
            }
        }
    }]);

    return WeaveC3LineChart;
}(_AbstractWeaveTool3.default);

exports.default = WeaveC3LineChart;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::LineChartTool", WeaveC3LineChart);

},{"../../outts/WeaveTool.jsx":17,"../../outts/tools/AbstractWeaveTool.jsx":24,"../../outts/utils/FormatUtils":30,"c3":"c3","d3":"d3","lodash":"lodash","react":"react"}],51:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _WeaveTool = require("../../outts/WeaveTool.jsx");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _d = require("d3");

var _reactBootstrapTable = require("react-bootstrap-table");

var _AbstractWeaveTool2 = require("../../outts/tools/AbstractWeaveTool.jsx");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//import ReactDataGrid from "react-datagrid";

var WeaveReactTable = function (_AbstractWeaveTool) {
    _inherits(WeaveReactTable, _AbstractWeaveTool);

    function WeaveReactTable(props) {
        _classCallCheck(this, WeaveReactTable);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(WeaveReactTable).call(this, props));
    }

    _createClass(WeaveReactTable, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
            var elementSize = this.element ? this.getElementSize() : null;
            _reactDom2.default.render(_react2.default.createElement(DataTable, { toolPath: this.toolPath, width: elementSize.width + "px", height: elementSize.height + "px" }), this.element);
        }
    }]);

    return WeaveReactTable;
}(_AbstractWeaveTool3.default);

var DataTable = function (_React$Component) {
    _inherits(DataTable, _React$Component);

    function DataTable(props) {
        _classCallCheck(this, DataTable);

        var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(DataTable).call(this, props));

        _this2.toolPath = props.toolPath;
        _this2._columnsPath = _this2.toolPath.push("columns");
        return _this2;
    }

    _createClass(DataTable, [{
        key: "componentDidMount",
        value: function componentDidMount() {
            this._columnsPath.addCallback(this, _lodash2.default.debounce(this.forceUpdate.bind(this), 0), true, false);
            this.toolPath.push("filteredKeySet").addCallback(this, _lodash2.default.debounce(this.forceUpdate.bind(this), 0), true, false);
            this.toolPath.push("selectionKeySet").addCallback(this, this._selectionKeysChanged, true, false);
        }
    }, {
        key: "_selectionKeysChanged",
        value: function _selectionKeysChanged() {
            // var keys = this.toolPath.push("selectionKeySet", null).getKeys();
            // var selection = {};
            // keys.forEach((key) => {
            //     selection[key] = {};
            // });
            // this.setState({
            //     selected: selection
            // });
        }
    }, {
        key: "onSelectionChange",
        value: function onSelectionChange(selectedIds) {
            this.setState({
                selected: selectedIds
            });
            this.toolPath.push("selectionKeySet", null).setKeys(_lodash2.default.keys(selectedIds));
        }
    }, {
        key: "customFormat",
        value: function customFormat(cell, row) {
            if (typeof cell === "number") {
                return (0, _d.round)(cell, 2);
            } else {
                return cell;
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this3 = this;

            var data = this._columnsPath.retrieveRecords(this._columnsPath.getNames(), this.toolPath.push("filteredKeySet")) || [];

            var columns = this._columnsPath.getChildren().map(function (columnPath) {
                return {
                    name: columnPath.getPath().pop(),
                    title: columnPath.getValue("this.getMetadata('title')")
                };
            });

            columns.push({
                name: "id",
                title: "id"
            });

            //var columnWidth = this.props.container.clientWidth / columns.length;

            var columnHeaders = columns.map(function (column, index) {
                return _react2.default.createElement(
                    _reactBootstrapTable.TableHeaderColumn,
                    { dataField: column.name, key: index, dataAlign: "left", dataFormat: _this3.customFormat, dataSort: true },
                    column.title
                );
            });

            return _react2.default.createElement(
                _reactBootstrapTable.BootstrapTable,
                { data: data, keyField: "id", striped: true, hover: true, width: this.props.width, height: this.props.height },
                columnHeaders
            );
        }
    }]);

    return DataTable;
}(_react2.default.Component);

exports.default = WeaveReactTable;

(0, _WeaveTool.registerToolImplementation)("weave.visualization.tools::TableTool", WeaveReactTable);

},{"../../outts/WeaveTool.jsx":17,"../../outts/tools/AbstractWeaveTool.jsx":24,"d3":"d3","lodash":"lodash","react":"react","react-bootstrap-table":1,"react-dom":"react-dom"}],52:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactBootstrap = require("react-bootstrap");

var _WeaveTool = require("../../outts/WeaveTool.jsx");

var _AbstractWeaveTool2 = require("../../outts/tools/AbstractWeaveTool.jsx");

var _AbstractWeaveTool3 = _interopRequireDefault(_AbstractWeaveTool2);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var sessionStateMenuStyle = { width: "100%" };

var SessionStateMenuTool = function (_AbstractWeaveTool) {
  _inherits(SessionStateMenuTool, _AbstractWeaveTool);

  function SessionStateMenuTool(props) {
    _classCallCheck(this, SessionStateMenuTool);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SessionStateMenuTool).call(this, props));

    _this.toolPath.push("choices").addCallback(_this, _this.forceUpdate);
    _this.toolPath.push("selectedChoice").addCallback(_this, _this.forceUpdate);
    return _this;
  }

  _createClass(SessionStateMenuTool, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "handleItemClick",
    value: function handleItemClick(index, event) {
      console.log(index);
      this.toolPath.state("selectedChoice", this.choices.getNames()[index]);
      var targets = this.toolPath.push("targets");
      var choice = this.choices.getState(index);
      targets.forEach(choice, function (value, key) {
        this.push(key, null).state(value);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      this.choices = this.toolPath.push("choices");
      var selectedChoice = this.toolPath.getState("selectedChoice");

      var menus = this.choices.getNames().map(function (choice, index) {
        return choice === selectedChoice ? _react2.default.createElement(
          _reactBootstrap.ListGroupItem,
          { active: true, key: index, onClick: _this2.handleItemClick.bind(_this2, index) },
          choice
        ) : _react2.default.createElement(
          _reactBootstrap.ListGroupItem,
          { key: index, onClick: _this2.handleItemClick.bind(_this2, index) },
          choice
        );
      });

      return _react2.default.createElement(
        "div",
        { style: sessionStateMenuStyle },
        _react2.default.createElement(
          _reactBootstrap.ListGroup,
          null,
          menus
        )
      );
    }
  }]);

  return SessionStateMenuTool;
}(_AbstractWeaveTool3.default);

exports.default = SessionStateMenuTool;

(0, _WeaveTool.registerToolImplementation)("weave.ui::SessionStateMenuTool", SessionStateMenuTool);

},{"../../outts/WeaveTool.jsx":17,"../../outts/tools/AbstractWeaveTool.jsx":24,"lodash":"lodash","react":"react","react-bootstrap":"react-bootstrap"}]},{},[36])(36)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
